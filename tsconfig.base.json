{
  "compilerOptions": {
    "allowJs": false,
    "esModuleInterop": true,
    // TODO not all have DOM ?
    "lib": ["dom", "ESNext"],

    // this tells typescript to look for files, like modern node would do it
    "target": "ESNext",
    "module": "ESNext",
    "moduleResolution": "bundler",

    // we need .ts / .js extension with nodenext module resolution, so we write .ts ones and let ts rewrite them to .js
    "allowImportingTsExtensions": true,
    "rewriteRelativeImportExtensions": true,

    "skipLibCheck": true,
    "incremental": true,

    // setting up output
    // needs to be set each time
    // https://github.com/microsoft/TypeScript/issues/29172
    "rootDir": ".",
    "outDir": "dist",

    // setting up composite modules
    "declaration": true,
    "declarationMap": true,
    "sourceMap": true,
    "composite": true,
    "noEmit": false

    // TODO list

    // to use esm in node we want to set this
    // "module": "NodeNext",
    // "moduleResolution": "nodenext",

    // this let's us have fewer bugs
    // strict: true

    // this means we can compile modules in parallel
    // isolatedModules true

    // this allows node to run our typescript files unchanged
    // "erasableSyntaxOnly": true,

    // this means we have to use type when importing types. this avoids edgecases when an import is dropped in the ts rewrite
    // https://www.typescriptlang.org/tsconfig/#verbatimModuleSyntax
    // "verbatimModuleSyntax": true,
  },
  "exclude": ["node_modules", ".vscode-test", "dist"]
}
