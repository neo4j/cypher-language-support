import { DbSchema } from '../dbSchema';
import { Neo4jFunction, Neo4jProcedure } from '../types';

function asNeo4jFunctions<T extends Record<string, Neo4jFunction>>(obj: T) {
  return obj as { [P in keyof T]: Neo4jFunction };
}

function asNeo4jProcedures<T extends Record<string, Neo4jProcedure>>(obj: T) {
  return obj as { [P in keyof T]: Neo4jProcedure };
}

const mockSchema: DbSchema = {
  functions: {
    'CYPHER 5': asNeo4jFunctions({
      abs: {
        name: 'abs',
        category: 'Numeric',
        description: 'Returns the absolute value of an `INTEGER` or `FLOAT`.',
        signature: 'abs(input :: INTEGER | FLOAT) :: INTEGER | FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A numeric value from which the absolute number will be returned.',
            name: 'input',
            type: 'INTEGER | FLOAT',
          },
        ],
        returnDescription: 'INTEGER | FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      acos: {
        name: 'acos',
        category: 'Trigonometric',
        description: 'Returns the arccosine of a `FLOAT` in radians.',
        signature: 'acos(input :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An angle in radians.',
            name: 'input',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      all: {
        name: 'all',
        category: 'Predicate',
        description:
          'Returns true if the predicate holds for all elements in the given `LIST<ANY>`.',
        signature:
          'all(variable :: VARIABLE IN list :: LIST<ANY> WHERE predicate :: ANY) :: BOOLEAN',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A variable that can be used within the `WHERE` clause.',
            name: 'variable',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'A predicate must hold for all elements in this list for the function to return `true`.',
            name: 'list',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      any: {
        name: 'any',
        category: 'Predicate',
        description:
          'Returns true if the predicate holds for at least one element in the given `LIST<ANY>`.',
        signature:
          'any(variable :: VARIABLE IN list :: LIST<ANY> WHERE predicate :: ANY) :: BOOLEAN',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A variable that can be used within the `WHERE` clause.',
            name: 'variable',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'A list for the predicate to check against.',
            name: 'list',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.agg.first': {
        name: 'apoc.agg.first',
        category: '',
        description: 'Returns the first value from the given collection.',
        signature: 'apoc.agg.first(value :: ANY) :: ANY',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be aggregated.',
            name: 'value',
            type: 'ANY',
          },
        ],
        returnDescription: 'ANY',
        aggregating: true,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.agg.graph': {
        name: 'apoc.agg.graph',
        category: '',
        description:
          'Returns all distinct `NODE` and `RELATIONSHIP` values collected into a `MAP` with the keys `nodes` and `relationships`.',
        signature: 'apoc.agg.graph(path :: ANY) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A path to return nodes and relationships from.',
            name: 'path',
            type: 'ANY',
          },
        ],
        returnDescription: 'MAP',
        aggregating: true,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.agg.last': {
        name: 'apoc.agg.last',
        category: '',
        description: 'Returns the last value from the given collection.',
        signature: 'apoc.agg.last(value :: ANY) :: ANY',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be aggregated.',
            name: 'value',
            type: 'ANY',
          },
        ],
        returnDescription: 'ANY',
        aggregating: true,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.agg.maxItems': {
        name: 'apoc.agg.maxItems',
        category: '',
        description:
          'Returns a `MAP` `{items: LIST<ANY>, value: ANY}` where the `value` key is the maximum value present, and `items` represent all items with the same value. The size of the list of items can be limited to a given max size.',
        signature:
          'apoc.agg.maxItems(item :: ANY, value :: ANY, groupLimit = -1 :: INTEGER) :: ANY',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be aggregated.',
            name: 'item',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The value from which the max is selected.',
            name: 'value',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=-1, type=INTEGER}',
            description: 'The limit on the number of items returned.',
            name: 'groupLimit',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'ANY',
        aggregating: true,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.agg.median': {
        name: 'apoc.agg.median',
        category: '',
        description:
          'Returns the mathematical median for all non-null `INTEGER` and `FLOAT` values.',
        signature: 'apoc.agg.median(value :: ANY) :: ANY',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be aggregated.',
            name: 'value',
            type: 'ANY',
          },
        ],
        returnDescription: 'ANY',
        aggregating: true,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.agg.minItems': {
        name: 'apoc.agg.minItems',
        category: '',
        description:
          'Returns a `MAP` `{items: LIST<ANY>, value: ANY}` where the `value` key is the minimum value present, and `items` represent all items with the same value. The size of the list of items can be limited to a given max size.',
        signature:
          'apoc.agg.minItems(item :: ANY, value :: ANY, groupLimit = -1 :: INTEGER) :: ANY',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be aggregated.',
            name: 'item',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The value from which the min is selected.',
            name: 'value',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=-1, type=INTEGER}',
            description: 'The limit on the number of items returned.',
            name: 'groupLimit',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'ANY',
        aggregating: true,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.agg.nth': {
        name: 'apoc.agg.nth',
        category: '',
        description:
          'Returns the nth value in the given collection (to fetch the last item of an unknown length collection, -1 can be used).',
        signature: 'apoc.agg.nth(value :: ANY, offset :: INTEGER) :: ANY',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be aggregated.',
            name: 'value',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'The index of the value to be returned, or -1 to return the last item.',
            name: 'offset',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'ANY',
        aggregating: true,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.agg.percentiles': {
        name: 'apoc.agg.percentiles',
        category: '',
        description:
          'Returns the given percentiles over the range of numerical values in the given collection.',
        signature:
          'apoc.agg.percentiles(value :: INTEGER | FLOAT, percentiles = [0.5, 0.75, 0.9, 0.95, 0.99] :: LIST<FLOAT>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be aggregated.',
            name: 'value',
            type: 'INTEGER | FLOAT',
          },
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=[0.5, 0.75, 0.9, 0.95, 0.99], type=LIST<FLOAT>}',
            description: 'The percentiles from which the values are obtained.',
            name: 'percentiles',
            type: 'LIST<FLOAT>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: true,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.agg.product': {
        name: 'apoc.agg.product',
        category: '',
        description:
          'Returns the product of all non-null `INTEGER` and `FLOAT` values in the collection.',
        signature:
          'apoc.agg.product(value :: INTEGER | FLOAT) :: INTEGER | FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be multiplied in the aggregate.',
            name: 'value',
            type: 'INTEGER | FLOAT',
          },
        ],
        returnDescription: 'INTEGER | FLOAT',
        aggregating: true,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.agg.slice': {
        name: 'apoc.agg.slice',
        category: '',
        description:
          'Returns a subset of non-null values from the given collection (the collection is considered to be zero-indexed).\nTo specify the range from start until the end of the collection, the length should be set to -1.',
        signature:
          'apoc.agg.slice(value :: ANY, from = 0 :: INTEGER, to = -1 :: INTEGER) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be multiplied in the aggregate.',
            name: 'value',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=0, type=INTEGER}',
            description:
              'The index from which to start returning values in the specified range.',
            name: 'from',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=-1, type=INTEGER}',
            description:
              'The non-inclusive index of the final value in the range.',
            name: 'to',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: true,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.agg.statistics': {
        name: 'apoc.agg.statistics',
        category: '',
        description:
          'Returns the following statistics on the `INTEGER` and `FLOAT` values in the given collection: percentiles, min, minNonZero, max, total, mean, stdev.',
        signature:
          'apoc.agg.statistics(value :: INTEGER | FLOAT, percentiles = [0.5, 0.75, 0.9, 0.95, 0.99] :: LIST<FLOAT>) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be aggregated.',
            name: 'value',
            type: 'INTEGER | FLOAT',
          },
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=[0.5, 0.75, 0.9, 0.95, 0.99], type=LIST<FLOAT>}',
            description: 'The percentiles from which the values are obtained.',
            name: 'percentiles',
            type: 'LIST<FLOAT>',
          },
        ],
        returnDescription: 'MAP',
        aggregating: true,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.any.isDeleted': {
        name: 'apoc.any.isDeleted',
        category: '',
        description:
          'Returns true if the given `NODE` or `RELATIONSHIP` no longer exists.',
        signature: 'apoc.any.isDeleted(object :: ANY) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node or relationship to check the non-existence of.',
            name: 'object',
            type: 'ANY',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.any.properties': {
        name: 'apoc.any.properties',
        category: '',
        description:
          'Returns all properties of the given object.\nThe object can be a virtual `NODE`, a real `NODE`, a virtual `RELATIONSHIP`, a real `RELATIONSHIP`, or a `MAP`.',
        signature:
          'apoc.any.properties(object :: ANY, keys = null :: LIST<STRING>) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The object to return properties from.',
            name: 'object',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=LIST<STRING>}',
            description:
              'The keys of the properties to be returned (if null then all keys are returned).',
            name: 'keys',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.any.property': {
        name: 'apoc.any.property',
        category: '',
        description:
          'Returns the property for the given key from an object.\nThe object can be a virtual `NODE`, a real `NODE`, a virtual `RELATIONSHIP`, a real `RELATIONSHIP`, or a `MAP`.',
        signature: 'apoc.any.property(object :: ANY, key :: STRING) :: ANY',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The object to return a property from.',
            name: 'object',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The key of the property to return.',
            name: 'key',
            type: 'STRING',
          },
        ],
        returnDescription: 'ANY',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.bitwise.op': {
        name: 'apoc.bitwise.op',
        category: '',
        description: 'Returns the result of the bitwise operation',
        signature:
          'apoc.bitwise.op(a :: INTEGER, operator :: STRING, b :: INTEGER) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The lefthand side value of the bitwise operation.',
            name: 'a',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The type of bitwise operation to perform.',
            name: 'operator',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The righthand side value of the bitwise operation.',
            name: 'b',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.avg': {
        name: 'apoc.coll.avg',
        category: '',
        description:
          'Returns the average of the numbers in the `LIST<INTEGER | FLOAT>`.',
        signature: 'apoc.coll.avg(coll :: LIST<INTEGER | FLOAT>) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to return the average from.',
            name: 'coll',
            type: 'LIST<INTEGER | FLOAT>',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.combinations': {
        name: 'apoc.coll.combinations',
        category: '',
        description:
          'Returns a collection of all combinations of `LIST<ANY>` elements between the selection size `minSelect` and `maxSelect` (default: `minSelect`).',
        signature:
          'apoc.coll.combinations(coll :: LIST<ANY>, minSelect :: INTEGER, maxSelect = -1 :: INTEGER) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to return the combinations from.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The minimum selection size of the combination.',
            name: 'minSelect',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=-1, type=INTEGER}',
            description: 'The maximum selection size of the combination.',
            name: 'maxSelect',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.contains': {
        name: 'apoc.coll.contains',
        category: '',
        description:
          'Returns whether or not the given value exists in the given collection.',
        signature:
          'apoc.coll.contains(coll :: LIST<ANY>, value :: ANY) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to search for the given value.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The value in the list to check for the existence of.',
            name: 'value',
            type: 'ANY',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.containsAll': {
        name: 'apoc.coll.containsAll',
        category: '',
        description:
          'Returns whether or not all of the given values exist in the given collection.',
        signature:
          'apoc.coll.containsAll(coll1 :: LIST<ANY>, coll2 :: LIST<ANY>) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to search for the given values in.',
            name: 'coll1',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description:
              'The list of values in the given list to check for the existence of.',
            name: 'coll2',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.containsAllSorted': {
        name: 'apoc.coll.containsAllSorted',
        category: '',
        description:
          'Returns whether or not all of the given values in the second `LIST<ANY>` exist in an already sorted collection (using a binary search).',
        signature:
          'apoc.coll.containsAllSorted(coll1 :: LIST<ANY>, coll2 :: LIST<ANY>) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The sorted list to search for the given values.',
            name: 'coll1',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description:
              'The list of values to check for existence of in the given list.',
            name: 'coll2',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.containsDuplicates': {
        name: 'apoc.coll.containsDuplicates',
        category: '',
        description:
          'Returns true if a collection contains duplicate elements.',
        signature: 'apoc.coll.containsDuplicates(coll :: LIST<ANY>) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to check for duplicates in.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.containsSorted': {
        name: 'apoc.coll.containsSorted',
        category: '',
        description:
          'Returns whether or not the given value exists in an already sorted collection (using a binary search).',
        signature:
          'apoc.coll.containsSorted(coll :: LIST<ANY>, value :: ANY) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The sorted list to search for the given value.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The value to check for the existence of in the list.',
            name: 'value',
            type: 'ANY',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.different': {
        name: 'apoc.coll.different',
        category: '',
        description:
          'Returns true if all the values in the given `LIST<ANY>` are unique.',
        signature: 'apoc.coll.different(coll :: LIST<ANY>) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to check for duplicates.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.disjunction': {
        name: 'apoc.coll.disjunction',
        category: '',
        description: 'Returns the disjunct set from two `LIST<ANY>` values.',
        signature:
          'apoc.coll.disjunction(list1 :: LIST<ANY>, list2 :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list of values to compare against `list2` and form a disjunction from.',
            name: 'list1',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description:
              'The list of values to compare against `list1` and form a disjunction from.',
            name: 'list2',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.dropDuplicateNeighbors': {
        name: 'apoc.coll.dropDuplicateNeighbors',
        category: '',
        description:
          'Removes duplicate consecutive objects in the `LIST<ANY>`.',
        signature:
          'apoc.coll.dropDuplicateNeighbors(list :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list to remove duplicate consecutive values from.',
            name: 'list',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.duplicates': {
        name: 'apoc.coll.duplicates',
        category: '',
        description:
          'Returns a `LIST<ANY>` of duplicate items in the collection.',
        signature: 'apoc.coll.duplicates(coll :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to collect duplicate values from.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.duplicatesWithCount': {
        name: 'apoc.coll.duplicatesWithCount',
        category: '',
        description:
          'Returns a `LIST<ANY>` of duplicate items in the collection and their count, keyed by `item` and `count`.',
        signature:
          'apoc.coll.duplicatesWithCount(coll :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list to collect duplicate values and their count from.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.fill': {
        name: 'apoc.coll.fill',
        category: '',
        description: 'Returns a `LIST<ANY>` with the given count of items.',
        signature:
          'apoc.coll.fill(item :: STRING, count :: INTEGER) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The item to be present in the returned list.',
            name: 'item',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The number of times the given item should appear in the returned list.',
            name: 'count',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.flatten': {
        name: 'apoc.coll.flatten',
        category: '',
        description:
          'Flattens the given `LIST<ANY>` (to flatten nested `LIST<ANY>` values, set recursive to true).',
        signature:
          'apoc.coll.flatten(coll :: LIST<ANY>, recursive = false :: BOOLEAN) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to flatten.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=false, type=BOOLEAN}',
            description: 'Whether nested list items should also be flattened.',
            name: 'recursive',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.frequencies': {
        name: 'apoc.coll.frequencies',
        category: '',
        description:
          'Returns a `LIST<ANY>` of frequencies of the items in the collection, keyed by `item` and `count`.',
        signature: 'apoc.coll.frequencies(coll :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to return items and their count from.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.frequenciesAsMap': {
        name: 'apoc.coll.frequenciesAsMap',
        category: '',
        description:
          'Returns a `MAP` of frequencies of the items in the collection, keyed by `item` and `count`.',
        signature: 'apoc.coll.frequenciesAsMap(coll :: LIST<ANY>) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to return items and their count from.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.indexOf': {
        name: 'apoc.coll.indexOf',
        category: '',
        description:
          'Returns the index for the first occurrence of the specified value in the `LIST<ANY>`.',
        signature:
          'apoc.coll.indexOf(coll :: LIST<ANY>, value :: ANY) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to find the given value in.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description:
              'The value to find the first occurrence of in the given list.',
            name: 'value',
            type: 'ANY',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.insert': {
        name: 'apoc.coll.insert',
        category: '',
        description:
          'Inserts a value into the specified index in the `LIST<ANY>`.',
        signature:
          'apoc.coll.insert(coll :: LIST<ANY>, index :: INTEGER, value :: ANY) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to insert a value into.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The position in the list to insert the given value.',
            name: 'index',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The value to be inserted.',
            name: 'value',
            type: 'ANY',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.insertAll': {
        name: 'apoc.coll.insertAll',
        category: '',
        description:
          'Inserts all of the values into the `LIST<ANY>`, starting at the specified index.',
        signature:
          'apoc.coll.insertAll(coll :: LIST<ANY>, index :: INTEGER, values :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to insert the values into.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description:
              'The position in the list to start inserting the given values.',
            name: 'index',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The values to be inserted.',
            name: 'values',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.intersection': {
        name: 'apoc.coll.intersection',
        category: '',
        description:
          'Returns the distinct intersection of two `LIST<ANY>` values.',
        signature:
          'apoc.coll.intersection(list1 :: LIST<ANY>, list2 :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list of values to compare against `list2` and form an intersection from.',
            name: 'list1',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description:
              'The list of values to compare against `list1` and form an intersection from.',
            name: 'list2',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.isEqualCollection': {
        name: 'apoc.coll.isEqualCollection',
        category: '',
        description:
          'Returns true if the two collections contain the same elements with the same cardinality in any order.',
        signature:
          'apoc.coll.isEqualCollection(coll :: LIST<ANY>, values :: LIST<ANY>) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list of values to compare against `list2` and check for equality.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description:
              'The list of values to compare against `list1` and check for equality.',
            name: 'values',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.max': {
        name: 'apoc.coll.max',
        category: '',
        description:
          'Returns the maximum of all values in the given `LIST<ANY>`.',
        signature: 'apoc.coll.max(values :: LIST<ANY>) :: ANY',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to find the maximum in.',
            name: 'values',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'ANY',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.min': {
        name: 'apoc.coll.min',
        category: '',
        description:
          'Returns the minimum of all values in the given `LIST<ANY>`.',
        signature: 'apoc.coll.min(values :: LIST<ANY>) :: ANY',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to find the minimum in.',
            name: 'values',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'ANY',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.occurrences': {
        name: 'apoc.coll.occurrences',
        category: '',
        description: 'Returns the count of the given item in the collection.',
        signature:
          'apoc.coll.occurrences(coll :: LIST<ANY>, item :: ANY) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list to collect the count of the given value from.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The value to count in the given list.',
            name: 'item',
            type: 'ANY',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.pairWithOffset': {
        name: 'apoc.coll.pairWithOffset',
        category: '',
        description: 'Returns a `LIST<ANY>` of pairs defined by the offset.',
        signature:
          'apoc.coll.pairWithOffset(coll :: LIST<ANY>, offset :: INTEGER) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to create pairs from.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description:
              'The offset to make each pair with from the given list.',
            name: 'offset',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.pairs': {
        name: 'apoc.coll.pairs',
        category: '',
        description:
          'Returns a `LIST<ANY>` of adjacent elements in the `LIST<ANY>` ([1,2],[2,3],[3,null]).',
        signature: 'apoc.coll.pairs(list :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to create pairs from.',
            name: 'list',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.pairsMin': {
        name: 'apoc.coll.pairsMin',
        category: '',
        description:
          'Returns `LIST<ANY>` values of adjacent elements in the `LIST<ANY>` ([1,2],[2,3]), skipping the final element.',
        signature: 'apoc.coll.pairsMin(list :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to create pairs from.',
            name: 'list',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.partition': {
        name: 'apoc.coll.partition',
        category: '',
        description:
          'Partitions the original `LIST<ANY>` into a new `LIST<ANY>` of the given batch size.\nThe final `LIST<ANY>` may be smaller than the given batch size.',
        signature:
          'apoc.coll.partition(coll :: LIST<ANY>, batchSize :: INTEGER) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to partition into smaller sublists.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The max size of each partitioned sublist.',
            name: 'batchSize',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.randomItem': {
        name: 'apoc.coll.randomItem',
        category: '',
        description:
          'Returns a random item from the `LIST<ANY>`, or null on `LIST<NOTHING>` or `LIST<NULL>`.',
        signature: 'apoc.coll.randomItem(coll :: LIST<ANY>) :: ANY',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to return a random item from.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'ANY',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.randomItems': {
        name: 'apoc.coll.randomItems',
        category: '',
        description:
          'Returns a `LIST<ANY>` of `itemCount` random items from the original `LIST<ANY>` (optionally allowing elements in the original `LIST<ANY>` to be selected more than once).',
        signature:
          'apoc.coll.randomItems(coll :: LIST<ANY>, itemCount :: INTEGER, allowRepick = false :: BOOLEAN) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to return random items from.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The number of random items to return from the list.',
            name: 'itemCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=false, type=BOOLEAN}',
            description:
              'Whether elements from the original list can be selected more than once.',
            name: 'allowRepick',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.remove': {
        name: 'apoc.coll.remove',
        category: '',
        description:
          'Removes a range of values from the `LIST<ANY>`, beginning at position index for the given length of values.',
        signature:
          'apoc.coll.remove(coll :: LIST<ANY>, index :: INTEGER, length = 1 :: INTEGER) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to remove values from.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description:
              'The starting index in the list to begin removing values from.',
            name: 'index',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=1, type=INTEGER}',
            description: 'The number of values to remove.',
            name: 'length',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.removeAll': {
        name: 'apoc.coll.removeAll',
        category: '',
        description:
          'Returns the first `LIST<ANY>` with all elements also present in the second `LIST<ANY>` removed.',
        signature:
          'apoc.coll.removeAll(list1 :: LIST<ANY>, list2 :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to remove values from.',
            name: 'list1',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The values to remove from the given list.',
            name: 'list2',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.runningTotal': {
        name: 'apoc.coll.runningTotal',
        category: '',
        description: 'Returns an accumulative `LIST<INTEGER | FLOAT>`.',
        signature:
          'apoc.coll.runningTotal(list :: LIST<INTEGER | FLOAT>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to return a running total from.',
            name: 'list',
            type: 'LIST<INTEGER | FLOAT>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.set': {
        name: 'apoc.coll.set',
        category: '',
        description: 'Sets the element at the given index to the new value.',
        signature:
          'apoc.coll.set(coll :: LIST<ANY>, index :: INTEGER, value :: ANY) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to be updated.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The position of the value in the list to be updated.',
            name: 'index',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The new value to be set.',
            name: 'value',
            type: 'ANY',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.shuffle': {
        name: 'apoc.coll.shuffle',
        category: '',
        description: 'Returns the `LIST<ANY>` shuffled.',
        signature: 'apoc.coll.shuffle(coll :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to be shuffled.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.sort': {
        name: 'apoc.coll.sort',
        category: '',
        description: 'Sorts the given `LIST<ANY>` into ascending order.',
        signature: 'apoc.coll.sort(coll :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to be sorted.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.sortMaps': {
        name: 'apoc.coll.sortMaps',
        category: '',
        description:
          'Sorts the given `LIST<MAP<STRING, ANY>>` into descending order, based on the `MAP` property indicated by `prop`.',
        signature:
          'apoc.coll.sortMaps(list :: LIST<MAP>, prop :: STRING) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list of maps to be sorted.',
            name: 'list',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description:
              'The property key to be used to sort the list of maps by.',
            name: 'prop',
            type: 'STRING',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.sortMulti': {
        name: 'apoc.coll.sortMulti',
        category: '',
        description:
          'Sorts the given `LIST<MAP<STRING, ANY>>` by the given fields.\nTo indicate that a field should be sorted according to ascending values, prefix it with a caret (^).\nIt is also possible to add limits to the `LIST<MAP<STRING, ANY>>` and to skip values.',
        signature:
          'apoc.coll.sortMulti(coll :: LIST<MAP>, orderFields = [] :: LIST<STRING>, limit = -1 :: INTEGER, skip = 0 :: INTEGER) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list of maps to be sorted.',
            name: 'coll',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[], type=LIST<STRING>}',
            description:
              'The property keys to be used to sort the list of maps by.',
            name: 'orderFields',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=-1, type=INTEGER}',
            description: 'The amount of results to return.',
            name: 'limit',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=0, type=INTEGER}',
            description: 'The amount to skip by.',
            name: 'skip',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.sortNodes': {
        name: 'apoc.coll.sortNodes',
        category: '',
        description:
          'Sorts the given `LIST<NODE>` by the property of the nodes into descending order.',
        signature:
          'apoc.coll.sortNodes(coll :: LIST<NODE>, prop :: STRING) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list of nodes to be sorted.',
            name: 'coll',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            description:
              'The property key on the node to be used to sort the list by.',
            name: 'prop',
            type: 'STRING',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.sortText': {
        name: 'apoc.coll.sortText',
        category: '',
        description: 'Sorts the given `LIST<STRING>` into ascending order.',
        signature:
          'apoc.coll.sortText(coll :: LIST<STRING>, conf = {} :: MAP) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list of strings to be sorted.',
            name: 'coll',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              'A map containing a single key `locale` to indicate which language to use when sorting the strings.',
            name: 'conf',
            type: 'MAP',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.stdev': {
        name: 'apoc.coll.stdev',
        category: '',
        description:
          'Returns sample or population standard deviation with `isBiasCorrected` true or false respectively.',
        signature:
          'apoc.coll.stdev(list :: LIST<INTEGER | FLOAT>, isBiasCorrected = true :: BOOLEAN) :: INTEGER | FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A list to collect the standard deviation from.',
            name: 'list',
            type: 'LIST<INTEGER | FLOAT>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=true, type=BOOLEAN}',
            description:
              'Will perform a sample standard deviation if `isBiasCorrected`, otherwise a population standard deviation is performed.',
            name: 'isBiasCorrected',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: 'INTEGER | FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.subtract': {
        name: 'apoc.coll.subtract',
        category: '',
        description:
          'Returns the first `LIST<ANY>` as a set with all the elements of the second `LIST<ANY>` removed.',
        signature:
          'apoc.coll.subtract(list1 :: LIST<ANY>, list2 :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to remove values from.',
            name: 'list1',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The list of values to be removed from `list1`.',
            name: 'list2',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.sum': {
        name: 'apoc.coll.sum',
        category: '',
        description:
          'Returns the sum of all the `INTEGER | FLOAT` in the `LIST<INTEGER | FLOAT>`.',
        signature: 'apoc.coll.sum(coll :: LIST<INTEGER | FLOAT>) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list of numbers to create a sum from.',
            name: 'coll',
            type: 'LIST<INTEGER | FLOAT>',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.sumLongs': {
        name: 'apoc.coll.sumLongs',
        category: '',
        description:
          'Returns the sum of all the `INTEGER | FLOAT` in the `LIST<INTEGER | FLOAT>`.',
        signature:
          'apoc.coll.sumLongs(coll :: LIST<INTEGER | FLOAT>) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list of numbers to create a sum from after each is cast to a java Long value.',
            name: 'coll',
            type: 'LIST<INTEGER | FLOAT>',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.toSet': {
        name: 'apoc.coll.toSet',
        category: '',
        description: 'Returns a unique `LIST<ANY>` from the given `LIST<ANY>`.',
        signature: 'apoc.coll.toSet(coll :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list of values to remove all duplicates from.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.union': {
        name: 'apoc.coll.union',
        category: '',
        description:
          'Returns the distinct union of the two given `LIST<ANY>` values.',
        signature:
          'apoc.coll.union(list1 :: LIST<ANY>, list2 :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list of values to compare against `list2` and form a distinct union from.',
            name: 'list1',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description:
              'The list of values to compare against `list1` and form a distinct union from.',
            name: 'list2',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.unionAll': {
        name: 'apoc.coll.unionAll',
        category: '',
        description:
          'Returns the full union of the two given `LIST<ANY>` values (duplicates included).',
        signature:
          'apoc.coll.unionAll(list1 :: LIST<ANY>, list2 :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list of values to compare against `list2` and form a union from.',
            name: 'list1',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description:
              'The list of values to compare against `list1` and form a union from.',
            name: 'list2',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.zip': {
        name: 'apoc.coll.zip',
        category: '',
        description:
          'Returns the two given `LIST<ANY>` values zipped together as a `LIST<LIST<ANY>>`.',
        signature:
          'apoc.coll.zip(list1 :: LIST<ANY>, list2 :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to zip together with `list2`.',
            name: 'list1',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The list to zip together with `list1`.',
            name: 'list2',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.convert.fromJsonList': {
        name: 'apoc.convert.fromJsonList',
        category: '',
        description:
          'Converts the given JSON list into a Cypher `LIST<STRING>`.',
        signature:
          'apoc.convert.fromJsonList(list :: STRING, path =  :: STRING, pathOptions = null :: LIST<STRING>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A JSON stringified list.',
            name: 'list',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              'A JSON path expression used to extract a certain part from the list.',
            name: 'path',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=LIST<STRING>}',
            description:
              "JSON path options: ('ALWAYS_RETURN_LIST', 'AS_PATH_LIST', 'DEFAULT_PATH_LEAF_TO_NULL', 'REQUIRE_PROPERTIES', 'SUPPRESS_EXCEPTIONS')",
            name: 'pathOptions',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.convert.fromJsonMap': {
        name: 'apoc.convert.fromJsonMap',
        category: '',
        description: 'Converts the given JSON map into a Cypher `MAP`.',
        signature:
          'apoc.convert.fromJsonMap(map :: STRING, path =  :: STRING, pathOptions = null :: LIST<STRING>) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A JSON stringified map.',
            name: 'map',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              'A JSON path expression used to extract a certain part from the map.',
            name: 'path',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=LIST<STRING>}',
            description:
              "JSON path options: ('ALWAYS_RETURN_LIST', 'AS_PATH_LIST', 'DEFAULT_PATH_LEAF_TO_NULL', 'REQUIRE_PROPERTIES', 'SUPPRESS_EXCEPTIONS')",
            name: 'pathOptions',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.convert.getJsonProperty': {
        name: 'apoc.convert.getJsonProperty',
        category: '',
        description:
          'Converts a serialized JSON object from the property of the given `NODE` into the equivalent Cypher structure (e.g. `MAP`, `LIST<ANY>`).',
        signature:
          'apoc.convert.getJsonProperty(node :: NODE, key :: STRING, path =  :: STRING, pathOptions = null :: LIST<STRING>) :: ANY',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The node containing a JSON string property.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The property key to convert.',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              'A JSON path expression used to extract a certain part from the node property string.',
            name: 'path',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=LIST<STRING>}',
            description:
              "JSON path options: ('ALWAYS_RETURN_LIST', 'AS_PATH_LIST', 'DEFAULT_PATH_LEAF_TO_NULL', 'REQUIRE_PROPERTIES', 'SUPPRESS_EXCEPTIONS')",
            name: 'pathOptions',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: 'ANY',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.convert.getJsonPropertyMap': {
        name: 'apoc.convert.getJsonPropertyMap',
        category: '',
        description:
          'Converts a serialized JSON object from the property of the given `NODE` into a Cypher `MAP`.',
        signature:
          'apoc.convert.getJsonPropertyMap(node :: NODE, key :: STRING, path =  :: STRING, pathOptions = null :: LIST<STRING>) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The node containing a JSON stringified map.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The property key to convert.',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              'A JSON path expression used to extract a certain part from the node property string.',
            name: 'path',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=LIST<STRING>}',
            description:
              "JSON path options: ('ALWAYS_RETURN_LIST', 'AS_PATH_LIST', 'DEFAULT_PATH_LEAF_TO_NULL', 'REQUIRE_PROPERTIES', 'SUPPRESS_EXCEPTIONS')",
            name: 'pathOptions',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.convert.toJson': {
        name: 'apoc.convert.toJson',
        category: '',
        description: 'Serializes the given JSON value.',
        signature: 'apoc.convert.toJson(value :: ANY) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The value to serialize.',
            name: 'value',
            type: 'ANY',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.convert.toList': {
        name: 'apoc.convert.toList',
        category: '',
        description: 'Converts the given value into a `LIST<ANY>`.',
        signature: 'apoc.convert.toList(value :: ANY) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The value to convert into a list.',
            name: 'value',
            type: 'ANY',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.convert.toMap': {
        name: 'apoc.convert.toMap',
        category: '',
        description: 'Converts the given value into a `MAP`.',
        signature: 'apoc.convert.toMap(map :: ANY) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The value to convert into a map.',
            name: 'map',
            type: 'ANY',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.convert.toNode': {
        name: 'apoc.convert.toNode',
        category: '',
        description: 'Converts the given value into a `NODE`.',
        signature: 'apoc.convert.toNode(node :: ANY) :: NODE',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The value to convert into a node.',
            name: 'node',
            type: 'ANY',
          },
        ],
        returnDescription: 'NODE',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.convert.toNodeList': {
        name: 'apoc.convert.toNodeList',
        category: '',
        description: 'Converts the given value into a `LIST<NODE>`.',
        signature: 'apoc.convert.toNodeList(list :: ANY) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The value to covert into a node list.',
            name: 'list',
            type: 'ANY',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.convert.toRelationship': {
        name: 'apoc.convert.toRelationship',
        category: '',
        description: 'Converts the given value into a `RELATIONSHIP`.',
        signature: 'apoc.convert.toRelationship(rel :: ANY) :: RELATIONSHIP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The value to convert into a relationship.',
            name: 'rel',
            type: 'ANY',
          },
        ],
        returnDescription: 'RELATIONSHIP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.convert.toRelationshipList': {
        name: 'apoc.convert.toRelationshipList',
        category: '',
        description: 'Converts the given value into a `LIST<RELATIONSHIP>`.',
        signature:
          'apoc.convert.toRelationshipList(relList :: ANY) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The value to convert into a relationship list.',
            name: 'relList',
            type: 'ANY',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.convert.toSet': {
        name: 'apoc.convert.toSet',
        category: '',
        description:
          'Converts the given value into a set represented in Cypher as a `LIST<ANY>`.',
        signature: 'apoc.convert.toSet(list :: ANY) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to convert into a set.',
            name: 'list',
            type: 'ANY',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.convert.toSortedJsonMap': {
        name: 'apoc.convert.toSortedJsonMap',
        category: '',
        description:
          'Converts a serialized JSON object from the property of a given `NODE` into a Cypher `MAP`.',
        signature:
          'apoc.convert.toSortedJsonMap(value :: ANY, ignoreCase = true :: BOOLEAN) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The value to convert into a stringified JSON map.',
            name: 'value',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=true, type=BOOLEAN}',
            description:
              'Whether or not to ignore the case of the keys when sorting.',
            name: 'ignoreCase',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.create.uuid': {
        name: 'apoc.create.uuid',
        category: '',
        description: 'Returns a UUID.',
        signature: 'apoc.create.uuid() :: STRING',
        isBuiltIn: false,
        argumentDescription: [],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy: 'Neo4j randomUUID() function',
      },
      'apoc.create.uuidBase64': {
        name: 'apoc.create.uuidBase64',
        category: '',
        description: 'Returns a UUID encoded with base64.',
        signature: 'apoc.create.uuidBase64() :: STRING',
        isBuiltIn: false,
        argumentDescription: [],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.create.uuidBase64ToHex': {
        name: 'apoc.create.uuidBase64ToHex',
        category: '',
        description:
          'Takes the given base64 encoded UUID and returns it as a hexadecimal `STRING`.',
        signature:
          'apoc.create.uuidBase64ToHex(base64Uuid :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string representing a UUID encoded with Base64.',
            name: 'base64Uuid',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.create.uuidHexToBase64': {
        name: 'apoc.create.uuidHexToBase64',
        category: '',
        description:
          'Takes the given UUID represented as a hexadecimal `STRING` and returns it encoded with base64.',
        signature: 'apoc.create.uuidHexToBase64(uuid :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The UUID represented as a hexadecimal string.',
            name: 'uuid',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.create.vNode': {
        name: 'apoc.create.vNode',
        category: '',
        description: 'Returns a virtual `NODE`.',
        signature:
          'apoc.create.vNode(labels :: LIST<STRING>, props = {} :: MAP) :: NODE',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list of labels to assign to the virtual node.',
            name: 'labels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'The map of properties to assign to the virtual node.',
            name: 'props',
            type: 'MAP',
          },
        ],
        returnDescription: 'NODE',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.create.vRelationship': {
        name: 'apoc.create.vRelationship',
        category: '',
        description: 'Returns a virtual `RELATIONSHIP`.',
        signature:
          'apoc.create.vRelationship(from :: NODE, relType :: STRING, props :: MAP, to :: NODE) :: RELATIONSHIP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The start node to assign to the virtual relationship.',
            name: 'from',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The type to assign to the virtual relationship.',
            name: 'relType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The map of properties to assign to the virtual relationship.',
            name: 'props',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The end node to assign to the virtual relationship.',
            name: 'to',
            type: 'NODE',
          },
        ],
        returnDescription: 'RELATIONSHIP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.create.virtual.fromNode': {
        name: 'apoc.create.virtual.fromNode',
        category: '',
        description:
          'Returns a virtual `NODE` from the given existing `NODE`. The virtual `NODE` only contains the requested properties.',
        signature:
          'apoc.create.virtual.fromNode(node :: NODE, propertyNames :: LIST<STRING>) :: NODE',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The node to generate a virtual node from.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The properties to copy to the virtual node.',
            name: 'propertyNames',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: 'NODE',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.cypher.runFirstColumnMany': {
        name: 'apoc.cypher.runFirstColumnMany',
        category: '',
        description:
          'Runs the given statement with the given parameters and returns the first column collected into a `LIST<ANY>`.',
        signature:
          'apoc.cypher.runFirstColumnMany(statement :: STRING, params :: MAP) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The Cypher query to execute.',
            name: 'statement',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The parameters needed for input to the given Cypher query.',
            name: 'params',
            type: 'MAP',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.cypher.runFirstColumnSingle': {
        name: 'apoc.cypher.runFirstColumnSingle',
        category: '',
        description:
          'Runs the given statement with the given parameters and returns the first element of the first column.',
        signature:
          'apoc.cypher.runFirstColumnSingle(statement :: STRING, params :: MAP) :: ANY',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The Cypher query to execute.',
            name: 'statement',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The parameters needed for input to the given Cypher query.',
            name: 'params',
            type: 'MAP',
          },
        ],
        returnDescription: 'ANY',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.data.url': {
        name: 'apoc.data.url',
        category: '',
        description: 'Turns a URL into a `MAP`.',
        signature: 'apoc.data.url(url :: STRING) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The URL to extract metadata from.',
            name: 'url',
            type: 'STRING',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.date.add': {
        name: 'apoc.date.add',
        category: '',
        description: 'Adds a unit of specified time to the given timestamp.',
        signature:
          'apoc.date.add(time :: INTEGER, unit :: STRING, addValue :: INTEGER, addUnit :: STRING) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The timestamp to add time to.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The unit the given timestamp is in.',
            name: 'unit',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The amount of time to add to the given timestamp.',
            name: 'addValue',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The unit the added value is in.',
            name: 'addUnit',
            type: 'STRING',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.date.convert': {
        name: 'apoc.date.convert',
        category: '',
        description:
          'Converts the given timestamp from one time unit into a timestamp of a different time unit.',
        signature:
          'apoc.date.convert(time :: INTEGER, unit :: STRING, toUnit :: STRING) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The timestamp to be converted.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The unit the given timestamp is in.',
            name: 'unit',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The unit to convert the given timestamp to.',
            name: 'toUnit',
            type: 'STRING',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.date.convertFormat': {
        name: 'apoc.date.convertFormat',
        category: '',
        description:
          'Converts a `STRING` of one type of date format into a `STRING` of another type of date format.',
        signature:
          'apoc.date.convertFormat(temporal :: STRING, currentFormat :: STRING, convertTo = yyyy-MM-dd :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A string representation of a temporal value.',
            name: 'temporal',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the given temporal is formatted as.',
            name: 'currentFormat',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=yyyy-MM-dd, type=STRING}',
            description: 'The format to convert the given temporal value to.',
            name: 'convertTo',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.date.currentTimestamp': {
        name: 'apoc.date.currentTimestamp',
        category: '',
        description:
          'Returns the current Unix epoch timestamp in milliseconds.',
        signature: 'apoc.date.currentTimestamp() :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.date.field': {
        name: 'apoc.date.field',
        category: '',
        description: 'Returns the value of one field from the given date time.',
        signature:
          'apoc.date.field(time :: INTEGER, unit = d :: STRING, timezone = UTC :: STRING) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The timestamp in ms since epoch to return a field from.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=d, type=STRING}',
            description: 'The unit of the field to return the value of.',
            name: 'unit',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=UTC, type=STRING}',
            description: 'The timezone the given timestamp is in.',
            name: 'timezone',
            type: 'STRING',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.date.fields': {
        name: 'apoc.date.fields',
        category: '',
        description:
          'Splits the given date into fields returning a `MAP` containing the values of each field.',
        signature:
          'apoc.date.fields(date :: STRING, pattern = yyyy-MM-dd HH:mm:ss :: STRING) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A string representation of a temporal value.',
            name: 'date',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=yyyy-MM-dd HH:mm:ss, type=STRING}',
            description: 'The format the given temporal is formatted as.',
            name: 'pattern',
            type: 'STRING',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.date.format': {
        name: 'apoc.date.format',
        category: '',
        description:
          'Returns a `STRING` representation of the time value.\nThe time unit (default: ms), date format (default: ISO), and time zone (default: current time zone) can all be changed.',
        signature:
          'apoc.date.format(time :: INTEGER, unit = ms :: STRING, format = yyyy-MM-dd HH:mm:ss :: STRING, timezone =  :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The timestamp since epoch to format.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=ms, type=STRING}',
            description: 'The unit of the given timestamp.',
            name: 'unit',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=yyyy-MM-dd HH:mm:ss, type=STRING}',
            description: 'The format to convert the given temporal value to.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'The timezone the given timestamp is in.',
            name: 'timezone',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.date.fromISO8601': {
        name: 'apoc.date.fromISO8601',
        category: '',
        description:
          'Converts the given date `STRING` (ISO8601) to an `INTEGER` representing the time value in milliseconds.',
        signature: 'apoc.date.fromISO8601(time :: STRING) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The datetime to convert to ms.',
            name: 'time',
            type: 'STRING',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.date.parse': {
        name: 'apoc.date.parse',
        category: '',
        description:
          'Parses the given date `STRING` from a specified format into the specified time unit.',
        signature:
          'apoc.date.parse(time :: STRING, unit = ms :: STRING, format = yyyy-MM-dd HH:mm:ss :: STRING, timezone =  :: STRING) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The datetime to convert.',
            name: 'time',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=ms, type=STRING}',
            description: 'The conversion unit.',
            name: 'unit',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=yyyy-MM-dd HH:mm:ss, type=STRING}',
            description: 'The format the given datetime is in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'The timezone the given datetime is in.',
            name: 'timezone',
            type: 'STRING',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.date.systemTimezone': {
        name: 'apoc.date.systemTimezone',
        category: '',
        description:
          'Returns the display name of the system time zone (e.g. Europe/London).',
        signature: 'apoc.date.systemTimezone() :: STRING',
        isBuiltIn: false,
        argumentDescription: [],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.date.toISO8601': {
        name: 'apoc.date.toISO8601',
        category: '',
        description:
          'Returns a `STRING` representation of a specified time value in the ISO8601 format.',
        signature:
          'apoc.date.toISO8601(time :: INTEGER, unit = ms :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The timestamp since epoch to format.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=ms, type=STRING}',
            description: 'The unit of the given timestamp.',
            name: 'unit',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.date.toYears': {
        name: 'apoc.date.toYears',
        category: '',
        description:
          'Converts the given timestamp or the given date into a `FLOAT` representing years.',
        signature:
          'apoc.date.toYears(value :: ANY, format = yyyy-MM-dd HH:mm:ss :: STRING) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The timestamp or datetime string to extract the years from.',
            name: 'value',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=yyyy-MM-dd HH:mm:ss, type=STRING}',
            description: 'The format the given datetime string is in.',
            name: 'format',
            type: 'STRING',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.diff.nodes': {
        name: 'apoc.diff.nodes',
        category: '',
        description:
          'Returns a `MAP` detailing the differences between the two given `NODE` values.',
        signature:
          'apoc.diff.nodes(leftNode :: NODE, rightNode :: NODE) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The first node to compare against the second node.',
            name: 'leftNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The second node to compare against the first node.',
            name: 'rightNode',
            type: 'NODE',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.hashing.fingerprint': {
        name: 'apoc.hashing.fingerprint',
        category: '',
        description:
          'Calculates a MD5 checksum over a `NODE` or `RELATIONSHIP` (identical entities share the same checksum).\nUnsuitable for cryptographic use-cases.',
        signature:
          'apoc.hashing.fingerprint(object :: ANY, excludedPropertyKeys = [] :: LIST<STRING>) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A node or relationship to hash.',
            name: 'object',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[], type=LIST<STRING>}',
            description: 'Property keys to exclude from the hashing.',
            name: 'excludedPropertyKeys',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.hashing.fingerprintGraph': {
        name: 'apoc.hashing.fingerprintGraph',
        category: '',
        description:
          'Calculates a MD5 checksum over the full graph.\nThis function uses in-memory data structures.\nUnsuitable for cryptographic use-cases.',
        signature:
          'apoc.hashing.fingerprintGraph(propertyExcludes = [] :: LIST<STRING>) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[], type=LIST<STRING>}',
            description: 'Property keys to exclude from the hashing.',
            name: 'propertyExcludes',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.hashing.fingerprinting': {
        name: 'apoc.hashing.fingerprinting',
        category: '',
        description:
          'Calculates a MD5 checksum over a `NODE` or `RELATIONSHIP` (identical entities share the same checksum).\nUnlike `apoc.hashing.fingerprint()`, this function supports a number of config parameters.\nUnsuitable for cryptographic use-cases.',
        signature:
          'apoc.hashing.fingerprinting(object :: ANY, config = {} :: MAP) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A node or relationship to hash.',
            name: 'object',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    digestAlgorithm = "MD5" :: STRING,\n    strategy = "LAZY" :: STRING,\n    nodeAllowMap = [] :: MAP<STRING, LIST<STRING>>,\n    relAllowMap = [] :: MAP<STRING, LIST<STRING>>,\n    relDisallowMap = [] :: MAP<STRING, LIST<STRING>>,\n    mapAllowList = [] :: LIST<STRING>,\n    mapDisallowList = [] :: LIST<STRING>,\n    allNodesAllowList = [] :: LIST<STRING>,\n    allNodesDisallowList = [] :: LIST<STRING>,\n    allRelsAllowList = [] :: LIST<STRING>,\n    allRelsDisallowList = [] :: LIST<STRING>\n}',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.json.path': {
        name: 'apoc.json.path',
        category: '',
        description: 'Returns the given JSON path.',
        signature:
          'apoc.json.path(json :: STRING, path = $ :: STRING, pathOptions = null :: LIST<STRING>) :: ANY',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A JSON string.',
            name: 'json',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=$, type=STRING}',
            description: 'The path to extract from the JSON string.',
            name: 'path',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=LIST<STRING>}',
            description:
              'A list of JSON path option enum values: ALWAYS_RETURN_LIST, AS_PATH_LIST, DEFAULT_PATH_LEAF_TO_NULL, REQUIRE_PROPERTIES, SUPPRESS_EXCEPTIONS.',
            name: 'pathOptions',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: 'ANY',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.label.exists': {
        name: 'apoc.label.exists',
        category: '',
        description:
          'Returns true or false depending on whether or not the given label exists.',
        signature: 'apoc.label.exists(node :: ANY, label :: STRING) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A node to check for the given label on.',
            name: 'node',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The given label to check for existence.',
            name: 'label',
            type: 'STRING',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.clean': {
        name: 'apoc.map.clean',
        category: '',
        description:
          'Filters the keys and values contained in the given `LIST<ANY>` values.',
        signature:
          'apoc.map.clean(map :: MAP, keys :: LIST<STRING>, values :: LIST<ANY>) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The map to clean.',
            name: 'map',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The list of property keys to be removed.',
            name: 'keys',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The list of values to be removed.',
            name: 'values',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.flatten': {
        name: 'apoc.map.flatten',
        category: '',
        description:
          'Flattens nested items in the given `MAP`.\nThis function is the reverse of the `apoc.map.unflatten` function.',
        signature:
          'apoc.map.flatten(map :: MAP, delimiter = . :: STRING) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A nested map to flatten.',
            name: 'map',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=., type=STRING}',
            description:
              'The delimiter used to separate the levels of the flattened map.',
            name: 'delimiter',
            type: 'STRING',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.fromLists': {
        name: 'apoc.map.fromLists',
        category: '',
        description:
          'Creates a `MAP` from the keys and values in the given `LIST<ANY>` values.',
        signature:
          'apoc.map.fromLists(keys :: LIST<STRING>, values :: LIST<ANY>) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A list of keys to create a map from.',
            name: 'keys',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description:
              'A list of values associated with the keys to create a map from.',
            name: 'values',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.fromNodes': {
        name: 'apoc.map.fromNodes',
        category: '',
        description:
          'Returns a `MAP` of the given prop to the node of the given label.',
        signature: 'apoc.map.fromNodes(label :: STRING, prop :: STRING) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The node labels from which the map will be created.',
            name: 'label',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The property name to map the returned nodes by.',
            name: 'prop',
            type: 'STRING',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.fromPairs': {
        name: 'apoc.map.fromPairs',
        category: '',
        description:
          'Creates a `MAP` from the given `LIST<LIST<ANY>>` of key-value pairs.',
        signature: 'apoc.map.fromPairs(pairs :: LIST<LIST<ANY>>) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A list of pairs to create a map from.',
            name: 'pairs',
            type: 'LIST<LIST<ANY>>',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.fromValues': {
        name: 'apoc.map.fromValues',
        category: '',
        description:
          'Creates a `MAP` from the alternating keys and values in the given `LIST<ANY>`.',
        signature: 'apoc.map.fromValues(values :: LIST<ANY>) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A list of keys and values listed pairwise to create a map from.',
            name: 'values',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.get': {
        name: 'apoc.map.get',
        category: '',
        description:
          'Returns a value for the given key.\nIf the given key does not exist, or lacks a default value, this function will throw an exception.',
        signature:
          'apoc.map.get(map :: MAP, key :: STRING, value = null :: ANY, fail = true :: BOOLEAN) :: ANY',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The map to extract a value from.',
            name: 'map',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The key to extract.',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=ANY}',
            description: 'The default value of the given key.',
            name: 'value',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=true, type=BOOLEAN}',
            description:
              'If a key is not present and no default is provided, it will either throw an exception if true, or return a null value',
            name: 'fail',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: 'ANY',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.groupBy': {
        name: 'apoc.map.groupBy',
        category: '',
        description:
          'Creates a `MAP` of the `LIST<ANY>` keyed by the given property, with single values.',
        signature:
          'apoc.map.groupBy(values :: LIST<ANY>, key :: STRING) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A list of map values to be grouped.',
            name: 'values',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The key to group the map values by.',
            name: 'key',
            type: 'STRING',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.groupByMulti': {
        name: 'apoc.map.groupByMulti',
        category: '',
        description:
          'Creates a `MAP` of the `LIST<ANY>` values keyed by the given property, with the `LIST<ANY>` values.',
        signature:
          'apoc.map.groupByMulti(values :: LIST<ANY>, key :: STRING) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A list of map values to be grouped.',
            name: 'values',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The key to group the map values by.',
            name: 'key',
            type: 'STRING',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.merge': {
        name: 'apoc.map.merge',
        category: '',
        description: 'Merges the two given `MAP` values into one `MAP`.',
        signature: 'apoc.map.merge(map1 :: MAP, map2 :: MAP) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The first map to merge with the second map.',
            name: 'map1',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The second map to merge with the first map.',
            name: 'map2',
            type: 'MAP',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.mergeList': {
        name: 'apoc.map.mergeList',
        category: '',
        description:
          'Merges all `MAP` values in the given `LIST<MAP<STRING, ANY>>` into one `MAP`.',
        signature: 'apoc.map.mergeList(maps :: LIST<MAP>) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A list of maps to merge.',
            name: 'maps',
            type: 'LIST<MAP>',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.mget': {
        name: 'apoc.map.mget',
        category: '',
        description:
          'Returns a `LIST<ANY>` for the given keys.\nIf one of the keys does not exist, or lacks a default value, this function will throw an exception.',
        signature:
          'apoc.map.mget(map :: MAP, keys :: LIST<STRING>, values = [] :: LIST<ANY>, fail = true :: BOOLEAN) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The map to extract a list of values from.',
            name: 'map',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The list of keys to extract.',
            name: 'keys',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[], type=LIST<ANY>}',
            description: 'The default values of the given keys.',
            name: 'values',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=true, type=BOOLEAN}',
            description:
              'If a key is not present and no default is provided, it will either throw an exception if true, or return a null value',
            name: 'fail',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.removeKey': {
        name: 'apoc.map.removeKey',
        category: '',
        description:
          'Removes the given key from the `MAP` (recursively if recursive is true).',
        signature:
          'apoc.map.removeKey(map :: MAP, key :: STRING, config = {} :: MAP) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The map to be updated.',
            name: 'map',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The key to remove from the map.',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: '{ recursive = false :: BOOLEAN }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.removeKeys': {
        name: 'apoc.map.removeKeys',
        category: '',
        description:
          'Removes the given keys from the `MAP` (recursively if recursive is true).',
        signature:
          'apoc.map.removeKeys(map :: MAP, keys :: LIST<STRING>, config = {} :: MAP) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The map to be updated.',
            name: 'map',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The keys to remove from the map.',
            name: 'keys',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: '{ recursive = false :: BOOLEAN }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.setEntry': {
        name: 'apoc.map.setEntry',
        category: '',
        description: 'Adds or updates the given entry in the `MAP`.',
        signature:
          'apoc.map.setEntry(map :: MAP, key :: STRING, value :: ANY) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The map to be updated.',
            name: 'map',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The key to add or update the map with.',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The value to set the given key to.',
            name: 'value',
            type: 'ANY',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy: 'apoc.map.setKey',
      },
      'apoc.map.setKey': {
        name: 'apoc.map.setKey',
        category: '',
        description: 'Adds or updates the given entry in the `MAP`.',
        signature:
          'apoc.map.setKey(map :: MAP, key :: STRING, value :: ANY) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The map to be updated.',
            name: 'map',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The key to add or update the map with.',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The value to set the given key to.',
            name: 'value',
            type: 'ANY',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.setLists': {
        name: 'apoc.map.setLists',
        category: '',
        description:
          'Adds or updates the given keys/value pairs provided in `LIST<ANY>` format (e.g. [key1, key2],[value1, value2]) in a `MAP`.',
        signature:
          'apoc.map.setLists(map :: MAP, keys :: LIST<STRING>, values :: LIST<ANY>) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The map to be updated.',
            name: 'map',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'A list of keys to add or update the map with.',
            name: 'keys',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description:
              'A list of values associated to the keys to add or update the map with.',
            name: 'values',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.setPairs': {
        name: 'apoc.map.setPairs',
        category: '',
        description:
          'Adds or updates the given key/value pairs (e.g. [key1,value1],[key2,value2]) in a `MAP`.',
        signature:
          'apoc.map.setPairs(map :: MAP, pairs :: LIST<LIST<ANY>>) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The map to be updated.',
            name: 'map',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'A list of pairs to add or update the map with.',
            name: 'pairs',
            type: 'LIST<LIST<ANY>>',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.setValues': {
        name: 'apoc.map.setValues',
        category: '',
        description:
          'Adds or updates the alternating key/value pairs (e.g. [key1,value1,key2,value2]) in a `MAP`.',
        signature: 'apoc.map.setValues(map :: MAP, pairs :: LIST<ANY>) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The map to be updated.',
            name: 'map',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              'A list of items listed pairwise to add or update the map with.',
            name: 'pairs',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.sortedProperties': {
        name: 'apoc.map.sortedProperties',
        category: '',
        description:
          'Returns a `LIST<ANY>` of key/value pairs.\nThe pairs are sorted by alphabetically by key, with optional case sensitivity.',
        signature:
          'apoc.map.sortedProperties(map :: MAP, ignoreCase = true :: BOOLEAN) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The map to extract the properties from.',
            name: 'map',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=true, type=BOOLEAN}',
            description:
              'Whether or not to take the case into account when sorting.',
            name: 'ignoreCase',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.submap': {
        name: 'apoc.map.submap',
        category: '',
        description:
          'Returns a sub-map for the given keys.\nIf one of the keys does not exist, or lacks a default value, this function will throw an exception.',
        signature:
          'apoc.map.submap(map :: MAP, keys :: LIST<STRING>, values = [] :: LIST<ANY>, fail = true :: BOOLEAN) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The map to extract a submap from.',
            name: 'map',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The list of keys to extract into a submap.',
            name: 'keys',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[], type=LIST<ANY>}',
            description: 'The default values of the given keys.',
            name: 'values',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=true, type=BOOLEAN}',
            description:
              'If a key is not present and no default is provided, it will either throw an exception if true, or return a null value.',
            name: 'fail',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.unflatten': {
        name: 'apoc.map.unflatten',
        category: '',
        description:
          'Unflattens items in the given `MAP` to nested items.\nThis function is the reverse of the `apoc.map.flatten` function.',
        signature:
          'apoc.map.unflatten(map :: MAP, delimiter = . :: STRING) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The map to unflatten.',
            name: 'map',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=., type=STRING}',
            description:
              'The delimiter used to separate the levels of the flattened map.',
            name: 'delimiter',
            type: 'STRING',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.updateTree': {
        name: 'apoc.map.updateTree',
        category: '',
        description:
          'Adds the data `MAP` on each level of the nested tree, where the key-value pairs match.',
        signature:
          'apoc.map.updateTree(tree :: MAP, key :: STRING, data :: LIST<LIST<ANY>>) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The map to be updated.',
            name: 'tree',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The name of the key to match on.',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'A list of pairs, where the first item is the value to match with the given key, and the second is a map to add to the tree.',
            name: 'data',
            type: 'LIST<LIST<ANY>>',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.values': {
        name: 'apoc.map.values',
        category: '',
        description:
          'Returns a `LIST<ANY>` indicated by the given keys (returns a null value if a given key is missing).',
        signature:
          'apoc.map.values(map :: MAP, keys = [] :: LIST<STRING>, addNullsForMissing = false :: BOOLEAN) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A map to extract values from.',
            name: 'map',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[], type=LIST<STRING>}',
            description: 'A list of keys to extract from the given map.',
            name: 'keys',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=false, type=BOOLEAN}',
            description:
              'Whether or not to return missing values as null values.',
            name: 'addNullsForMissing',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.math.cosh': {
        name: 'apoc.math.cosh',
        category: '',
        description: 'Returns the hyperbolic cosine.',
        signature: 'apoc.math.cosh(value :: FLOAT) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An angle in radians.',
            name: 'value',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.math.coth': {
        name: 'apoc.math.coth',
        category: '',
        description: 'Returns the hyperbolic cotangent.',
        signature: 'apoc.math.coth(value :: FLOAT) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An angle in radians.',
            name: 'value',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.math.csch': {
        name: 'apoc.math.csch',
        category: '',
        description: 'Returns the hyperbolic cosecant.',
        signature: 'apoc.math.csch(value :: FLOAT) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An angle in radians.',
            name: 'value',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.math.maxByte': {
        name: 'apoc.math.maxByte',
        category: '',
        description: 'Returns the maximum value of a byte.',
        signature: 'apoc.math.maxByte() :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.math.maxDouble': {
        name: 'apoc.math.maxDouble',
        category: '',
        description:
          'Returns the largest positive finite value of type double.',
        signature: 'apoc.math.maxDouble() :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.math.maxInt': {
        name: 'apoc.math.maxInt',
        category: '',
        description: 'Returns the maximum value of an integer.',
        signature: 'apoc.math.maxInt() :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.math.maxLong': {
        name: 'apoc.math.maxLong',
        category: '',
        description: 'Returns the maximum value of a long.',
        signature: 'apoc.math.maxLong() :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.math.minByte': {
        name: 'apoc.math.minByte',
        category: '',
        description: 'Returns the minimum value of a byte.',
        signature: 'apoc.math.minByte() :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.math.minDouble': {
        name: 'apoc.math.minDouble',
        category: '',
        description:
          'Returns the smallest positive non-zero value of type double.',
        signature: 'apoc.math.minDouble() :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.math.minInt': {
        name: 'apoc.math.minInt',
        category: '',
        description: 'Returns the minimum value of an integer.',
        signature: 'apoc.math.minInt() :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.math.minLong': {
        name: 'apoc.math.minLong',
        category: '',
        description: 'Returns the minimum value of a long.',
        signature: 'apoc.math.minLong() :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.math.sech': {
        name: 'apoc.math.sech',
        category: '',
        description: 'Returns the hyperbolic secant of the given value.',
        signature: 'apoc.math.sech(value :: FLOAT) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An angle in radians.',
            name: 'value',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.math.sigmoid': {
        name: 'apoc.math.sigmoid',
        category: '',
        description: 'Returns the sigmoid of the given value.',
        signature: 'apoc.math.sigmoid(value :: FLOAT) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An angle in radians.',
            name: 'value',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.math.sigmoidPrime': {
        name: 'apoc.math.sigmoidPrime',
        category: '',
        description:
          'Returns the sigmoid prime [ sigmoid(val) * (1 - sigmoid(val)) ] of the given value.',
        signature: 'apoc.math.sigmoidPrime(value :: FLOAT) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An angle in radians.',
            name: 'value',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.math.sinh': {
        name: 'apoc.math.sinh',
        category: '',
        description: 'Returns the hyperbolic sine of the given value.',
        signature: 'apoc.math.sinh(value :: FLOAT) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An angle in radians.',
            name: 'value',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.math.tanh': {
        name: 'apoc.math.tanh',
        category: '',
        description: 'Returns the hyperbolic tangent of the given value.',
        signature: 'apoc.math.tanh(value :: FLOAT) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An angle in radians.',
            name: 'value',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.meta.cypher.isType': {
        name: 'apoc.meta.cypher.isType',
        category: '',
        description: 'Returns true if the given value matches the given type.',
        signature:
          'apoc.meta.cypher.isType(value :: ANY, type :: STRING) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An object to check the type of.',
            name: 'value',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The verification type.',
            name: 'type',
            type: 'STRING',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.meta.cypher.type': {
        name: 'apoc.meta.cypher.type',
        category: '',
        description: 'Returns the type name of the given value.',
        signature: 'apoc.meta.cypher.type(value :: ANY) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An object to get the type of.',
            name: 'value',
            type: 'ANY',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.meta.cypher.types': {
        name: 'apoc.meta.cypher.types',
        category: '',
        description:
          'Returns a `MAP` containing the type names of the given values.',
        signature: 'apoc.meta.cypher.types(props :: ANY) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A relationship, node or map to get the property types from.',
            name: 'props',
            type: 'ANY',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.meta.nodes.count': {
        name: 'apoc.meta.nodes.count',
        category: '',
        description:
          'Returns the sum of the `NODE` values with the given labels in the `LIST<STRING>`.',
        signature:
          'apoc.meta.nodes.count(nodes = [] :: LIST<STRING>, config = {} :: MAP) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[], type=LIST<STRING>}',
            description: 'A list of node labels.',
            name: 'nodes',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              'A relationship, node or map to get the property types from. { includeRels = [] :: LIST<STRING> }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.node.degree': {
        name: 'apoc.node.degree',
        category: '',
        description: 'Returns the total degrees of the given `NODE`.',
        signature:
          'apoc.node.degree(node :: NODE, relTypes =  :: STRING) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node to count the total number of relationships on.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              "The relationship types to restrict the count to. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
            name: 'relTypes',
            type: 'STRING',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.node.degree.in': {
        name: 'apoc.node.degree.in',
        category: '',
        description:
          'Returns the total number of incoming `RELATIONSHIP` values connected to the given `NODE`.',
        signature:
          'apoc.node.degree.in(node :: NODE, relTypes =  :: STRING) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node for which to count the total number of incoming relationships.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'The relationship type to restrict the count to.',
            name: 'relTypes',
            type: 'STRING',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.node.degree.out': {
        name: 'apoc.node.degree.out',
        category: '',
        description:
          'Returns the total number of outgoing `RELATIONSHIP` values from the given `NODE`.',
        signature:
          'apoc.node.degree.out(node :: NODE, relTypes =  :: STRING) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node for which to count the total number of outgoing relationships.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'The relationship type to restrict the count to.',
            name: 'relTypes',
            type: 'STRING',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.node.id': {
        name: 'apoc.node.id',
        category: '',
        description: 'Returns the id for the given virtual `NODE`.',
        signature: 'apoc.node.id(node :: NODE) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The node to return the id from.',
            name: 'node',
            type: 'NODE',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.node.labels': {
        name: 'apoc.node.labels',
        category: '',
        description: 'Returns the labels for the given virtual `NODE`.',
        signature: 'apoc.node.labels(node :: NODE) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The node to return labels from.',
            name: 'node',
            type: 'NODE',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.node.relationship.exists': {
        name: 'apoc.node.relationship.exists',
        category: '',
        description:
          'Returns a `BOOLEAN` based on whether the given `NODE` has a connecting `RELATIONSHIP` (or whether the given `NODE` has a connecting `RELATIONSHIP` of the given type and direction).',
        signature:
          'apoc.node.relationship.exists(node :: NODE, relTypes =  :: STRING) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node to check for the specified relationship types.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              "The relationship types to check for on the given node. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
            name: 'relTypes',
            type: 'STRING',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.node.relationship.types': {
        name: 'apoc.node.relationship.types',
        category: '',
        description:
          'Returns a `LIST<STRING>` of distinct `RELATIONSHIP` types for the given `NODE`.',
        signature:
          'apoc.node.relationship.types(node :: NODE, relTypes =  :: STRING) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node to return the connected relationship types from.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              "If not empty, provides an allow list of relationship types to be returned. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
            name: 'relTypes',
            type: 'STRING',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.node.relationships.exist': {
        name: 'apoc.node.relationships.exist',
        category: '',
        description:
          'Returns a `BOOLEAN` based on whether the given `NODE` has connecting `RELATIONSHIP` values (or whether the given `NODE` has connecting `RELATIONSHIP` values of the given type and direction).',
        signature:
          'apoc.node.relationships.exist(node :: NODE, relTypes =  :: STRING) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node to check for the specified relationship types.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              "The relationship types to check for on the given node. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|....",
            name: 'relTypes',
            type: 'STRING',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.nodes.connected': {
        name: 'apoc.nodes.connected',
        category: '',
        description:
          'Returns true when a given `NODE` is directly connected to another given `NODE`.\nThis function is optimized for dense nodes.',
        signature:
          'apoc.nodes.connected(startNode :: NODE, endNode :: NODE, types =  :: STRING) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node to check if it is directly connected to the second node.',
            name: 'startNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description:
              'The node to check if it is directly connected to the first node.',
            name: 'endNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              "If not empty, provides an allow list of relationship types the nodes can be connected by. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
            name: 'types',
            type: 'STRING',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.nodes.isDense': {
        name: 'apoc.nodes.isDense',
        category: '',
        description: 'Returns true if the given `NODE` is a dense node.',
        signature: 'apoc.nodes.isDense(node :: NODE) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The node to check for being dense or not.',
            name: 'node',
            type: 'NODE',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.nodes.relationship.types': {
        name: 'apoc.nodes.relationship.types',
        category: '',
        description:
          'Returns a `LIST<STRING>` of distinct `RELATIONSHIP` types from the given `LIST<NODE>` values.',
        signature:
          'apoc.nodes.relationship.types(nodes :: ANY, types =  :: STRING) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'Nodes to return connected relationship types from.',
            name: 'nodes',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              "If not empty, provides an allow list of relationship types to be returned. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
            name: 'types',
            type: 'STRING',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.nodes.relationships.exist': {
        name: 'apoc.nodes.relationships.exist',
        category: '',
        description:
          'Returns a `BOOLEAN` based on whether or not the given `NODE` values have the given `RELATIONSHIP` values.',
        signature:
          'apoc.nodes.relationships.exist(nodes :: ANY, types =  :: STRING) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'Nodes to check for the specified relationship types.',
            name: 'nodes',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              "The relationship types to check for on the given nodes. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
            name: 'types',
            type: 'STRING',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.number.arabicToRoman': {
        name: 'apoc.number.arabicToRoman',
        category: '',
        description: 'Converts the given Arabic numbers to Roman numbers.',
        signature: 'apoc.number.arabicToRoman(number :: ANY) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A number to be converted to a Roman number represented as a string.',
            name: 'number',
            type: 'ANY',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.number.exact.add': {
        name: 'apoc.number.exact.add',
        category: '',
        description:
          'Returns the result of adding the two given large numbers (using Java BigDecimal).',
        signature:
          'apoc.number.exact.add(stringA :: STRING, stringB :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A string representation of a number to be added to the second number.',
            name: 'stringA',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'A string representation of a number to be added to the first number.',
            name: 'stringB',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.number.exact.div': {
        name: 'apoc.number.exact.div',
        category: '',
        description:
          'Returns the result of dividing a given large number with another given large number (using Java BigDecimal).',
        signature:
          'apoc.number.exact.div(stringA :: STRING, stringB :: STRING, precision = 0 :: INTEGER, roundingMode = HALF_UP :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A string representation of a number to be divided by the second number.',
            name: 'stringA',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'A string representation of a number to divide the first number by.',
            name: 'stringB',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=0, type=INTEGER}',
            description: 'The rounding precision.',
            name: 'precision',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=HALF_UP, type=STRING}',
            description:
              'A precision rounding mode (`UP`, `DOWN`, `CEILING`, `FLOOR`, `HALF_UP`, `HALF_DOWN`, `HALF_EVEN`).',
            name: 'roundingMode',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.number.exact.mul': {
        name: 'apoc.number.exact.mul',
        category: '',
        description:
          'Returns the result of multiplying two given large numbers (using Java BigDecimal).',
        signature:
          'apoc.number.exact.mul(stringA :: STRING, stringB :: STRING, precision = 0 :: INTEGER, roundingMode = HALF_UP :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A string representation of a number to multiply by the second number.',
            name: 'stringA',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'A string representation of a number to multiply by the first number.',
            name: 'stringB',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=0, type=INTEGER}',
            description: 'The rounding precision.',
            name: 'precision',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=HALF_UP, type=STRING}',
            description:
              'A precision rounding mode (`UP`, `DOWN`, `CEILING`, `FLOOR`, `HALF_UP`, `HALF_DOWN`, `HALF_EVEN`).',
            name: 'roundingMode',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.number.exact.sub': {
        name: 'apoc.number.exact.sub',
        category: '',
        description:
          'Returns the result of subtracting a given large number from another given large number (using Java BigDecimal).',
        signature:
          'apoc.number.exact.sub(stringA :: STRING, stringB :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A string representation of a number to have a second number subtracted from.',
            name: 'stringA',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'A string representation of a number to subtract from the first number.',
            name: 'stringB',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.number.exact.toExact': {
        name: 'apoc.number.exact.toExact',
        category: '',
        description:
          'Returns the exact value of the given number (using Java BigDecimal).',
        signature: 'apoc.number.exact.toExact(number :: INTEGER) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An integer to receive the exact value of.',
            name: 'number',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.number.exact.toFloat': {
        name: 'apoc.number.exact.toFloat',
        category: '',
        description:
          'Returns the `FLOAT` of the given large number (using Java BigDecimal).',
        signature:
          'apoc.number.exact.toFloat(string :: STRING, precision = 0 :: INTEGER, roundingMode = HALF_UP :: STRING) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A large number represented as a string.',
            name: 'string',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=0, type=INTEGER}',
            description: 'The rounding precision.',
            name: 'precision',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=HALF_UP, type=STRING}',
            description:
              'A precision rounding mode (`UP`, `DOWN`, `CEILING`, `FLOOR`, `HALF_UP`, `HALF_DOWN`, `HALF_EVEN`).',
            name: 'roundingMode',
            type: 'STRING',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.number.exact.toInteger': {
        name: 'apoc.number.exact.toInteger',
        category: '',
        description:
          'Returns the `INTEGER` of the given large number (using Java BigDecimal).',
        signature:
          'apoc.number.exact.toInteger(string :: STRING, precision = 0 :: INTEGER, roundingMode = HALF_UP :: STRING) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A large number represented as a string.',
            name: 'string',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=0, type=INTEGER}',
            description: 'The rounding precision.',
            name: 'precision',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=HALF_UP, type=STRING}',
            description:
              'A precision rounding mode (`UP`, `DOWN`, `CEILING`, `FLOOR`, `HALF_UP`, `HALF_DOWN`, `HALF_EVEN`).',
            name: 'roundingMode',
            type: 'STRING',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.number.format': {
        name: 'apoc.number.format',
        category: '',
        description:
          'Formats the given `INTEGER` or `FLOAT` using the given pattern and language to produce a `STRING`.',
        signature:
          'apoc.number.format(number :: ANY, pattern =  :: STRING, language =  :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The number to format.',
            name: 'number',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'The pattern to format the number in.',
            name: 'pattern',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'An ISO-compliant language tag.',
            name: 'language',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.number.parseFloat': {
        name: 'apoc.number.parseFloat',
        category: '',
        description:
          'Parses the given `STRING` using the given pattern and language to produce a `FLOAT`.',
        signature:
          'apoc.number.parseFloat(text :: STRING, pattern =  :: STRING, language =  :: STRING) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to parse a float from.',
            name: 'text',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'The pattern the given string is in.',
            name: 'pattern',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'An ISO-compliant language tag.',
            name: 'language',
            type: 'STRING',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.number.parseInt': {
        name: 'apoc.number.parseInt',
        category: '',
        description:
          'Parses the given `STRING` using the given pattern and language to produce a `INTEGER`.',
        signature:
          'apoc.number.parseInt(text :: STRING, pattern =  :: STRING, language =  :: STRING) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to parse an integer from.',
            name: 'text',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'The pattern the given string is in.',
            name: 'pattern',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'An ISO-compliant language tag.',
            name: 'language',
            type: 'STRING',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.number.romanToArabic': {
        name: 'apoc.number.romanToArabic',
        category: '',
        description: 'Converts the given Roman numbers to Arabic numbers.',
        signature:
          'apoc.number.romanToArabic(romanNumber :: STRING) :: INTEGER | FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A Roman number to be converted.',
            name: 'romanNumber',
            type: 'STRING',
          },
        ],
        returnDescription: 'INTEGER | FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.path.combine': {
        name: 'apoc.path.combine',
        category: '',
        description: 'Combines the two given `PATH` values into one `PATH`.',
        signature: 'apoc.path.combine(path1 :: PATH, path2 :: PATH) :: PATH',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The first path to combine with the second path.',
            name: 'path1',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            description: 'The second path to combine with the first path.',
            name: 'path2',
            type: 'PATH',
          },
        ],
        returnDescription: 'PATH',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.path.create': {
        name: 'apoc.path.create',
        category: '',
        description:
          'Returns a `PATH` from the given start `NODE` and `LIST<RELATIONSHIP>`.',
        signature:
          'apoc.path.create(startNode :: NODE, rels = [] :: LIST<RELATIONSHIP>) :: PATH',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The starting node of the new path.',
            name: 'startNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[], type=LIST<RELATIONSHIP>}',
            description: 'The list of relationships to create the path from.',
            name: 'rels',
            type: 'LIST<RELATIONSHIP>',
          },
        ],
        returnDescription: 'PATH',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.path.elements': {
        name: 'apoc.path.elements',
        category: '',
        description:
          'Converts the given `PATH` into a `LIST<NODE | RELATIONSHIP>`.',
        signature: 'apoc.path.elements(path :: PATH) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The path to be converted into a list of nodes and relationships.',
            name: 'path',
            type: 'PATH',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.path.slice': {
        name: 'apoc.path.slice',
        category: '',
        description:
          'Returns a new `PATH` of the given length, taken from the given `PATH` at the given offset.',
        signature:
          'apoc.path.slice(path :: PATH, offset = 0 :: INTEGER, length = -1 :: INTEGER) :: PATH',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The path to be sliced.',
            name: 'path',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=0, type=INTEGER}',
            description: 'The offset to begin the new path from.',
            name: 'offset',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=-1, type=INTEGER}',
            description: 'The length of the new path.',
            name: 'length',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'PATH',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.rel.endNode': {
        name: 'apoc.rel.endNode',
        category: '',
        description:
          'Returns the end `NODE` for the given virtual `RELATIONSHIP`.',
        signature: 'apoc.rel.endNode(rel :: RELATIONSHIP) :: NODE',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The relationship to get the end node from.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
        ],
        returnDescription: 'NODE',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.rel.id': {
        name: 'apoc.rel.id',
        category: '',
        description: 'Returns the id for the given virtual `RELATIONSHIP`.',
        signature: 'apoc.rel.id(rel :: RELATIONSHIP) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The relationship to get the id from.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.rel.startNode': {
        name: 'apoc.rel.startNode',
        category: '',
        description:
          'Returns the start `NODE` for the given virtual `RELATIONSHIP`.',
        signature: 'apoc.rel.startNode(rel :: RELATIONSHIP) :: NODE',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The relationship to get the start node from.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
        ],
        returnDescription: 'NODE',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.rel.type': {
        name: 'apoc.rel.type',
        category: '',
        description: 'Returns the type for the given virtual `RELATIONSHIP`.',
        signature: 'apoc.rel.type(rel :: RELATIONSHIP) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The relationship to get the type from.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.schema.node.constraintExists': {
        name: 'apoc.schema.node.constraintExists',
        category: '',
        description:
          'Returns a `BOOLEAN` depending on whether or not a constraint exists for the given `NODE` label with the given property names.',
        signature:
          'apoc.schema.node.constraintExists(labelName :: STRING, propertyName :: LIST<STRING>) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The node label to check for a constraint on.',
            name: 'labelName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The property names to check for a constraint on.',
            name: 'propertyName',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.schema.node.indexExists': {
        name: 'apoc.schema.node.indexExists',
        category: '',
        description:
          'Returns a `BOOLEAN` depending on whether or not an index exists for the given `NODE` label with the given property names.',
        signature:
          'apoc.schema.node.indexExists(labelName :: STRING, propertyName :: LIST<STRING>) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The node label to check for an index on.',
            name: 'labelName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The property names to check for an index on.',
            name: 'propertyName',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.schema.relationship.constraintExists': {
        name: 'apoc.schema.relationship.constraintExists',
        category: '',
        description:
          'Returns a `BOOLEAN` depending on whether or not a constraint exists for the given `RELATIONSHIP` type with the given property names.',
        signature:
          'apoc.schema.relationship.constraintExists(type :: STRING, propertyName :: LIST<STRING>) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The relationship type to check for a constraint on.',
            name: 'type',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The property names to check for a constraint on.',
            name: 'propertyName',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.schema.relationship.indexExists': {
        name: 'apoc.schema.relationship.indexExists',
        category: '',
        description:
          'Returns a `BOOLEAN` depending on whether or not an index exists for the given `RELATIONSHIP` type with the given property names.',
        signature:
          'apoc.schema.relationship.indexExists(type :: STRING, propertyName :: LIST<STRING>) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The relationship type to check for an index on.',
            name: 'type',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The property names to check for an index on.',
            name: 'propertyName',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.scoring.existence': {
        name: 'apoc.scoring.existence',
        category: '',
        description: 'Returns the given score if true, 0 if false.',
        signature:
          'apoc.scoring.existence(score :: INTEGER, exists :: BOOLEAN) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The score to return if the exists is true.',
            name: 'score',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Whether or not to return the score.',
            name: 'exists',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.scoring.pareto': {
        name: 'apoc.scoring.pareto',
        category: '',
        description:
          'Applies a Pareto scoring function over the given `INTEGER` values.',
        signature:
          'apoc.scoring.pareto(minimumThreshold :: INTEGER, eightyPercentValue :: INTEGER, maximumValue :: INTEGER, score :: INTEGER) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The minimum threshold for the score.',
            name: 'minimumThreshold',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The eighty percent value.',
            name: 'eightyPercentValue',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The maximum value.',
            name: 'maximumValue',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The score.',
            name: 'score',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.temporal.format': {
        name: 'apoc.temporal.format',
        category: '',
        description:
          'Formats the given temporal value into the given time format.',
        signature:
          'apoc.temporal.format(temporal :: ANY, format = yyyy-MM-dd :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A temporal value to be formatted.',
            name: 'temporal',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=yyyy-MM-dd, type=STRING}',
            description: 'The format to return the temporal value in.',
            name: 'format',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.temporal.formatDuration': {
        name: 'apoc.temporal.formatDuration',
        category: '',
        description: 'Formats the given duration into the given time format.',
        signature:
          'apoc.temporal.formatDuration(input :: ANY, format :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The duration value to be formatted into a string.',
            name: 'input',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The format to return the duration in.',
            name: 'format',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.temporal.toZonedTemporal': {
        name: 'apoc.temporal.toZonedTemporal',
        category: '',
        description:
          'Parses the given date `STRING` using the specified format into the given time zone.',
        signature:
          'apoc.temporal.toZonedTemporal(time :: STRING, format = yyyy-MM-dd HH:mm:ss :: STRING, timezone = UTC :: STRING) :: ZONED DATETIME',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The date string to be parsed.',
            name: 'time',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=yyyy-MM-dd HH:mm:ss, type=STRING}',
            description: 'The format of the given date string.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=UTC, type=STRING}',
            description: 'The timezone the given string is in.',
            name: 'timezone',
            type: 'STRING',
          },
        ],
        returnDescription: 'ZONED DATETIME',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.base64Decode': {
        name: 'apoc.text.base64Decode',
        category: '',
        description: 'Decodes the given Base64 encoded `STRING`.',
        signature: 'apoc.text.base64Decode(text :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to be decoded using base64.',
            name: 'text',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.base64Encode': {
        name: 'apoc.text.base64Encode',
        category: '',
        description: 'Encodes the given `STRING` with Base64.',
        signature: 'apoc.text.base64Encode(text :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to be encoded using base64.',
            name: 'text',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.base64UrlDecode': {
        name: 'apoc.text.base64UrlDecode',
        category: '',
        description: 'Decodes the given Base64 encoded URL.',
        signature: 'apoc.text.base64UrlDecode(url :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The url to be decoded using base64.',
            name: 'url',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.base64UrlEncode': {
        name: 'apoc.text.base64UrlEncode',
        category: '',
        description: 'Encodes the given URL with Base64.',
        signature: 'apoc.text.base64UrlEncode(url :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The url to be encoded with base64.',
            name: 'url',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.byteCount': {
        name: 'apoc.text.byteCount',
        category: '',
        description: 'Returns the size of the given `STRING` in bytes.',
        signature:
          'apoc.text.byteCount(text :: STRING, charset = UTF-8 :: STRING) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to get the size of in bytes.',
            name: 'text',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=UTF-8, type=STRING}',
            description: 'The name of a supported charset.',
            name: 'charset',
            type: 'STRING',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.bytes': {
        name: 'apoc.text.bytes',
        category: '',
        description: 'Returns the given `STRING` as bytes.',
        signature:
          'apoc.text.bytes(text :: STRING, charset = UTF-8 :: STRING) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to get the bytes from.',
            name: 'text',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=UTF-8, type=STRING}',
            description: 'The name of a supported charset.',
            name: 'charset',
            type: 'STRING',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.camelCase': {
        name: 'apoc.text.camelCase',
        category: '',
        description: 'Converts the given `STRING` to camel case.',
        signature: 'apoc.text.camelCase(text :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to be converted to camel case.',
            name: 'text',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.capitalize': {
        name: 'apoc.text.capitalize',
        category: '',
        description: 'Capitalizes the first letter of the given `STRING`.',
        signature: 'apoc.text.capitalize(text :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string in which to capitalize the first letter.',
            name: 'text',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.capitalizeAll': {
        name: 'apoc.text.capitalizeAll',
        category: '',
        description:
          'Capitalizes the first letter of every word in the given `STRING`.',
        signature: 'apoc.text.capitalizeAll(text :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string in which to capitalize every word.',
            name: 'text',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.charAt': {
        name: 'apoc.text.charAt',
        category: '',
        description:
          'Returns the `INTEGER` value of the character at the given index.',
        signature:
          'apoc.text.charAt(text :: STRING, index :: INTEGER) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The string from which a character is taken to be converted into an integer value.',
            name: 'text',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The index of the character in the given string to convert.',
            name: 'index',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.clean': {
        name: 'apoc.text.clean',
        category: '',
        description:
          'Strips the given `STRING` of everything except alpha numeric characters and converts it to lower case.',
        signature: 'apoc.text.clean(text :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The string to be stripped of all non-alphanumeric characters and converted to lowercase.',
            name: 'text',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.code': {
        name: 'apoc.text.code',
        category: '',
        description: 'Converts the `INTEGER` value into a `STRING`.',
        signature: 'apoc.text.code(codepoint :: INTEGER) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An integer to be converted into a character.',
            name: 'codepoint',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.compareCleaned': {
        name: 'apoc.text.compareCleaned',
        category: '',
        description:
          'Compares two given `STRING` values stripped of everything except alpha numeric characters converted to lower case.',
        signature:
          'apoc.text.compareCleaned(text1 :: STRING, text2 :: STRING) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The first string to be stripped of all non-alphanumeric characters and compared to the second string.',
            name: 'text1',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The second string to be stripped of all non-alphanumeric characters and compared to the first string.',
            name: 'text2',
            type: 'STRING',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.decapitalize': {
        name: 'apoc.text.decapitalize',
        category: '',
        description:
          'Turns the first letter of the given `STRING` from upper case to lower case.',
        signature: 'apoc.text.decapitalize(text :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The string in which to decapitalize the first letter.',
            name: 'text',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.decapitalizeAll': {
        name: 'apoc.text.decapitalizeAll',
        category: '',
        description:
          'Turns the first letter of every word in the given `STRING` to lower case.',
        signature: 'apoc.text.decapitalizeAll(text :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string in which to decapitalize every word.',
            name: 'text',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.distance': {
        name: 'apoc.text.distance',
        category: '',
        description:
          'Compares the two given `STRING` values using the Levenshtein distance algorithm.',
        signature:
          'apoc.text.distance(text1 :: STRING, text2 :: STRING) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The first string to be compared against the second.',
            name: 'text1',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The second string to be compared against the first.',
            name: 'text2',
            type: 'STRING',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.doubleMetaphone': {
        name: 'apoc.text.doubleMetaphone',
        category: '',
        description:
          'Returns the double metaphone phonetic encoding of all words in the given `STRING` value.',
        signature: 'apoc.text.doubleMetaphone(value :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The string to be encoded using the double metaphone phonetic encoding.',
            name: 'value',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.format': {
        name: 'apoc.text.format',
        category: '',
        description: 'Formats the given `STRING` with the given parameters.',
        signature:
          'apoc.text.format(text :: STRING, params :: LIST<ANY>, language = en :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The format string.',
            name: 'text',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'Arguments referenced by the format specifiers in the format string.',
            name: 'params',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=en, type=STRING}',
            description:
              'An ISO 639 alpha-2 or alpha-3 language code, or a language subtag up to 8 characters in length.',
            name: 'language',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.fuzzyMatch': {
        name: 'apoc.text.fuzzyMatch',
        category: '',
        description:
          'Performs a fuzzy match search of the two given `STRING` values.',
        signature:
          'apoc.text.fuzzyMatch(text1 :: STRING, text2 :: STRING) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The first string to be compared against the second.',
            name: 'text1',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The second string to be compared against the first.',
            name: 'text2',
            type: 'STRING',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.hammingDistance': {
        name: 'apoc.text.hammingDistance',
        category: '',
        description:
          'Compares the two given `STRING` values using the Hamming distance algorithm.',
        signature:
          'apoc.text.hammingDistance(text1 :: STRING, text2 :: STRING) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The first string to be compared against the second.',
            name: 'text1',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The second string to be compared against the first.',
            name: 'text2',
            type: 'STRING',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.hexCharAt': {
        name: 'apoc.text.hexCharAt',
        category: '',
        description:
          'Returns the hexadecimal value of the given `STRING` at the given index.',
        signature:
          'apoc.text.hexCharAt(text :: STRING, index :: INTEGER) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The string from which to take a character and convert it into a hexadecimal value represented as a string',
            name: 'text',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The index of the character in the given string to convert.',
            name: 'index',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.hexValue': {
        name: 'apoc.text.hexValue',
        category: '',
        description: 'Returns the hexadecimal value of the given value.',
        signature: 'apoc.text.hexValue(value :: INTEGER) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The value to convert into a hexidecimal value represented as a string.',
            name: 'value',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.indexOf': {
        name: 'apoc.text.indexOf',
        category: '',
        description:
          'Returns the first occurrence of the lookup `STRING` in the given `STRING`, or -1 if not found.',
        signature:
          'apoc.text.indexOf(text :: STRING, lookup :: STRING, from = 0 :: INTEGER, to = -1 :: INTEGER) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to search for the lookup string in.',
            name: 'text',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The lookup string to search for in the given string.',
            name: 'lookup',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=0, type=INTEGER}',
            description: 'The index at which to start the search.',
            name: 'from',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=-1, type=INTEGER}',
            description: 'The index at which to stop the search.',
            name: 'to',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.indexesOf': {
        name: 'apoc.text.indexesOf',
        category: '',
        description:
          'Returns all occurrences of the lookup `STRING` in the given `STRING`, or an empty list if not found.',
        signature:
          'apoc.text.indexesOf(text :: STRING, lookup :: STRING, from = 0 :: INTEGER, to = -1 :: INTEGER) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to search for the lookup string in.',
            name: 'text',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The lookup string to search for in the given string.',
            name: 'lookup',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=0, type=INTEGER}',
            description: 'The index at which to start the search.',
            name: 'from',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=-1, type=INTEGER}',
            description: 'The index at which to stop the search.',
            name: 'to',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.jaroWinklerDistance': {
        name: 'apoc.text.jaroWinklerDistance',
        category: '',
        description:
          'Compares the two given `STRING` values using the Jaro-Winkler distance algorithm.',
        signature:
          'apoc.text.jaroWinklerDistance(text1 :: STRING, text2 :: STRING) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The first string to be compared against the second.',
            name: 'text1',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The second string to be compared against the first.',
            name: 'text2',
            type: 'STRING',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.join': {
        name: 'apoc.text.join',
        category: '',
        description:
          'Joins the given `STRING` values using the given delimiter.',
        signature:
          'apoc.text.join(texts :: LIST<STRING>, delimiter :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list of strings to be concatenated using the given delimiter.',
            name: 'texts',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The given delimiter to join the given strings with.',
            name: 'delimiter',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.levenshteinDistance': {
        name: 'apoc.text.levenshteinDistance',
        category: '',
        description:
          'Compares the given `STRING` values using the Levenshtein distance algorithm.',
        signature:
          'apoc.text.levenshteinDistance(text1 :: STRING, text2 :: STRING) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The first string to be compared against the second.',
            name: 'text1',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The second string to be compared against the first.',
            name: 'text2',
            type: 'STRING',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy: 'apoc.text.distance',
      },
      'apoc.text.levenshteinSimilarity': {
        name: 'apoc.text.levenshteinSimilarity',
        category: '',
        description:
          'Returns the similarity (a value within 0 and 1) between the two given `STRING` values based on the Levenshtein distance algorithm.',
        signature:
          'apoc.text.levenshteinSimilarity(text1 :: STRING, text2 :: STRING) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The first string to be compared against the second.',
            name: 'text1',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The second string to be compared against the first.',
            name: 'text2',
            type: 'STRING',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.lpad': {
        name: 'apoc.text.lpad',
        category: '',
        description: 'Left pads the given `STRING` by the given width.',
        signature:
          'apoc.text.lpad(text :: STRING, count :: INTEGER, delimiter =   :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to be padded.',
            name: 'text',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The number of delimiters to pad the given string with.',
            name: 'count',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value= , type=STRING}',
            description: 'The delimiter to pad the given string with.',
            name: 'delimiter',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.phonetic': {
        name: 'apoc.text.phonetic',
        category: '',
        description:
          'Returns the US_ENGLISH phonetic soundex encoding of all words of the `STRING`.',
        signature: 'apoc.text.phonetic(text :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The string to encode using US_ENGLISH phonetic soundex.',
            name: 'text',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.random': {
        name: 'apoc.text.random',
        category: '',
        description:
          'Generates a random `STRING` to the given length using a length parameter and an optional `STRING` of valid characters.\nUnsuitable for cryptographic use-cases.',
        signature:
          'apoc.text.random(length :: INTEGER, valid = A-Za-z0-9 :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The length of the random string.',
            name: 'length',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=A-Za-z0-9, type=STRING}',
            description: 'The valid characters the random string can contain.',
            name: 'valid',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.regexGroups': {
        name: 'apoc.text.regexGroups',
        category: '',
        description:
          'Returns all groups matching the given regular expression in the given text.',
        signature:
          'apoc.text.regexGroups(text :: STRING, regex :: STRING) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The text to extract matches from.',
            name: 'text',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The regex pattern to match.',
            name: 'regex',
            type: 'STRING',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.regexGroupsByName': {
        name: 'apoc.text.regexGroupsByName',
        category: '',
        description:
          'Returns all groups with their group name matching the given regular expression in the given text.',
        signature:
          'apoc.text.regexGroupsByName(text :: STRING, regex :: STRING) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The text to extract matches from.',
            name: 'text',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The regex pattern to match.',
            name: 'regex',
            type: 'STRING',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.regreplace': {
        name: 'apoc.text.regreplace',
        category: '',
        description:
          'Finds and replaces all matches found by the given regular expression with the given replacement.',
        signature:
          'apoc.text.regreplace(text :: STRING, regex :: STRING, replacement :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to be modified.',
            name: 'text',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The regular expression pattern to replace in the original string.',
            name: 'regex',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The value to be inserted in the original string.',
            name: 'replacement',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy: 'apoc.text.replace',
      },
      'apoc.text.repeat': {
        name: 'apoc.text.repeat',
        category: '',
        description:
          'Returns the result of the given item multiplied by the given count.',
        signature:
          'apoc.text.repeat(item :: STRING, count :: INTEGER) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to be repeated.',
            name: 'item',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of times to repeat the given string.',
            name: 'count',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.replace': {
        name: 'apoc.text.replace',
        category: '',
        description:
          'Finds and replaces all matches found by the given regular expression with the given replacement.',
        signature:
          'apoc.text.replace(text :: STRING, regex :: STRING, replacement :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to be modified.',
            name: 'text',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The regular expression pattern to replace in the original string.',
            name: 'regex',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The value to be inserted in the original string.',
            name: 'replacement',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.rpad': {
        name: 'apoc.text.rpad',
        category: '',
        description: 'Right pads the given `STRING` by the given width.',
        signature:
          'apoc.text.rpad(text :: STRING, count :: INTEGER, delimiter =   :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to be padded.',
            name: 'text',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The number of delimiters to pad the given string with.',
            name: 'count',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value= , type=STRING}',
            description: 'The delimiter to pad the given string with.',
            name: 'delimiter',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.slug': {
        name: 'apoc.text.slug',
        category: '',
        description:
          'Replaces the whitespace in the given `STRING` with the given delimiter.',
        signature:
          'apoc.text.slug(text :: STRING, delimiter = - :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string whose whitespace is to be replaced.',
            name: 'text',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=-, type=STRING}',
            description: 'The delimiter to replace the whitespace with.',
            name: 'delimiter',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.snakeCase': {
        name: 'apoc.text.snakeCase',
        category: '',
        description: 'Converts the given `STRING` to snake case.',
        signature: 'apoc.text.snakeCase(text :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to convert to snake case.',
            name: 'text',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.sorensenDiceSimilarity': {
        name: 'apoc.text.sorensenDiceSimilarity',
        category: '',
        description:
          'Compares the two given `STRING` values using the Sørensen–Dice coefficient formula, with the provided IETF language tag.',
        signature:
          'apoc.text.sorensenDiceSimilarity(text1 :: STRING, text2 :: STRING, languageTag = en :: STRING) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A string to be compared against `text2`.',
            name: 'text1',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'A string to be compared against `text1`.',
            name: 'text2',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=en, type=STRING}',
            description: 'A language tag string specified by IETF BCP 47.',
            name: 'languageTag',
            type: 'STRING',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.split': {
        name: 'apoc.text.split',
        category: '',
        description:
          'Splits the given `STRING` using a given regular expression as a separator.',
        signature:
          'apoc.text.split(text :: STRING, regex :: STRING, limit = 0 :: INTEGER) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to split.',
            name: 'text',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The delimiting regular expression.',
            name: 'regex',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=0, type=INTEGER}',
            description:
              'The number of times the regex pattern is applied; if set to 0, it will be applied as many times as possible.',
            name: 'limit',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.swapCase': {
        name: 'apoc.text.swapCase',
        category: '',
        description: 'Swaps the cases in the given `STRING`.',
        signature: 'apoc.text.swapCase(text :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to swap the case of.',
            name: 'text',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.toCypher': {
        name: 'apoc.text.toCypher',
        category: '',
        description: 'Converts the given value to a Cypher property `STRING`.',
        signature:
          'apoc.text.toCypher(value :: ANY, config = {} :: MAP) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The value to convert to a Cypher property string.',
            name: 'value',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{ keepValues :: LIST<ANY> , skipValues :: LIST<ANY> }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.toUpperCase': {
        name: 'apoc.text.toUpperCase',
        category: '',
        description: 'Converts the given `STRING` to upper case.',
        signature: 'apoc.text.toUpperCase(text :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to convert to upper case.',
            name: 'text',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.upperCamelCase': {
        name: 'apoc.text.upperCamelCase',
        category: '',
        description: 'Converts the given `STRING` to upper camel case.',
        signature: 'apoc.text.upperCamelCase(text :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to convert to camel case.',
            name: 'text',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.urldecode': {
        name: 'apoc.text.urldecode',
        category: '',
        description: 'Decodes the given URL encoded `STRING`.',
        signature: 'apoc.text.urldecode(text :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to url decode.',
            name: 'text',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.urlencode': {
        name: 'apoc.text.urlencode',
        category: '',
        description: 'Encodes the given URL `STRING`.',
        signature: 'apoc.text.urlencode(text :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to url encode.',
            name: 'text',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.util.compress': {
        name: 'apoc.util.compress',
        category: '',
        description: 'Zips the given `STRING`.',
        signature:
          'apoc.util.compress(data :: STRING, config = {} :: MAP) :: BYTEARRAY',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to be compressed.',
            name: 'data',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{ compression = "GZIP" :: ["GZIP", "BZIP2", "DEFLATE", "BLOCK_LZ4", "FRAMED_SNAPPY", "NONE"], charset = "UTF_8" ::["UTF-8", "UTF-16", "UTF-16BE", "UTF-16LE", "UTF-32", "US-ASCII", "ISO-8859-1"] }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: 'BYTEARRAY',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.util.decompress': {
        name: 'apoc.util.decompress',
        category: '',
        description: 'Unzips the given byte array.',
        signature:
          'apoc.util.decompress(data :: BYTEARRAY, config = {} :: MAP) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The bytearray of data to decompress.',
            name: 'data',
            type: 'BYTEARRAY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{ compression = "GZIP" :: ["GZIP", "BZIP2", "DEFLATE", "BLOCK_LZ4", "FRAMED_SNAPPY", "NONE"], charset = "UTF_8" ::["UTF-8", "UTF-16", "UTF-16BE", "UTF-16LE", "UTF-32", "US-ASCII", "ISO-8859-1"] }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.util.md5': {
        name: 'apoc.util.md5',
        category: '',
        description:
          'Returns the MD5 checksum of the concatenation of all `STRING` values in the given `LIST<ANY>`.\nMD5 is a weak hashing algorithm which is unsuitable for cryptographic use-cases.',
        signature: 'apoc.util.md5(values :: LIST<ANY>) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list of values to concatenate and generate an md5 checksum from.',
            name: 'values',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.util.sha1': {
        name: 'apoc.util.sha1',
        category: '',
        description:
          'Returns the SHA1 of the concatenation of all `STRING` values in the given `LIST<ANY>`.\nSHA1 is a weak hashing algorithm which is unsuitable for cryptographic use-cases.',
        signature: 'apoc.util.sha1(values :: LIST<ANY>) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list of values to concatenate and generate a sha1 checksum from.',
            name: 'values',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.util.sha256': {
        name: 'apoc.util.sha256',
        category: '',
        description:
          'Returns the SHA256 of the concatenation of all `STRING` values in the given `LIST<ANY>`.',
        signature: 'apoc.util.sha256(values :: LIST<ANY>) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list of values to concatenate and generate a sha256 checksum from.',
            name: 'values',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.util.sha384': {
        name: 'apoc.util.sha384',
        category: '',
        description:
          'Returns the SHA384 of the concatenation of all `STRING` values in the given `LIST<ANY>`.',
        signature: 'apoc.util.sha384(values :: LIST<ANY>) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list of values to concatenate and generate a sha384 checksum from.',
            name: 'values',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.util.sha512': {
        name: 'apoc.util.sha512',
        category: '',
        description:
          'Returns the SHA512 of the concatenation of all `STRING` values in the `LIST<ANY>`.',
        signature: 'apoc.util.sha512(values :: LIST<ANY>) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list of values to concatenate and generate a sha512 checksum from.',
            name: 'values',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.util.validatePredicate': {
        name: 'apoc.util.validatePredicate',
        category: '',
        description:
          'If the given predicate is true an exception is thrown, otherwise it returns true (for use inside `WHERE` subclauses).',
        signature:
          'apoc.util.validatePredicate(predicate :: BOOLEAN, message :: STRING, params :: LIST<ANY>) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The predicate to be evaluated.',
            name: 'predicate',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description:
              'The error message thrown if the predicate evaluates to `true`.',
            name: 'message',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Parameters to format the message with.',
            name: 'params',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.version': {
        name: 'apoc.version',
        category: '',
        description: 'Returns the APOC version currently installed.',
        signature: 'apoc.version() :: STRING',
        isBuiltIn: false,
        argumentDescription: [],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.xml.parse': {
        name: 'apoc.xml.parse',
        category: '',
        description: 'Parses the given XML `STRING` as a `MAP`.',
        signature:
          'apoc.xml.parse(data :: STRING, path = / :: STRING, config = {} :: MAP, simple = false :: BOOLEAN) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The XML data to parse.',
            name: 'data',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=/, type=STRING}',
            description: 'An xPath expression.',
            name: 'path',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              'A config map describing whether or not to fail on an encountered error; { failOnError = true :: BOOLEAN }',
            name: 'config',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=false, type=BOOLEAN}',
            description:
              'Specify simple mode to make XML elements accessible via a property of the element name prefixed with an `_`.',
            name: 'simple',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      asin: {
        name: 'asin',
        category: 'Trigonometric',
        description: 'Returns the arcsine of a `FLOAT` in radians.',
        signature: 'asin(input :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An angle in radians.',
            name: 'input',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      atan: {
        name: 'atan',
        category: 'Trigonometric',
        description: 'Returns the arctangent of a `FLOAT` in radians.',
        signature: 'atan(input :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An angle in radians.',
            name: 'input',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      atan2: {
        name: 'atan2',
        category: 'Trigonometric',
        description:
          'Returns the arctangent2 of a set of coordinates in radians.',
        signature: 'atan2(y :: FLOAT, x :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A y angle in radians.',
            name: 'y',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'An x angle in radians.',
            name: 'x',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      avg: {
        name: 'avg',
        category: 'Aggregating',
        description:
          'Returns the average of a set of `INTEGER`, `FLOAT` or `DURATION` values.',
        signature:
          'avg(input :: INTEGER | FLOAT | DURATION) :: INTEGER | FLOAT | DURATION',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value aggregated to form an average.',
            name: 'input',
            type: 'INTEGER | FLOAT | DURATION',
          },
        ],
        returnDescription: 'INTEGER | FLOAT | DURATION',
        aggregating: true,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      btrim: {
        name: 'btrim',
        category: 'String',
        description:
          'Returns the given `STRING` with leading and trailing `trimCharacterString` characters removed.',
        signature:
          'btrim(input :: STRING, trimCharacterString :: STRING) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A value from which the leading and trailing trim character will be removed.',
            name: 'input',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'A character to be removed from the start and end of the given string.',
            name: 'trimCharacterString',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      ceil: {
        name: 'ceil',
        category: 'Numeric',
        description:
          'Returns the smallest `FLOAT` that is greater than or equal to a number and equal to an `INTEGER`.',
        signature: 'ceil(input :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be rounded to the nearest higher integer.',
            name: 'input',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      char_length: {
        name: 'char_length',
        category: 'Scalar',
        description: 'Returns the number of Unicode characters in a `STRING`.',
        signature: 'char_length(input :: STRING) :: INTEGER',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A string value whose length in characters is to be calculated.',
            name: 'input',
            type: 'STRING',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      character_length: {
        name: 'character_length',
        category: 'Scalar',
        description: 'Returns the number of Unicode characters in a `STRING`.',
        signature: 'character_length(input :: STRING) :: INTEGER',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A string value whose length in characters is to be calculated.',
            name: 'input',
            type: 'STRING',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      coalesce: {
        name: 'coalesce',
        category: 'Scalar',
        description:
          'Returns the first non-null value in a list of expressions.',
        signature: 'coalesce(input :: ANY) :: ANY',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'If this is the first non-`NULL` value, it will be returned.',
            name: 'input',
            type: 'ANY',
          },
        ],
        returnDescription: 'ANY',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      collect: {
        name: 'collect',
        category: 'Aggregating',
        description:
          'Returns a list containing the values returned by an expression.',
        signature: 'collect(input :: ANY) :: LIST<ANY>',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value aggregated into a list.',
            name: 'input',
            type: 'ANY',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: true,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      cos: {
        name: 'cos',
        category: 'Trigonometric',
        description: 'Returns the cosine of a `FLOAT`.',
        signature: 'cos(input :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An angle in radians.',
            name: 'input',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      cot: {
        name: 'cot',
        category: 'Trigonometric',
        description: 'Returns the cotangent of a `FLOAT`.',
        signature: 'cot(input :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An angle in radians.',
            name: 'input',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      count: {
        name: 'count',
        category: 'Aggregating',
        description: 'Returns the number of values or rows.',
        signature: 'count(input :: ANY) :: INTEGER',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be aggregated.',
            name: 'input',
            type: 'ANY',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: true,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      date: {
        name: 'date',
        category: 'Temporal',
        description: 'Creates a `DATE` instant.',
        signature: 'date(input = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: DATE',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description:
              "Either a string representation of a temporal value, a map containing the single key 'timezone', or a map containing temporal values ('date', 'year', 'month', 'day', 'week', 'dayOfWeek', 'quarter', 'dayOfQuarter', 'ordinalDay') as components.",
            name: 'input',
            type: 'ANY',
          },
        ],
        returnDescription: 'DATE',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'date.realtime': {
        name: 'date.realtime',
        category: 'Temporal',
        description:
          'Returns the current `DATE` instant using the realtime clock.',
        signature:
          'date.realtime(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: DATE',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description: 'A string value representing a time zone.',
            name: 'timezone',
            type: 'ANY',
          },
        ],
        returnDescription: 'DATE',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'date.statement': {
        name: 'date.statement',
        category: 'Temporal',
        description:
          'Returns the current `DATE` instant using the statement clock.',
        signature:
          'date.statement(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: DATE',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description: 'A string value representing a time zone.',
            name: 'timezone',
            type: 'ANY',
          },
        ],
        returnDescription: 'DATE',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'date.transaction': {
        name: 'date.transaction',
        category: 'Temporal',
        description:
          'Returns the current `DATE` instant using the transaction clock.',
        signature:
          'date.transaction(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: DATE',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description: 'A string value representing a time zone.',
            name: 'timezone',
            type: 'ANY',
          },
        ],
        returnDescription: 'DATE',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'date.truncate': {
        name: 'date.truncate',
        category: 'Temporal',
        description:
          'Truncates the given temporal value to a `DATE` instant using the specified unit.',
        signature:
          'date.truncate(unit :: STRING, input = DEFAULT_TEMPORAL_ARGUMENT :: ANY, fields = null :: MAP) :: DATE',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              "A string representing one of the following: 'day', 'week', 'month', 'weekYear', 'quarter', 'year', 'decade', 'century', 'millennium'.",
            name: 'unit',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description:
              'The date to be truncated using either `ZONED DATETIME`, `LOCAL DATETIME`, or `DATE`.',
            name: 'input',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=MAP}',
            description:
              'A list of time components smaller than those specified in `unit` to preserve during truncation.',
            name: 'fields',
            type: 'MAP',
          },
        ],
        returnDescription: 'DATE',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      datetime: {
        name: 'datetime',
        category: 'Temporal',
        description: 'Creates a `ZONED DATETIME` instant.',
        signature:
          'datetime(input = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: ZONED DATETIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description:
              "Either a string representation of a temporal value, a map containing the single key 'timezone', or a map containing temporal values ('year', 'month', 'day', 'hour', 'minute', 'second', 'millisecond', 'microsecond', 'nanosecond', 'timezone', 'epochSeconds', 'epochMillis') as components.",
            name: 'input',
            type: 'ANY',
          },
        ],
        returnDescription: 'ZONED DATETIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'datetime.fromepoch': {
        name: 'datetime.fromepoch',
        category: 'Temporal',
        description:
          'Creates a `ZONED DATETIME` given the seconds and nanoseconds since the start of the epoch.',
        signature:
          'datetime.fromepoch(seconds :: INTEGER | FLOAT, nanoseconds :: INTEGER | FLOAT) :: ZONED DATETIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The number of seconds from the UNIX epoch in the UTC time zone.',
            name: 'seconds',
            type: 'INTEGER | FLOAT',
          },
          {
            isDeprecated: false,
            description:
              'The number of nanoseconds from the UNIX epoch in the UTC time zone. This can be added to seconds.',
            name: 'nanoseconds',
            type: 'INTEGER | FLOAT',
          },
        ],
        returnDescription: 'ZONED DATETIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'datetime.fromepochmillis': {
        name: 'datetime.fromepochmillis',
        category: 'Temporal',
        description:
          'Creates a `ZONED DATETIME` given the milliseconds since the start of the epoch.',
        signature:
          'datetime.fromepochmillis(milliseconds :: INTEGER | FLOAT) :: ZONED DATETIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The number of milliseconds from the UNIX epoch in the UTC time zone.',
            name: 'milliseconds',
            type: 'INTEGER | FLOAT',
          },
        ],
        returnDescription: 'ZONED DATETIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'datetime.realtime': {
        name: 'datetime.realtime',
        category: 'Temporal',
        description:
          'Returns the current `ZONED DATETIME` instant using the realtime clock.',
        signature:
          'datetime.realtime(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: ZONED DATETIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description: 'A string value representing a time zone.',
            name: 'timezone',
            type: 'ANY',
          },
        ],
        returnDescription: 'ZONED DATETIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'datetime.statement': {
        name: 'datetime.statement',
        category: 'Temporal',
        description:
          'Returns the current `ZONED DATETIME` instant using the statement clock.',
        signature:
          'datetime.statement(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: ZONED DATETIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description: 'A string value representing a time zone.',
            name: 'timezone',
            type: 'ANY',
          },
        ],
        returnDescription: 'ZONED DATETIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'datetime.transaction': {
        name: 'datetime.transaction',
        category: 'Temporal',
        description:
          'Returns the current `ZONED DATETIME` instant using the transaction clock.',
        signature:
          'datetime.transaction(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: ZONED DATETIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description: 'A string value representing a time zone.',
            name: 'timezone',
            type: 'ANY',
          },
        ],
        returnDescription: 'ZONED DATETIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'datetime.truncate': {
        name: 'datetime.truncate',
        category: 'Temporal',
        description:
          'Truncates the given temporal value to a `ZONED DATETIME` instant using the specified unit.',
        signature:
          'datetime.truncate(unit :: STRING, input = DEFAULT_TEMPORAL_ARGUMENT :: ANY, fields = null :: MAP) :: ZONED DATETIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              "A string representing one of the following: 'microsecond', 'millisecond', 'second', 'minute', 'hour', 'day', 'week', 'month', 'weekYear', 'quarter', 'year', 'decade', 'century', 'millennium'.",
            name: 'unit',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description:
              'The date to be truncated using either `ZONED DATETIME`, `LOCAL DATETIME`, or `DATE`.',
            name: 'input',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=MAP}',
            description:
              'A list of time components smaller than those specified in `unit` to preserve during truncation.',
            name: 'fields',
            type: 'MAP',
          },
        ],
        returnDescription: 'ZONED DATETIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'db.nameFromElementId': {
        name: 'db.nameFromElementId',
        category: 'Database',
        description: 'Resolves the database name for the given element id',
        signature: 'db.nameFromElementId(elementId :: STRING) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An element id of a node or relationship.',
            name: 'elementId',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      degrees: {
        name: 'degrees',
        category: 'Trigonometric',
        description: 'Converts radians to degrees.',
        signature: 'degrees(input :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An angle in radians.',
            name: 'input',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      duration: {
        name: 'duration',
        category: 'Temporal',
        description: 'Creates a `DURATION` value.',
        signature: 'duration(input :: ANY) :: DURATION',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              "A map optionally containing the following keys: 'years', 'quarters', 'months', 'weeks', 'days', 'hours', 'minutes', 'seconds', 'milliseconds', 'microseconds', or 'nanoseconds'.",
            name: 'input',
            type: 'ANY',
          },
        ],
        returnDescription: 'DURATION',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'duration.between': {
        name: 'duration.between',
        category: 'Temporal',
        description:
          'Computes the `DURATION` between the `from` instant (inclusive) and the `to` instant (exclusive) in logical units.',
        signature: 'duration.between(from :: ANY, to :: ANY) :: DURATION',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A temporal instant type (`DATE`, `LOCAL TIME`, `ZONED TIME`, `LOCAL DATETIME`, `ZONED DATETIME`) representing the starting instant.',
            name: 'from',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'A temporal instant type (`DATE`, `LOCAL TIME`, `ZONED TIME`, `LOCAL DATETIME`, `ZONED DATETIME`) representing the ending instant.',
            name: 'to',
            type: 'ANY',
          },
        ],
        returnDescription: 'DURATION',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'duration.inDays': {
        name: 'duration.inDays',
        category: 'Temporal',
        description:
          'Computes the `DURATION` between the `from` instant (inclusive) and the `to` instant (exclusive) in days.',
        signature: 'duration.inDays(from :: ANY, to :: ANY) :: DURATION',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A temporal instant type (`DATE`, `LOCAL TIME`, `ZONED TIME`, `LOCAL DATETIME`, `ZONED DATETIME`) representing the starting instant.',
            name: 'from',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'A temporal instant type (`DATE`, `LOCAL TIME`, `ZONED TIME`, `LOCAL DATETIME`, `ZONED DATETIME`) representing the ending instant.',
            name: 'to',
            type: 'ANY',
          },
        ],
        returnDescription: 'DURATION',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'duration.inMonths': {
        name: 'duration.inMonths',
        category: 'Temporal',
        description:
          'Computes the `DURATION` between the `from` instant (inclusive) and the `to` instant (exclusive) in months.',
        signature: 'duration.inMonths(from :: ANY, to :: ANY) :: DURATION',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A temporal instant type (`DATE`, `LOCAL TIME`, `ZONED TIME`, `LOCAL DATETIME`, `ZONED DATETIME`) representing the starting instant.',
            name: 'from',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'A temporal instant type (`DATE`, `LOCAL TIME`, `ZONED TIME`, `LOCAL DATETIME`, `ZONED DATETIME`) representing the ending instant.',
            name: 'to',
            type: 'ANY',
          },
        ],
        returnDescription: 'DURATION',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'duration.inSeconds': {
        name: 'duration.inSeconds',
        category: 'Temporal',
        description:
          'Computes the `DURATION` between the `from` instant (inclusive) and the `to` instant (exclusive) in seconds.',
        signature: 'duration.inSeconds(from :: ANY, to :: ANY) :: DURATION',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A temporal instant type (`DATE`, `LOCAL TIME`, `ZONED TIME`, `LOCAL DATETIME`, `ZONED DATETIME`) representing the starting instant.',
            name: 'from',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'A temporal instant type (`DATE`, `LOCAL TIME`, `ZONED TIME`, `LOCAL DATETIME`, `ZONED DATETIME`) representing the ending instant.',
            name: 'to',
            type: 'ANY',
          },
        ],
        returnDescription: 'DURATION',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      e: {
        name: 'e',
        category: 'Logarithmic',
        description: 'Returns the base of the natural logarithm, e.',
        signature: 'e() :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      elementId: {
        name: 'elementId',
        category: 'Scalar',
        description: 'Returns the element id of a `NODE` or `RELATIONSHIP`.',
        signature: 'elementId(input :: NODE | RELATIONSHIP) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An element id of a node or a relationship.',
            name: 'input',
            type: 'NODE | RELATIONSHIP',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      endNode: {
        name: 'endNode',
        category: 'Scalar',
        description: 'Returns the end `NODE` of a `RELATIONSHIP`.',
        signature: 'endNode(input :: RELATIONSHIP) :: NODE',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A relationship.',
            name: 'input',
            type: 'RELATIONSHIP',
          },
        ],
        returnDescription: 'NODE',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      exists: {
        name: 'exists',
        category: 'Predicate',
        description:
          'Returns true if a match for the pattern exists in the graph.',
        signature: 'exists(input :: ANY) :: BOOLEAN',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A pattern to verify the existence of.',
            name: 'input',
            type: 'ANY',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      exp: {
        name: 'exp',
        category: 'Logarithmic',
        description:
          'Returns e^n, where e is the base of the natural logarithm, and n is the value of the argument expression.',
        signature: 'exp(input :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A value to which the base of the natural logarithm, e, will be raised.',
            name: 'input',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      file: {
        name: 'file',
        category: 'Scalar',
        description:
          'Returns the absolute path of the file that LOAD CSV is using.',
        signature: 'file() :: STRING',
        isBuiltIn: true,
        argumentDescription: [],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      floor: {
        name: 'floor',
        category: 'Numeric',
        description:
          'Returns the largest `FLOAT` that is less than or equal to a number and equal to an `INTEGER`.',
        signature: 'floor(input :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be rounded to the nearest lower integer.',
            name: 'input',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.alpha.linkprediction.adamicAdar': {
        name: 'gds.alpha.linkprediction.adamicAdar',
        category: '',
        description: 'Given two nodes, calculate Adamic Adar similarity',
        signature:
          'gds.alpha.linkprediction.adamicAdar(node1 :: NODE, node2 :: NODE, config = {} :: MAP) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'node1 :: NODE',
            name: 'node1',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'node2 :: NODE',
            name: 'node2',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'config = {} :: MAP',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.alpha.linkprediction.commonNeighbors': {
        name: 'gds.alpha.linkprediction.commonNeighbors',
        category: '',
        description: 'Given two nodes, returns the number of common neighbors',
        signature:
          'gds.alpha.linkprediction.commonNeighbors(node1 :: NODE, node2 :: NODE, config = {} :: MAP) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'node1 :: NODE',
            name: 'node1',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'node2 :: NODE',
            name: 'node2',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'config = {} :: MAP',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.alpha.linkprediction.preferentialAttachment': {
        name: 'gds.alpha.linkprediction.preferentialAttachment',
        category: '',
        description: 'Given two nodes, calculate Preferential Attachment',
        signature:
          'gds.alpha.linkprediction.preferentialAttachment(node1 :: NODE, node2 :: NODE, config = {} :: MAP) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'node1 :: NODE',
            name: 'node1',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'node2 :: NODE',
            name: 'node2',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'config = {} :: MAP',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.alpha.linkprediction.resourceAllocation': {
        name: 'gds.alpha.linkprediction.resourceAllocation',
        category: '',
        description:
          'Given two nodes, calculate Resource Allocation similarity',
        signature:
          'gds.alpha.linkprediction.resourceAllocation(node1 :: NODE, node2 :: NODE, config = {} :: MAP) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'node1 :: NODE',
            name: 'node1',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'node2 :: NODE',
            name: 'node2',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'config = {} :: MAP',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.alpha.linkprediction.sameCommunity': {
        name: 'gds.alpha.linkprediction.sameCommunity',
        category: '',
        description:
          'Given two nodes, indicates if they have the same community',
        signature:
          'gds.alpha.linkprediction.sameCommunity(node1 :: NODE, node2 :: NODE, communityProperty = community :: STRING) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'node1 :: NODE',
            name: 'node1',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'node2 :: NODE',
            name: 'node2',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=community, type=STRING}',
            description: 'communityProperty = community :: STRING',
            name: 'communityProperty',
            type: 'STRING',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.alpha.linkprediction.totalNeighbors': {
        name: 'gds.alpha.linkprediction.totalNeighbors',
        category: '',
        description: 'Given two nodes, calculate Total Neighbors',
        signature:
          'gds.alpha.linkprediction.totalNeighbors(node1 :: NODE, node2 :: NODE, config = {} :: MAP) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'node1 :: NODE',
            name: 'node1',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'node2 :: NODE',
            name: 'node2',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'config = {} :: MAP',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.alpha.ml.oneHotEncoding': {
        name: 'gds.alpha.ml.oneHotEncoding',
        category: '',
        description:
          'RETURN gds.alpha.ml.oneHotEncoding(availableValues, selectedValues) - return a list of selected values in a one hot encoding format.',
        signature:
          'gds.alpha.ml.oneHotEncoding(availableValues :: LIST<ANY>, selectedValues :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'availableValues :: LIST<ANY>',
            name: 'availableValues',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'selectedValues :: LIST<ANY>',
            name: 'selectedValues',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.graph.exists': {
        name: 'gds.graph.exists',
        category: '',
        description: 'Checks if a graph exists in the catalog.',
        signature: 'gds.graph.exists(graphName :: STRING) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.graph.project': {
        name: 'gds.graph.project',
        category: '',
        description:
          'Creates a named graph in the catalog for use by algorithms.',
        signature:
          'gds.graph.project(graphName :: STRING, sourceNode :: ANY, targetNode = null :: ANY, dataConfig = null :: ANY, configuration = null :: ANY, alphaMigrationConfig = null :: ANY) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'sourceNode :: ANY',
            name: 'sourceNode',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=ANY}',
            description: 'targetNode = null :: ANY',
            name: 'targetNode',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=ANY}',
            description: 'dataConfig = null :: ANY',
            name: 'dataConfig',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=ANY}',
            description: 'configuration = null :: ANY',
            name: 'configuration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=ANY}',
            description: 'alphaMigrationConfig = null :: ANY',
            name: 'alphaMigrationConfig',
            type: 'ANY',
          },
        ],
        returnDescription: 'MAP',
        aggregating: true,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.isLicensed': {
        name: 'gds.isLicensed',
        category: '',
        description:
          'RETURN gds.isLicensed - Return if GDS is licensed. For more details use the procedure gds.license.state.',
        signature: 'gds.isLicensed() :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.similarity.cosine': {
        name: 'gds.similarity.cosine',
        category: '',
        description:
          'RETURN gds.similarity.cosine(vector1, vector2) - Given two collection vectors, calculate cosine similarity',
        signature:
          'gds.similarity.cosine(vector1 :: LIST<INTEGER | FLOAT>, vector2 :: LIST<INTEGER | FLOAT>) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'vector1 :: LIST<INTEGER | FLOAT>',
            name: 'vector1',
            type: 'LIST<INTEGER | FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'vector2 :: LIST<INTEGER | FLOAT>',
            name: 'vector2',
            type: 'LIST<INTEGER | FLOAT>',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.similarity.euclidean': {
        name: 'gds.similarity.euclidean',
        category: '',
        description:
          'RETURN gds.similarity.euclidean(vector1, vector2) - Given two collection vectors, calculate similarity based on euclidean distance',
        signature:
          'gds.similarity.euclidean(vector1 :: LIST<INTEGER | FLOAT>, vector2 :: LIST<INTEGER | FLOAT>) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'vector1 :: LIST<INTEGER | FLOAT>',
            name: 'vector1',
            type: 'LIST<INTEGER | FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'vector2 :: LIST<INTEGER | FLOAT>',
            name: 'vector2',
            type: 'LIST<INTEGER | FLOAT>',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.similarity.euclideanDistance': {
        name: 'gds.similarity.euclideanDistance',
        category: '',
        description:
          'RETURN gds.similarity.euclideanDistance(vector1, vector2) - Given two collection vectors, calculate the euclidean distance (square root of the sum of the squared differences)',
        signature:
          'gds.similarity.euclideanDistance(vector1 :: LIST<INTEGER | FLOAT>, vector2 :: LIST<INTEGER | FLOAT>) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'vector1 :: LIST<INTEGER | FLOAT>',
            name: 'vector1',
            type: 'LIST<INTEGER | FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'vector2 :: LIST<INTEGER | FLOAT>',
            name: 'vector2',
            type: 'LIST<INTEGER | FLOAT>',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.similarity.jaccard': {
        name: 'gds.similarity.jaccard',
        category: '',
        description:
          'RETURN gds.similarity.jaccard(vector1, vector2) - Given two collection vectors, calculate Jaccard similarity',
        signature:
          'gds.similarity.jaccard(vector1 :: LIST<INTEGER | FLOAT>, vector2 :: LIST<INTEGER | FLOAT>) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'vector1 :: LIST<INTEGER | FLOAT>',
            name: 'vector1',
            type: 'LIST<INTEGER | FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'vector2 :: LIST<INTEGER | FLOAT>',
            name: 'vector2',
            type: 'LIST<INTEGER | FLOAT>',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.similarity.overlap': {
        name: 'gds.similarity.overlap',
        category: '',
        description:
          'RETURN gds.similarity.overlap(vector1, vector2) - Given two collection vectors, calculate overlap similarity',
        signature:
          'gds.similarity.overlap(vector1 :: LIST<INTEGER | FLOAT>, vector2 :: LIST<INTEGER | FLOAT>) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'vector1 :: LIST<INTEGER | FLOAT>',
            name: 'vector1',
            type: 'LIST<INTEGER | FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'vector2 :: LIST<INTEGER | FLOAT>',
            name: 'vector2',
            type: 'LIST<INTEGER | FLOAT>',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.similarity.pearson': {
        name: 'gds.similarity.pearson',
        category: '',
        description:
          'RETURN gds.similarity.pearson(vector1, vector2) - Given two collection vectors, calculate pearson similarity',
        signature:
          'gds.similarity.pearson(vector1 :: LIST<INTEGER | FLOAT>, vector2 :: LIST<INTEGER | FLOAT>) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'vector1 :: LIST<INTEGER | FLOAT>',
            name: 'vector1',
            type: 'LIST<INTEGER | FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'vector2 :: LIST<INTEGER | FLOAT>',
            name: 'vector2',
            type: 'LIST<INTEGER | FLOAT>',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.util.NaN': {
        name: 'gds.util.NaN',
        category: '',
        description: 'RETURN gds.util.NaN() - Returns NaN as a Cypher value.',
        signature: 'gds.util.NaN() :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.util.asNode': {
        name: 'gds.util.asNode',
        category: '',
        description:
          'RETURN gds.util.asNode(nodeId) - Return the node objects for the given node id or null if none exists.',
        signature: 'gds.util.asNode(nodeId :: INTEGER | FLOAT) :: NODE',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER | FLOAT',
            name: 'nodeId',
            type: 'INTEGER | FLOAT',
          },
        ],
        returnDescription: 'NODE',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.util.asNodes': {
        name: 'gds.util.asNodes',
        category: '',
        description:
          'RETURN gds.util.asNodes(nodeIds) - Return the node objects for the given node ids or an empty list if none exists.',
        signature:
          'gds.util.asNodes(nodeIds :: LIST<INTEGER | FLOAT>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'nodeIds :: LIST<INTEGER | FLOAT>',
            name: 'nodeIds',
            type: 'LIST<INTEGER | FLOAT>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.util.infinity': {
        name: 'gds.util.infinity',
        category: '',
        description:
          'RETURN gds.util.infinity() - Return infinity as a Cypher value.',
        signature: 'gds.util.infinity() :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.util.isFinite': {
        name: 'gds.util.isFinite',
        category: '',
        description:
          'RETURN gds.util.isFinite(value) - Return true iff the given argument is a finite value (not ±Infinity, NaN, or null).',
        signature: 'gds.util.isFinite(value :: INTEGER | FLOAT) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'value :: INTEGER | FLOAT',
            name: 'value',
            type: 'INTEGER | FLOAT',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.util.isInfinite': {
        name: 'gds.util.isInfinite',
        category: '',
        description:
          'RETURN gds.util.isInfinite(value) - Return true iff the given argument is not a finite value (not ±Infinity, NaN, or null).',
        signature: 'gds.util.isInfinite(value :: INTEGER | FLOAT) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'value :: INTEGER | FLOAT',
            name: 'value',
            type: 'INTEGER | FLOAT',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.util.nodeProperty': {
        name: 'gds.util.nodeProperty',
        category: '',
        description:
          'Returns a node property value from a named in-memory graph.',
        signature:
          'gds.util.nodeProperty(graphName :: STRING, nodeId :: ANY, propertyKey :: STRING, nodeLabel = * :: STRING) :: ANY',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeId :: ANY',
            name: 'nodeId',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'propertyKey :: STRING',
            name: 'propertyKey',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=*, type=STRING}',
            description: 'nodeLabel = * :: STRING',
            name: 'nodeLabel',
            type: 'STRING',
          },
        ],
        returnDescription: 'ANY',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.version': {
        name: 'gds.version',
        category: '',
        description:
          'RETURN gds.version() | Return the installed graph data science library version.',
        signature: 'gds.version() :: STRING',
        isBuiltIn: false,
        argumentDescription: [],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'graph.byElementId': {
        name: 'graph.byElementId',
        category: 'Graph',
        description:
          'Returns the graph reference with the given element id. It is only supported in the `USE` clause, on composite databases.',
        signature: 'graph.byElementId(elementId :: STRING) :: GRAPH',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An element id of a node or relationship.',
            name: 'elementId',
            type: 'STRING',
          },
        ],
        returnDescription: 'GRAPH',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'graph.byName': {
        name: 'graph.byName',
        category: 'Graph',
        description:
          'Returns the graph reference of the given name. It is only supported in the `USE` clause, on composite databases.',
        signature: 'graph.byName(name :: STRING) :: GRAPH',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the graph to be resolved.',
            name: 'name',
            type: 'STRING',
          },
        ],
        returnDescription: 'GRAPH',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'graph.names': {
        name: 'graph.names',
        category: 'Graph',
        description: 'Lists the names of graphs in the current database.',
        signature: 'graph.names() :: LIST<STRING>',
        isBuiltIn: true,
        argumentDescription: [],
        returnDescription: 'LIST<STRING>',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'graph.propertiesByName': {
        name: 'graph.propertiesByName',
        category: 'Graph',
        description: 'Returns the `MAP` of properties associated with a graph.',
        signature: 'graph.propertiesByName(graphName :: STRING) :: MAP',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The name of the graph from which all associated properties will be returned.',
            name: 'graphName',
            type: 'STRING',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      haversin: {
        name: 'haversin',
        category: 'Trigonometric',
        description: 'Returns half the versine of a number.',
        signature: 'haversin(input :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An angle in radians.',
            name: 'input',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      head: {
        name: 'head',
        category: 'Scalar',
        description: 'Returns the first element in a `LIST<ANY>`.',
        signature: 'head(list :: LIST<ANY>) :: ANY',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A list from which the first element will be returned.',
            name: 'list',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'ANY',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      id: {
        name: 'id',
        category: 'Scalar',
        description: 'Returns the id of a `NODE` or `RELATIONSHIP`.',
        signature: 'id(input :: NODE | RELATIONSHIP) :: INTEGER',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A node or a relationship.',
            name: 'input',
            type: 'NODE | RELATIONSHIP',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: true,
        deprecatedBy: null,
      },
      isEmpty: {
        name: 'isEmpty',
        category: 'Predicate',
        description:
          'Checks whether a `STRING`, `MAP` or `LIST<ANY>` is empty.',
        signature: 'isEmpty(input :: STRING | MAP | LIST<ANY>) :: BOOLEAN',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be checked for emptiness.',
            name: 'input',
            type: 'STRING | MAP | LIST<ANY>',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      isNaN: {
        name: 'isNaN',
        category: 'Numeric',
        description: 'Returns whether the given `INTEGER` or `FLOAT` is NaN.',
        signature: 'isNaN(input :: INTEGER | FLOAT) :: BOOLEAN',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A numeric value to be compared against `NaN`.',
            name: 'input',
            type: 'INTEGER | FLOAT',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      keys: {
        name: 'keys',
        category: 'List',
        description:
          'Returns a `LIST<STRING>` containing the `STRING` representations for all the property names of a `NODE`, `RELATIONSHIP` or `MAP`.',
        signature: 'keys(input :: NODE | RELATIONSHIP | MAP) :: LIST<STRING>',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A node or relationship from which the names of all properties will be returned.',
            name: 'input',
            type: 'NODE | RELATIONSHIP | MAP',
          },
        ],
        returnDescription: 'LIST<STRING>',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      labels: {
        name: 'labels',
        category: 'List',
        description:
          'Returns a `LIST<STRING>` containing the `STRING` representations for all the labels of a `NODE`.',
        signature: 'labels(input :: NODE) :: LIST<STRING>',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A node whose labels will be returned.',
            name: 'input',
            type: 'NODE',
          },
        ],
        returnDescription: 'LIST<STRING>',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      last: {
        name: 'last',
        category: 'Scalar',
        description: 'Returns the last element in a `LIST<ANY>`.',
        signature: 'last(list :: LIST<ANY>) :: ANY',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A list from which the last element will be returned.',
            name: 'list',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'ANY',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      left: {
        name: 'left',
        category: 'String',
        description:
          'Returns a `STRING` containing the specified number (`INTEGER`) of leftmost characters in the given `STRING`.',
        signature: 'left(original :: STRING, length :: INTEGER) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A string value whose rightmost characters will be trimmed.',
            name: 'original',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The length of the leftmost characters to be returned.',
            name: 'length',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      length: {
        name: 'length',
        category: 'Scalar',
        description: 'Returns the length of a `PATH`.',
        signature: 'length(input :: PATH) :: INTEGER',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A path whose relationships will be counted.',
            name: 'input',
            type: 'PATH',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      linenumber: {
        name: 'linenumber',
        category: 'Scalar',
        description:
          'Returns the line number that LOAD CSV is currently using.',
        signature: 'linenumber() :: INTEGER',
        isBuiltIn: true,
        argumentDescription: [],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      localdatetime: {
        name: 'localdatetime',
        category: 'Temporal',
        description: 'Creates a `LOCAL DATETIME` instant.',
        signature:
          'localdatetime(input = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: LOCAL DATETIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description:
              "Either a string representation of a temporal value, a map containing the single key 'timezone', or a map containing temporal values ('year', 'month', 'day', 'hour', 'minute', 'second', 'millisecond', 'microsecond', 'nanosecond') as components.",
            name: 'input',
            type: 'ANY',
          },
        ],
        returnDescription: 'LOCAL DATETIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'localdatetime.realtime': {
        name: 'localdatetime.realtime',
        category: 'Temporal',
        description:
          'Returns the current `LOCAL DATETIME` instant using the realtime clock.',
        signature:
          'localdatetime.realtime(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: LOCAL DATETIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description: 'A string value representing a time zone.',
            name: 'timezone',
            type: 'ANY',
          },
        ],
        returnDescription: 'LOCAL DATETIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'localdatetime.statement': {
        name: 'localdatetime.statement',
        category: 'Temporal',
        description:
          'Returns the current `LOCAL DATETIME` instant using the statement clock.',
        signature:
          'localdatetime.statement(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: LOCAL DATETIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description: 'A string value representing a time zone.',
            name: 'timezone',
            type: 'ANY',
          },
        ],
        returnDescription: 'LOCAL DATETIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'localdatetime.transaction': {
        name: 'localdatetime.transaction',
        category: 'Temporal',
        description:
          'Returns the current `LOCAL DATETIME` instant using the transaction clock.',
        signature:
          'localdatetime.transaction(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: LOCAL DATETIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description: 'A string value representing a time zone.',
            name: 'timezone',
            type: 'ANY',
          },
        ],
        returnDescription: 'LOCAL DATETIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'localdatetime.truncate': {
        name: 'localdatetime.truncate',
        category: 'Temporal',
        description:
          'Truncates the given temporal value to a `LOCAL DATETIME` instant using the specified unit.',
        signature:
          'localdatetime.truncate(unit :: STRING, input = DEFAULT_TEMPORAL_ARGUMENT :: ANY, fields = null :: MAP) :: LOCAL DATETIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              "A string representing one of the following: 'microsecond', 'millisecond', 'second', 'minute', 'hour', 'day', 'week', 'month', 'weekYear', 'quarter', 'year', 'decade', 'century', 'millennium'.",
            name: 'unit',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description:
              'The date to be truncated using either `ZONED DATETIME`, `LOCAL DATETIME`, or `DATE`.',
            name: 'input',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=MAP}',
            description:
              'A list of time components smaller than those specified in `unit` to preserve during truncation.',
            name: 'fields',
            type: 'MAP',
          },
        ],
        returnDescription: 'LOCAL DATETIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      localtime: {
        name: 'localtime',
        category: 'Temporal',
        description: 'Creates a `LOCAL TIME` instant.',
        signature:
          'localtime(input = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: LOCAL TIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description:
              "Either a string representation of a temporal value, a map containing the single key 'timezone', or a map containing temporal values ('hour, 'minute', 'second', 'millisecond', 'microsecond', 'nanosecond' as components.",
            name: 'input',
            type: 'ANY',
          },
        ],
        returnDescription: 'LOCAL TIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'localtime.realtime': {
        name: 'localtime.realtime',
        category: 'Temporal',
        description:
          'Returns the current `LOCAL TIME` instant using the realtime clock.',
        signature:
          'localtime.realtime(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: LOCAL TIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description: 'A string value representing a time zone.',
            name: 'timezone',
            type: 'ANY',
          },
        ],
        returnDescription: 'LOCAL TIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'localtime.statement': {
        name: 'localtime.statement',
        category: 'Temporal',
        description:
          'Returns the current `LOCAL TIME` instant using the statement clock.',
        signature:
          'localtime.statement(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: LOCAL TIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description: 'A string value representing a time zone.',
            name: 'timezone',
            type: 'ANY',
          },
        ],
        returnDescription: 'LOCAL TIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'localtime.transaction': {
        name: 'localtime.transaction',
        category: 'Temporal',
        description:
          'Returns the current `LOCAL TIME` instant using the transaction clock.',
        signature:
          'localtime.transaction(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: LOCAL TIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description: 'A string value representing a time zone.',
            name: 'timezone',
            type: 'ANY',
          },
        ],
        returnDescription: 'LOCAL TIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'localtime.truncate': {
        name: 'localtime.truncate',
        category: 'Temporal',
        description:
          'Truncates the given temporal value to a `LOCAL TIME` instant using the specified unit.',
        signature:
          'localtime.truncate(unit :: STRING, input = DEFAULT_TEMPORAL_ARGUMENT :: ANY, fields = null :: MAP) :: LOCAL TIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              "A string representing one of the following: 'day', 'week', 'month', 'weekYear', 'quarter', 'year', 'decade', 'century', 'millennium'.",
            name: 'unit',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description:
              'The date to be truncated using either `ZONED DATETIME`, `LOCAL DATETIME`, `LOCAL TIME`, or `DATE`.',
            name: 'input',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=MAP}',
            description:
              'A list of time components smaller than those specified in `unit` to preserve during truncation.',
            name: 'fields',
            type: 'MAP',
          },
        ],
        returnDescription: 'LOCAL TIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      log: {
        name: 'log',
        category: 'Logarithmic',
        description: 'Returns the natural logarithm of a `FLOAT`.',
        signature: 'log(input :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A value for which the natural logarithm will be returned.',
            name: 'input',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      log10: {
        name: 'log10',
        category: 'Logarithmic',
        description: 'Returns the common logarithm (base 10) of a `FLOAT`.',
        signature: 'log10(input :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A value for which the common logarithm (base 10) will be returned.',
            name: 'input',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      lower: {
        name: 'lower',
        category: 'String',
        description: 'Returns the given `STRING` in lowercase.',
        signature: 'lower(input :: STRING) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A string to be converted into lowercase.',
            name: 'input',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      ltrim: {
        name: 'ltrim',
        category: 'String',
        description:
          'Returns the given `STRING` with leading `trimCharacterString` characters removed.',
        signature:
          'ltrim(input :: STRING, trimCharacterString :: STRING) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A value from which the leading trim character will be removed.',
            name: 'input',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'A character to be removed from the start of the given string.',
            name: 'trimCharacterString',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      max: {
        name: 'max',
        category: 'Aggregating',
        description: 'Returns the maximum value in a set of values.',
        signature: 'max(input :: ANY) :: ANY',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be aggregated.',
            name: 'input',
            type: 'ANY',
          },
        ],
        returnDescription: 'ANY',
        aggregating: true,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      min: {
        name: 'min',
        category: 'Aggregating',
        description: 'Returns the minimum value in a set of values.',
        signature: 'min(input :: ANY) :: ANY',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be aggregated.',
            name: 'input',
            type: 'ANY',
          },
        ],
        returnDescription: 'ANY',
        aggregating: true,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      nodes: {
        name: 'nodes',
        category: 'List',
        description:
          'Returns a `LIST<NODE>` containing all the `NODE` values in a `PATH`.',
        signature: 'nodes(input :: PATH) :: LIST<NODE>',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A path whose nodes will be returned.',
            name: 'input',
            type: 'PATH',
          },
        ],
        returnDescription: 'LIST<NODE>',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      none: {
        name: 'none',
        category: 'Predicate',
        description:
          'Returns true if the predicate holds for no element in the given `LIST<ANY>`.',
        signature:
          'none(variable :: VARIABLE IN list :: LIST<ANY> WHERE predicate :: ANY) :: BOOLEAN',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A variable that can be used within the `WHERE` clause.',
            name: 'variable',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'A list for the predicate to check against.',
            name: 'list',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      normalize: {
        name: 'normalize',
        category: 'String',
        description:
          'Normalize a `STRING`. The `STRING` will be normalized according to the specified normalization form.',
        signature:
          'normalize(input :: STRING, normalForm = NFC :: [NFC, NFD, NFKC, NFKD]) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be normalized.',
            name: 'input',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'A keyword specifying any of the normal forms; NFC, NFD, NFKC or NFKD.',
            name: 'normalForm',
            type: '[NFC, NFD, NFKC, NFKD]',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      nullIf: {
        name: 'nullIf',
        category: 'Scalar',
        description:
          'Returns null if the two given parameters are equivalent, otherwise returns the value of the first parameter.',
        signature: 'nullIf(v1 :: ANY, v2 :: ANY) :: ANY',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A first value to be returned if the second value is not equivalent.',
            name: 'v1',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'A second value against which the first value is compared.',
            name: 'v2',
            type: 'ANY',
          },
        ],
        returnDescription: 'ANY',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      percentileCont: {
        name: 'percentileCont',
        category: 'Aggregating',
        description:
          'Returns the percentile of a value over a group using linear interpolation.',
        signature:
          'percentileCont(input :: FLOAT, percentile :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be aggregated.',
            name: 'input',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'A percentile between 0.0 and 1.0.',
            name: 'percentile',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: true,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      percentileDisc: {
        name: 'percentileDisc',
        category: 'Aggregating',
        description:
          'Returns the nearest `INTEGER` or `FLOAT` value to the given percentile over a group using a rounding method.',
        signature:
          'percentileDisc(input :: INTEGER | FLOAT, percentile :: FLOAT) :: INTEGER | FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be aggregated.',
            name: 'input',
            type: 'INTEGER | FLOAT',
          },
          {
            isDeprecated: false,
            description: 'A percentile between 0.0 and 1.0.',
            name: 'percentile',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'INTEGER | FLOAT',
        aggregating: true,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      pi: {
        name: 'pi',
        category: 'Trigonometric',
        description: 'Returns the mathematical constant pi.',
        signature: 'pi() :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      point: {
        name: 'point',
        category: 'Spatial',
        description:
          'Returns a 2D or 3D point object, given two or respectively three coordinate values in the Cartesian coordinate system or WGS 84 geographic coordinate system.',
        signature: 'point(input :: MAP) :: POINT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'Cartesian 2D: {x :: FLOAT, y :: FLOAT, crs = "cartesian" :: STRING, srid = 7203 :: INTEGER}\n\nCartesian 3D: {x :: FLOAT, y :: FLOAT, z :: FLOAT, crs = "cartesian-3D" :: STRING, srid = 9157 :: INTEGER} \n\nWGS 84 2D: {longitude | x :: FLOAT, latitude | y :: FLOAT, crs = "WGS-84-2D" :: STRING, srid = 4326 :: INTEGER}\n\nWGS 84 3D: {longitude | x :: FLOAT, latitude | y :: FLOAT, height | z :: FLOAT, crs = "WGS-84-3D" :: STRING, srid = 4979 :: INTEGER}',
            name: 'input',
            type: 'MAP',
          },
        ],
        returnDescription: 'POINT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'point.distance': {
        name: 'point.distance',
        category: 'Spatial',
        description:
          'Returns a `FLOAT` representing the distance between any two points in the same CRS. If the points are in the WGS 84 CRS, the function returns the geodesic distance (i.e., the shortest path along the curved surface of the Earth). If the points are in a Cartesian CRS, the function returns the Euclidean distance (i.e., the shortest straight-line distance in a flat, planar space).',
        signature: 'point.distance(from :: POINT, to :: POINT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A start point.',
            name: 'from',
            type: 'POINT',
          },
          {
            isDeprecated: false,
            description: 'An end point in the same CRS as the start point.',
            name: 'to',
            type: 'POINT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'point.withinBBox': {
        name: 'point.withinBBox',
        category: 'Spatial',
        description:
          'Returns true if the provided point is within the bounding box defined by the two provided points.',
        signature:
          'point.withinBBox(point :: POINT, lowerLeft :: POINT, upperRight :: POINT) :: BOOLEAN',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A point to be confirmed in the bounding box.',
            name: 'point',
            type: 'POINT',
          },
          {
            isDeprecated: false,
            description: 'The lower left side point of the bounding box.',
            name: 'lowerLeft',
            type: 'POINT',
          },
          {
            isDeprecated: false,
            description: 'The upper right side point of the bounding box.',
            name: 'upperRight',
            type: 'POINT',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      properties: {
        name: 'properties',
        category: 'Scalar',
        description:
          'Returns a `MAP` containing all the properties of a `NODE`, `RELATIONSHIP` or `MAP`.',
        signature: 'properties(input :: NODE | RELATIONSHIP | MAP) :: MAP',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An entity to return the properties from.',
            name: 'input',
            type: 'NODE | RELATIONSHIP | MAP',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      radians: {
        name: 'radians',
        category: 'Trigonometric',
        description: 'Converts degrees to radians.',
        signature: 'radians(input :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An angle in degrees.',
            name: 'input',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      rand: {
        name: 'rand',
        category: 'Numeric',
        description:
          'Returns a random `FLOAT` in the range from 0 (inclusive) to 1 (exclusive).',
        signature: 'rand() :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      randomUUID: {
        name: 'randomUUID',
        category: 'Scalar',
        description: 'Generates a random UUID.',
        signature: 'randomUUID() :: STRING',
        isBuiltIn: true,
        argumentDescription: [],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      range: {
        name: 'range',
        category: 'List',
        description:
          'Returns a `LIST<INTEGER>` comprising all `INTEGER` values within a specified range created with step length.',
        signature:
          'range(start :: INTEGER, end :: INTEGER, step :: INTEGER) :: LIST<INTEGER>',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The start value of the range.',
            name: 'start',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The end value of the range.',
            name: 'end',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the increment (default value: 1).',
            name: 'step',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'LIST<INTEGER>',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      reduce: {
        name: 'reduce',
        category: 'List',
        description:
          'Runs an expression against individual elements of a `LIST<ANY>`, storing the result of the expression in an accumulator.',
        signature:
          'reduce(accumulator :: VARIABLE = initial :: ANY, variable :: VARIABLE IN list :: LIST<ANY> | expression :: ANY) :: ANY',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A variable that holds the result as the list is iterated.',
            name: 'accumulator',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'A variable that can be used within the reducing expression.',
            name: 'variable',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'ANY',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      relationships: {
        name: 'relationships',
        category: 'List',
        description:
          'Returns a `LIST<RELATIONSHIP>` containing all the `RELATIONSHIP` values in a `PATH`.',
        signature: 'relationships(input :: PATH) :: LIST<RELATIONSHIP>',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The path from which all relationships will be returned.',
            name: 'input',
            type: 'PATH',
          },
        ],
        returnDescription: 'LIST<RELATIONSHIP>',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      replace: {
        name: 'replace',
        category: 'String',
        description:
          'Returns a `STRING` in which all occurrences of a specified search `STRING` in the given `STRING` have been replaced by another (specified) replacement `STRING`.',
        signature:
          'replace(original :: STRING, search :: STRING, replace :: STRING) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to be modified.',
            name: 'original',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The value to replace in the original string.',
            name: 'search',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The value to be inserted in the original string.',
            name: 'replace',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      reverse: {
        name: 'reverse',
        category: 'String',
        description:
          'Returns a `STRING` or `LIST<ANY>` in which the order of all characters or elements in the given `STRING` or `LIST<ANY>` have been reversed.',
        signature: 'reverse(input :: STRING | LIST<ANY>) :: STRING | LIST<ANY>',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string or list to be reversed.',
            name: 'input',
            type: 'STRING | LIST<ANY>',
          },
        ],
        returnDescription: 'STRING | LIST<ANY>',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      right: {
        name: 'right',
        category: 'String',
        description:
          'Returns a `STRING` containing the specified number of rightmost characters in the given `STRING`.',
        signature: 'right(original :: STRING, length :: INTEGER) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A string value whose leftmost characters will be trimmed.',
            name: 'original',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The length of the rightmost characters to be returned.',
            name: 'length',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      round: {
        name: 'round',
        category: 'Numeric',
        description:
          'Returns the value of a number rounded to the specified precision with the specified rounding mode.',
        signature:
          'round(value :: FLOAT, precision :: INTEGER | FLOAT, mode :: STRING) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be rounded.',
            name: 'value',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'The rounding precision.',
            name: 'precision',
            type: 'INTEGER | FLOAT',
          },
          {
            isDeprecated: false,
            description:
              'A precision rounding mode (`UP`, `DOWN`, `CEILING`, `FLOOR`, `HALF_UP`, `HALF_DOWN`, `HALF_EVEN`).',
            name: 'mode',
            type: 'STRING',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      rtrim: {
        name: 'rtrim',
        category: 'String',
        description:
          'Returns the given `STRING` with trailing `trimCharacterString` characters removed.',
        signature:
          'rtrim(input :: STRING, trimCharacterString :: STRING) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A value from which the leading and trailing trim character will be removed.',
            name: 'input',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'A character to be removed from the start and end of the given string.',
            name: 'trimCharacterString',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      sign: {
        name: 'sign',
        category: 'Numeric',
        description:
          'Returns the signum of an `INTEGER` or `FLOAT`: 0 if the number is 0, -1 for any negative number, and 1 for any positive number.',
        signature: 'sign(input :: INTEGER | FLOAT) :: INTEGER',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A positive or negative number.',
            name: 'input',
            type: 'INTEGER | FLOAT',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      sin: {
        name: 'sin',
        category: 'Trigonometric',
        description: 'Returns the sine of a `FLOAT`.',
        signature: 'sin(input :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An angle in radians.',
            name: 'input',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      single: {
        name: 'single',
        category: 'Predicate',
        description:
          'Returns true if the predicate holds for exactly one of the elements in the given `LIST<ANY>`.',
        signature:
          'single(variable :: VARIABLE IN list :: LIST<ANY> WHERE predicate :: ANY) :: BOOLEAN',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A variable that can be used within the `WHERE` clause.',
            name: 'variable',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'A list for the predicate to check against.',
            name: 'list',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      size: {
        name: 'size',
        category: 'Scalar',
        description:
          'Returns the number of items in a `LIST<ANY>` or the number of Unicode characters in a `STRING`.',
        signature: 'size(input :: STRING | LIST<ANY>) :: INTEGER',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value whose length is to be calculated.',
            name: 'input',
            type: 'STRING | LIST<ANY>',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      split: {
        name: 'split',
        category: 'String',
        description:
          'Returns a `LIST<STRING>` resulting from the splitting of the given `STRING` around matches of the given delimiter(s).',
        signature:
          'split(original :: STRING, splitDelimiters :: STRING | LIST<STRING>) :: LIST<STRING>',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to be split.',
            name: 'original',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The string with which to split the original string.',
            name: 'splitDelimiters',
            type: 'STRING | LIST<STRING>',
          },
        ],
        returnDescription: 'LIST<STRING>',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      sqrt: {
        name: 'sqrt',
        category: 'Logarithmic',
        description: 'Returns the square root of a `FLOAT`.',
        signature: 'sqrt(input :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The value to calculate the square root of.',
            name: 'input',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      startNode: {
        name: 'startNode',
        category: 'Scalar',
        description: 'Returns the start `NODE` of a `RELATIONSHIP`.',
        signature: 'startNode(input :: RELATIONSHIP) :: NODE',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A relationship.',
            name: 'input',
            type: 'RELATIONSHIP',
          },
        ],
        returnDescription: 'NODE',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      stdev: {
        name: 'stdev',
        category: 'Aggregating',
        description:
          'Returns the standard deviation for the given value over a group for a sample of a population.',
        signature: 'stdev(input :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The value to calculate the standard deviation of.',
            name: 'input',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: true,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      stdevp: {
        name: 'stdevp',
        category: 'Aggregating',
        description:
          'Returns the standard deviation for the given value over a group for an entire population.',
        signature: 'stdevp(input :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The value to calculate the population standard deviation of.',
            name: 'input',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: true,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      substring: {
        name: 'substring',
        category: 'String',
        description:
          'Returns a substring of a given `length` from the given `STRING`, beginning with a 0-based index start.',
        signature:
          'substring(original :: STRING, start :: INTEGER, length :: INTEGER) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to be shortened.',
            name: 'original',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The start position of the new string.',
            name: 'start',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The length of the new string.',
            name: 'length',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      sum: {
        name: 'sum',
        category: 'Aggregating',
        description:
          'Returns the sum of a set of `INTEGER`, `FLOAT` or `DURATION` values',
        signature:
          'sum(input :: INTEGER | FLOAT | DURATION) :: INTEGER | FLOAT | DURATION',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be aggregated.',
            name: 'input',
            type: 'INTEGER | FLOAT | DURATION',
          },
        ],
        returnDescription: 'INTEGER | FLOAT | DURATION',
        aggregating: true,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      tail: {
        name: 'tail',
        category: 'List',
        description: 'Returns all but the first element in a `LIST<ANY>`.',
        signature: 'tail(input :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A list from which all but the first element will be returned.',
            name: 'input',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      tan: {
        name: 'tan',
        category: 'Trigonometric',
        description: 'Returns the tangent of a `FLOAT`.',
        signature: 'tan(input :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An angle in radians.',
            name: 'input',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      time: {
        name: 'time',
        category: 'Temporal',
        description: 'Creates a `ZONED TIME` instant.',
        signature:
          'time(input = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: ZONED TIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description:
              "Either a string representation of a temporal value, a map containing the single key 'timezone', or a map containing temporal values ('hour', 'minute', 'second', 'millisecond', 'microsecond', 'nanosecond', 'timezone') as components.",
            name: 'input',
            type: 'ANY',
          },
        ],
        returnDescription: 'ZONED TIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'time.realtime': {
        name: 'time.realtime',
        category: 'Temporal',
        description:
          'Returns the current `ZONED TIME` instant using the realtime clock.',
        signature:
          'time.realtime(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: ZONED TIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description: 'A string value representing a time zone.',
            name: 'timezone',
            type: 'ANY',
          },
        ],
        returnDescription: 'ZONED TIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'time.statement': {
        name: 'time.statement',
        category: 'Temporal',
        description:
          'Returns the current `ZONED TIME` instant using the statement clock.',
        signature:
          'time.statement(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: ZONED TIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description: 'A string value representing a time zone.',
            name: 'timezone',
            type: 'ANY',
          },
        ],
        returnDescription: 'ZONED TIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'time.transaction': {
        name: 'time.transaction',
        category: 'Temporal',
        description:
          'Returns the current `ZONED TIME` instant using the transaction clock.',
        signature:
          'time.transaction(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: ZONED TIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description: 'A string value representing a time zone.',
            name: 'timezone',
            type: 'ANY',
          },
        ],
        returnDescription: 'ZONED TIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'time.truncate': {
        name: 'time.truncate',
        category: 'Temporal',
        description:
          'Truncates the given temporal value to a `ZONED TIME` instant using the specified unit.',
        signature:
          'time.truncate(unit :: STRING, input = DEFAULT_TEMPORAL_ARGUMENT :: ANY, fields = null :: MAP) :: ZONED TIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              "A string representing one of the following: 'microsecond', 'millisecond', 'second', 'minute', 'hour', 'day'.",
            name: 'unit',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description:
              'The date to be truncated using either `ZONED DATETIME`, `LOCAL DATETIME`, `ZONED TIME`, or `LOCAL TIME`.',
            name: 'input',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=MAP}',
            description:
              'A list of time components smaller than those specified in `unit` to preserve during truncation.',
            name: 'fields',
            type: 'MAP',
          },
        ],
        returnDescription: 'ZONED TIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      timestamp: {
        name: 'timestamp',
        category: 'Scalar',
        description:
          'Returns the difference, measured in milliseconds, between the current time and midnight, January 1, 1970 UTC',
        signature: 'timestamp() :: INTEGER',
        isBuiltIn: true,
        argumentDescription: [],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      toBoolean: {
        name: 'toBoolean',
        category: 'Scalar',
        description:
          'Converts a `BOOLEAN`, `STRING` or `INTEGER` value to a `BOOLEAN` value. For `INTEGER` values, 0 is defined to be false and any other `INTEGER` is defined to be true.',
        signature: 'toBoolean(input :: BOOLEAN | STRING | INTEGER) :: BOOLEAN',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be converted into a boolean.',
            name: 'input',
            type: 'BOOLEAN | STRING | INTEGER',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      toBooleanList: {
        name: 'toBooleanList',
        category: 'List',
        description:
          'Converts a `LIST<ANY>` of values to a `LIST<BOOLEAN>` values. If any values are not convertible to `BOOLEAN` they will be null in the `LIST<BOOLEAN>` returned.',
        signature: 'toBooleanList(input :: LIST<ANY>) :: LIST<BOOLEAN>',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A list of values to be converted into a list of booleans.',
            name: 'input',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<BOOLEAN>',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      toBooleanOrNull: {
        name: 'toBooleanOrNull',
        category: 'Scalar',
        description:
          'Converts a value to a `BOOLEAN` value, or null if the value cannot be converted.',
        signature: 'toBooleanOrNull(input :: ANY) :: BOOLEAN',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be converted into a boolean or null.',
            name: 'input',
            type: 'ANY',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      toFloat: {
        name: 'toFloat',
        category: 'Scalar',
        description:
          'Converts a `STRING`, `INTEGER` or `FLOAT` value to a `FLOAT` value.',
        signature: 'toFloat(input :: STRING | INTEGER | FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be converted into a float.',
            name: 'input',
            type: 'STRING | INTEGER | FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      toFloatList: {
        name: 'toFloatList',
        category: 'List',
        description:
          'Converts a `LIST<ANY>` to a `LIST<FLOAT>` values. If any values are not convertible to `FLOAT` they will be null in the `LIST<FLOAT>` returned.',
        signature: 'toFloatList(input :: LIST<ANY>) :: LIST<FLOAT>',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A list of values to be converted into a list of floats.',
            name: 'input',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<FLOAT>',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      toFloatOrNull: {
        name: 'toFloatOrNull',
        category: 'Scalar',
        description:
          'Converts a value to a `FLOAT` value, or null if the value cannot be converted.',
        signature: 'toFloatOrNull(input :: ANY) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be converted into a float or null.',
            name: 'input',
            type: 'ANY',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      toInteger: {
        name: 'toInteger',
        category: 'Scalar',
        description:
          'Converts a `BOOLEAN`, `STRING`, `INTEGER` or `FLOAT` value to an `INTEGER` value. For `BOOLEAN` values, true is defined to be 1 and false is defined to be 0.',
        signature:
          'toInteger(input :: BOOLEAN | STRING | INTEGER | FLOAT) :: INTEGER',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be converted into an integer.',
            name: 'input',
            type: 'BOOLEAN | STRING | INTEGER | FLOAT',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      toIntegerList: {
        name: 'toIntegerList',
        category: 'List',
        description:
          'Converts a `LIST<ANY>` to a `LIST<INTEGER>` values. If any values are not convertible to `INTEGER` they will be null in the `LIST<INTEGER>` returned.',
        signature: 'toIntegerList(input :: LIST<ANY>) :: LIST<INTEGER>',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A list of values to be converted into a list of integers.',
            name: 'input',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<INTEGER>',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      toIntegerOrNull: {
        name: 'toIntegerOrNull',
        category: 'Scalar',
        description:
          'Converts a value to an `INTEGER` value, or null if the value cannot be converted.',
        signature: 'toIntegerOrNull(input :: ANY) :: INTEGER',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be converted into an integer or null.',
            name: 'input',
            type: 'ANY',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      toLower: {
        name: 'toLower',
        category: 'String',
        description: 'Returns the given `STRING` in lowercase.',
        signature: 'toLower(input :: STRING) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A string to be converted into lowercase.',
            name: 'input',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      toString: {
        name: 'toString',
        category: 'String',
        description:
          'Converts an `INTEGER`, `FLOAT`, `BOOLEAN`, `POINT` or temporal type (i.e. `DATE`, `ZONED TIME`, `LOCAL TIME`, `ZONED DATETIME`, `LOCAL DATETIME` or `DURATION`) value to a `STRING`.',
        signature: 'toString(input :: ANY) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be converted into a string.',
            name: 'input',
            type: 'ANY',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      toStringList: {
        name: 'toStringList',
        category: 'List',
        description:
          'Converts a `LIST<ANY>` to a `LIST<STRING>` values. If any values are not convertible to `STRING` they will be null in the `LIST<STRING>` returned.',
        signature: 'toStringList(input :: LIST<ANY>) :: LIST<STRING>',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A list of values to be converted into a list of strings.',
            name: 'input',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<STRING>',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      toStringOrNull: {
        name: 'toStringOrNull',
        category: 'String',
        description:
          'Converts an `INTEGER`, `FLOAT`, `BOOLEAN`, `POINT` or temporal type (i.e. `DATE`, `ZONED TIME`, `LOCAL TIME`, `ZONED DATETIME`, `LOCAL DATETIME` or `DURATION`) value to a `STRING`, or null if the value cannot be converted.',
        signature: 'toStringOrNull(input :: ANY) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be converted into a string or null.',
            name: 'input',
            type: 'ANY',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      toUpper: {
        name: 'toUpper',
        category: 'String',
        description: 'Returns the given `STRING` in uppercase.',
        signature: 'toUpper(input :: STRING) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A string to be converted into uppercase.',
            name: 'input',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      trim: {
        name: 'trim',
        category: 'String',
        description:
          'Returns the given `STRING` with leading and/or trailing `trimCharacterString` removed.',
        signature:
          'trim([[LEADING | TRAILING | BOTH] [trimCharacterString :: STRING] FROM] input :: STRING) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The parts of the string to trim; LEADING, TRAILING, BOTH',
            name: 'trimSpecification',
            type: '[LEADING, TRAILING, BOTH]',
          },
          {
            isDeprecated: false,
            description:
              'The characters to be removed from the start and/or end of the given string.',
            name: 'trimCharacterString',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'A value from which all leading and/or trailing trim characters will be removed.',
            name: 'input',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      type: {
        name: 'type',
        category: 'Scalar',
        description:
          'Returns a `STRING` representation of the `RELATIONSHIP` type.',
        signature: 'type(input :: RELATIONSHIP) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A relationship.',
            name: 'input',
            type: 'RELATIONSHIP',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      upper: {
        name: 'upper',
        category: 'String',
        description: 'Returns the given `STRING` in uppercase.',
        signature: 'upper(input :: STRING) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A string to be converted into uppercase.',
            name: 'input',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      valueType: {
        name: 'valueType',
        category: 'Scalar',
        description:
          'Returns a `STRING` representation of the most precise value type that the given expression evaluates to.',
        signature: 'valueType(input :: ANY) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to return the type of.',
            name: 'input',
            type: 'ANY',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'vector.similarity.cosine': {
        name: 'vector.similarity.cosine',
        category: 'Vector',
        description:
          'Returns a `FLOAT` representing the similarity between the argument vectors based on their cosine.',
        signature:
          'vector.similarity.cosine(a :: LIST<INTEGER | FLOAT>, b :: LIST<INTEGER | FLOAT>) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A list representing the first vector.',
            name: 'a',
            type: 'LIST<INTEGER | FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'A list representing the second vector.',
            name: 'b',
            type: 'LIST<INTEGER | FLOAT>',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'vector.similarity.euclidean': {
        name: 'vector.similarity.euclidean',
        category: 'Vector',
        description:
          'Returns a `FLOAT` representing the similarity between the argument vectors based on their Euclidean distance.',
        signature:
          'vector.similarity.euclidean(a :: LIST<INTEGER | FLOAT>, b :: LIST<INTEGER | FLOAT>) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A list representing the first vector.',
            name: 'a',
            type: 'LIST<INTEGER | FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'A list representing the second vector.',
            name: 'b',
            type: 'LIST<INTEGER | FLOAT>',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
    }),
    'CYPHER 25': asNeo4jFunctions({
      abs: {
        name: 'abs',
        category: 'Numeric',
        description: 'Returns the absolute value of an `INTEGER` or `FLOAT`.',
        signature: 'abs(input :: INTEGER | FLOAT) :: INTEGER | FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A numeric value from which the absolute number will be returned.',
            name: 'input',
            type: 'INTEGER | FLOAT',
          },
        ],
        returnDescription: 'INTEGER | FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      acos: {
        name: 'acos',
        category: 'Trigonometric',
        description: 'Returns the arccosine of a `FLOAT` in radians.',
        signature: 'acos(input :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An angle in radians.',
            name: 'input',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      all: {
        name: 'all',
        category: 'Predicate',
        description:
          'Returns true if the predicate holds for all elements in the given `LIST<ANY>`.',
        signature:
          'all(variable :: VARIABLE IN list :: LIST<ANY> WHERE predicate :: ANY) :: BOOLEAN',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A variable that can be used within the `WHERE` clause.',
            name: 'variable',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'A predicate must hold for all elements in this list for the function to return `true`.',
            name: 'list',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      any: {
        name: 'any',
        category: 'Predicate',
        description:
          'Returns true if the predicate holds for at least one element in the given `LIST<ANY>`.',
        signature:
          'any(variable :: VARIABLE IN list :: LIST<ANY> WHERE predicate :: ANY) :: BOOLEAN',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A variable that can be used within the `WHERE` clause.',
            name: 'variable',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'A list for the predicate to check against.',
            name: 'list',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.agg.first': {
        name: 'apoc.agg.first',
        category: '',
        description: 'Returns the first value from the given collection.',
        signature: 'apoc.agg.first(value :: ANY) :: ANY',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be aggregated.',
            name: 'value',
            type: 'ANY',
          },
        ],
        returnDescription: 'ANY',
        aggregating: true,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.agg.graph': {
        name: 'apoc.agg.graph',
        category: '',
        description:
          'Returns all distinct `NODE` and `RELATIONSHIP` values collected into a `MAP` with the keys `nodes` and `relationships`.',
        signature: 'apoc.agg.graph(path :: ANY) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A path to return nodes and relationships from.',
            name: 'path',
            type: 'ANY',
          },
        ],
        returnDescription: 'MAP',
        aggregating: true,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.agg.last': {
        name: 'apoc.agg.last',
        category: '',
        description: 'Returns the last value from the given collection.',
        signature: 'apoc.agg.last(value :: ANY) :: ANY',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be aggregated.',
            name: 'value',
            type: 'ANY',
          },
        ],
        returnDescription: 'ANY',
        aggregating: true,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.agg.maxItems': {
        name: 'apoc.agg.maxItems',
        category: '',
        description:
          'Returns a `MAP` `{items: LIST<ANY>, value: ANY}` where the `value` key is the maximum value present, and `items` represent all items with the same value. The size of the list of items can be limited to a given max size.',
        signature:
          'apoc.agg.maxItems(item :: ANY, value :: ANY, groupLimit = -1 :: INTEGER) :: ANY',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be aggregated.',
            name: 'item',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The value from which the max is selected.',
            name: 'value',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=-1, type=INTEGER}',
            description: 'The limit on the number of items returned.',
            name: 'groupLimit',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'ANY',
        aggregating: true,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.agg.median': {
        name: 'apoc.agg.median',
        category: '',
        description:
          'Returns the mathematical median for all non-null `INTEGER` and `FLOAT` values.',
        signature: 'apoc.agg.median(value :: ANY) :: ANY',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be aggregated.',
            name: 'value',
            type: 'ANY',
          },
        ],
        returnDescription: 'ANY',
        aggregating: true,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.agg.minItems': {
        name: 'apoc.agg.minItems',
        category: '',
        description:
          'Returns a `MAP` `{items: LIST<ANY>, value: ANY}` where the `value` key is the minimum value present, and `items` represent all items with the same value. The size of the list of items can be limited to a given max size.',
        signature:
          'apoc.agg.minItems(item :: ANY, value :: ANY, groupLimit = -1 :: INTEGER) :: ANY',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be aggregated.',
            name: 'item',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The value from which the min is selected.',
            name: 'value',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=-1, type=INTEGER}',
            description: 'The limit on the number of items returned.',
            name: 'groupLimit',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'ANY',
        aggregating: true,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.agg.nth': {
        name: 'apoc.agg.nth',
        category: '',
        description:
          'Returns the nth value in the given collection (to fetch the last item of an unknown length collection, -1 can be used).',
        signature: 'apoc.agg.nth(value :: ANY, offset :: INTEGER) :: ANY',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be aggregated.',
            name: 'value',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'The index of the value to be returned, or -1 to return the last item.',
            name: 'offset',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'ANY',
        aggregating: true,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.agg.percentiles': {
        name: 'apoc.agg.percentiles',
        category: '',
        description:
          'Returns the given percentiles over the range of numerical values in the given collection.',
        signature:
          'apoc.agg.percentiles(value :: INTEGER | FLOAT, percentiles = [0.5, 0.75, 0.9, 0.95, 0.99] :: LIST<FLOAT>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be aggregated.',
            name: 'value',
            type: 'INTEGER | FLOAT',
          },
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=[0.5, 0.75, 0.9, 0.95, 0.99], type=LIST<FLOAT>}',
            description: 'The percentiles from which the values are obtained.',
            name: 'percentiles',
            type: 'LIST<FLOAT>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: true,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.agg.product': {
        name: 'apoc.agg.product',
        category: '',
        description:
          'Returns the product of all non-null `INTEGER` and `FLOAT` values in the collection.',
        signature:
          'apoc.agg.product(value :: INTEGER | FLOAT) :: INTEGER | FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be multiplied in the aggregate.',
            name: 'value',
            type: 'INTEGER | FLOAT',
          },
        ],
        returnDescription: 'INTEGER | FLOAT',
        aggregating: true,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.agg.slice': {
        name: 'apoc.agg.slice',
        category: '',
        description:
          'Returns a subset of non-null values from the given collection (the collection is considered to be zero-indexed).\nTo specify the range from start until the end of the collection, the length should be set to -1.',
        signature:
          'apoc.agg.slice(value :: ANY, from = 0 :: INTEGER, to = -1 :: INTEGER) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be multiplied in the aggregate.',
            name: 'value',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=0, type=INTEGER}',
            description:
              'The index from which to start returning values in the specified range.',
            name: 'from',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=-1, type=INTEGER}',
            description:
              'The non-inclusive index of the final value in the range.',
            name: 'to',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: true,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.agg.statistics': {
        name: 'apoc.agg.statistics',
        category: '',
        description:
          'Returns the following statistics on the `INTEGER` and `FLOAT` values in the given collection: percentiles, min, minNonZero, max, total, mean, stdev.',
        signature:
          'apoc.agg.statistics(value :: INTEGER | FLOAT, percentiles = [0.5, 0.75, 0.9, 0.95, 0.99] :: LIST<FLOAT>) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be aggregated.',
            name: 'value',
            type: 'INTEGER | FLOAT',
          },
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=[0.5, 0.75, 0.9, 0.95, 0.99], type=LIST<FLOAT>}',
            description: 'The percentiles from which the values are obtained.',
            name: 'percentiles',
            type: 'LIST<FLOAT>',
          },
        ],
        returnDescription: 'MAP',
        aggregating: true,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.any.isDeleted': {
        name: 'apoc.any.isDeleted',
        category: '',
        description:
          'Returns true if the given `NODE` or `RELATIONSHIP` no longer exists.',
        signature: 'apoc.any.isDeleted(object :: ANY) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node or relationship to check the non-existence of.',
            name: 'object',
            type: 'ANY',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.any.properties': {
        name: 'apoc.any.properties',
        category: '',
        description:
          'Returns all properties of the given object.\nThe object can be a virtual `NODE`, a real `NODE`, a virtual `RELATIONSHIP`, a real `RELATIONSHIP`, or a `MAP`.',
        signature:
          'apoc.any.properties(object :: ANY, keys = null :: LIST<STRING>) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The object to return properties from.',
            name: 'object',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=LIST<STRING>}',
            description:
              'The keys of the properties to be returned (if null then all keys are returned).',
            name: 'keys',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.any.property': {
        name: 'apoc.any.property',
        category: '',
        description:
          'Returns the property for the given key from an object.\nThe object can be a virtual `NODE`, a real `NODE`, a virtual `RELATIONSHIP`, a real `RELATIONSHIP`, or a `MAP`.',
        signature: 'apoc.any.property(object :: ANY, key :: STRING) :: ANY',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The object to return a property from.',
            name: 'object',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The key of the property to return.',
            name: 'key',
            type: 'STRING',
          },
        ],
        returnDescription: 'ANY',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.bitwise.op': {
        name: 'apoc.bitwise.op',
        category: '',
        description: 'Returns the result of the bitwise operation',
        signature:
          'apoc.bitwise.op(a :: INTEGER, operator :: STRING, b :: INTEGER) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The lefthand side value of the bitwise operation.',
            name: 'a',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The type of bitwise operation to perform.',
            name: 'operator',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The righthand side value of the bitwise operation.',
            name: 'b',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.avg': {
        name: 'apoc.coll.avg',
        category: '',
        description:
          'Returns the average of the numbers in the `LIST<INTEGER | FLOAT>`.',
        signature: 'apoc.coll.avg(coll :: LIST<INTEGER | FLOAT>) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to return the average from.',
            name: 'coll',
            type: 'LIST<INTEGER | FLOAT>',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.combinations': {
        name: 'apoc.coll.combinations',
        category: '',
        description:
          'Returns a collection of all combinations of `LIST<ANY>` elements between the selection size `minSelect` and `maxSelect` (default: `minSelect`).',
        signature:
          'apoc.coll.combinations(coll :: LIST<ANY>, minSelect :: INTEGER, maxSelect = -1 :: INTEGER) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to return the combinations from.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The minimum selection size of the combination.',
            name: 'minSelect',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=-1, type=INTEGER}',
            description: 'The maximum selection size of the combination.',
            name: 'maxSelect',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.contains': {
        name: 'apoc.coll.contains',
        category: '',
        description:
          'Returns whether or not the given value exists in the given collection.',
        signature:
          'apoc.coll.contains(coll :: LIST<ANY>, value :: ANY) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to search for the given value.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The value in the list to check for the existence of.',
            name: 'value',
            type: 'ANY',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.containsAll': {
        name: 'apoc.coll.containsAll',
        category: '',
        description:
          'Returns whether or not all of the given values exist in the given collection.',
        signature:
          'apoc.coll.containsAll(coll1 :: LIST<ANY>, coll2 :: LIST<ANY>) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to search for the given values in.',
            name: 'coll1',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description:
              'The list of values in the given list to check for the existence of.',
            name: 'coll2',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.containsAllSorted': {
        name: 'apoc.coll.containsAllSorted',
        category: '',
        description:
          'Returns whether or not all of the given values in the second `LIST<ANY>` exist in an already sorted collection (using a binary search).',
        signature:
          'apoc.coll.containsAllSorted(coll1 :: LIST<ANY>, coll2 :: LIST<ANY>) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The sorted list to search for the given values.',
            name: 'coll1',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description:
              'The list of values to check for existence of in the given list.',
            name: 'coll2',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.containsDuplicates': {
        name: 'apoc.coll.containsDuplicates',
        category: '',
        description:
          'Returns true if a collection contains duplicate elements.',
        signature: 'apoc.coll.containsDuplicates(coll :: LIST<ANY>) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to check for duplicates in.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.containsSorted': {
        name: 'apoc.coll.containsSorted',
        category: '',
        description:
          'Returns whether or not the given value exists in an already sorted collection (using a binary search).',
        signature:
          'apoc.coll.containsSorted(coll :: LIST<ANY>, value :: ANY) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The sorted list to search for the given value.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The value to check for the existence of in the list.',
            name: 'value',
            type: 'ANY',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.different': {
        name: 'apoc.coll.different',
        category: '',
        description:
          'Returns true if all the values in the given `LIST<ANY>` are unique.',
        signature: 'apoc.coll.different(coll :: LIST<ANY>) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to check for duplicates.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.disjunction': {
        name: 'apoc.coll.disjunction',
        category: '',
        description: 'Returns the disjunct set from two `LIST<ANY>` values.',
        signature:
          'apoc.coll.disjunction(list1 :: LIST<ANY>, list2 :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list of values to compare against `list2` and form a disjunction from.',
            name: 'list1',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description:
              'The list of values to compare against `list1` and form a disjunction from.',
            name: 'list2',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.dropDuplicateNeighbors': {
        name: 'apoc.coll.dropDuplicateNeighbors',
        category: '',
        description:
          'Removes duplicate consecutive objects in the `LIST<ANY>`.',
        signature:
          'apoc.coll.dropDuplicateNeighbors(list :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list to remove duplicate consecutive values from.',
            name: 'list',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.duplicates': {
        name: 'apoc.coll.duplicates',
        category: '',
        description:
          'Returns a `LIST<ANY>` of duplicate items in the collection.',
        signature: 'apoc.coll.duplicates(coll :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to collect duplicate values from.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.duplicatesWithCount': {
        name: 'apoc.coll.duplicatesWithCount',
        category: '',
        description:
          'Returns a `LIST<ANY>` of duplicate items in the collection and their count, keyed by `item` and `count`.',
        signature:
          'apoc.coll.duplicatesWithCount(coll :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list to collect duplicate values and their count from.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.fill': {
        name: 'apoc.coll.fill',
        category: '',
        description: 'Returns a `LIST<ANY>` with the given count of items.',
        signature:
          'apoc.coll.fill(item :: STRING, count :: INTEGER) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The item to be present in the returned list.',
            name: 'item',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The number of times the given item should appear in the returned list.',
            name: 'count',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.flatten': {
        name: 'apoc.coll.flatten',
        category: '',
        description:
          'Flattens the given `LIST<ANY>` (to flatten nested `LIST<ANY>` values, set recursive to true).',
        signature:
          'apoc.coll.flatten(coll :: LIST<ANY>, recursive = false :: BOOLEAN) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to flatten.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=false, type=BOOLEAN}',
            description: 'Whether nested list items should also be flattened.',
            name: 'recursive',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.frequencies': {
        name: 'apoc.coll.frequencies',
        category: '',
        description:
          'Returns a `LIST<ANY>` of frequencies of the items in the collection, keyed by `item` and `count`.',
        signature: 'apoc.coll.frequencies(coll :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to return items and their count from.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.frequenciesAsMap': {
        name: 'apoc.coll.frequenciesAsMap',
        category: '',
        description:
          'Returns a `MAP` of frequencies of the items in the collection, keyed by `item` and `count`.',
        signature: 'apoc.coll.frequenciesAsMap(coll :: LIST<ANY>) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to return items and their count from.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.indexOf': {
        name: 'apoc.coll.indexOf',
        category: '',
        description:
          'Returns the index for the first occurrence of the specified value in the `LIST<ANY>`.',
        signature:
          'apoc.coll.indexOf(coll :: LIST<ANY>, value :: ANY) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to find the given value in.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description:
              'The value to find the first occurrence of in the given list.',
            name: 'value',
            type: 'ANY',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.insert': {
        name: 'apoc.coll.insert',
        category: '',
        description:
          'Inserts a value into the specified index in the `LIST<ANY>`.',
        signature:
          'apoc.coll.insert(coll :: LIST<ANY>, index :: INTEGER, value :: ANY) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to insert a value into.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The position in the list to insert the given value.',
            name: 'index',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The value to be inserted.',
            name: 'value',
            type: 'ANY',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.insertAll': {
        name: 'apoc.coll.insertAll',
        category: '',
        description:
          'Inserts all of the values into the `LIST<ANY>`, starting at the specified index.',
        signature:
          'apoc.coll.insertAll(coll :: LIST<ANY>, index :: INTEGER, values :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to insert the values into.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description:
              'The position in the list to start inserting the given values.',
            name: 'index',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The values to be inserted.',
            name: 'values',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.intersection': {
        name: 'apoc.coll.intersection',
        category: '',
        description:
          'Returns the distinct intersection of two `LIST<ANY>` values.',
        signature:
          'apoc.coll.intersection(list1 :: LIST<ANY>, list2 :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list of values to compare against `list2` and form an intersection from.',
            name: 'list1',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description:
              'The list of values to compare against `list1` and form an intersection from.',
            name: 'list2',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.isEqualCollection': {
        name: 'apoc.coll.isEqualCollection',
        category: '',
        description:
          'Returns true if the two collections contain the same elements with the same cardinality in any order.',
        signature:
          'apoc.coll.isEqualCollection(coll :: LIST<ANY>, values :: LIST<ANY>) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list of values to compare against `list2` and check for equality.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description:
              'The list of values to compare against `list1` and check for equality.',
            name: 'values',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.max': {
        name: 'apoc.coll.max',
        category: '',
        description:
          'Returns the maximum of all values in the given `LIST<ANY>`.',
        signature: 'apoc.coll.max(values :: LIST<ANY>) :: ANY',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to find the maximum in.',
            name: 'values',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'ANY',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.min': {
        name: 'apoc.coll.min',
        category: '',
        description:
          'Returns the minimum of all values in the given `LIST<ANY>`.',
        signature: 'apoc.coll.min(values :: LIST<ANY>) :: ANY',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to find the minimum in.',
            name: 'values',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'ANY',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.occurrences': {
        name: 'apoc.coll.occurrences',
        category: '',
        description: 'Returns the count of the given item in the collection.',
        signature:
          'apoc.coll.occurrences(coll :: LIST<ANY>, item :: ANY) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list to collect the count of the given value from.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The value to count in the given list.',
            name: 'item',
            type: 'ANY',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.pairWithOffset': {
        name: 'apoc.coll.pairWithOffset',
        category: '',
        description: 'Returns a `LIST<ANY>` of pairs defined by the offset.',
        signature:
          'apoc.coll.pairWithOffset(coll :: LIST<ANY>, offset :: INTEGER) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to create pairs from.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description:
              'The offset to make each pair with from the given list.',
            name: 'offset',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.pairs': {
        name: 'apoc.coll.pairs',
        category: '',
        description:
          'Returns a `LIST<ANY>` of adjacent elements in the `LIST<ANY>` ([1,2],[2,3],[3,null]).',
        signature: 'apoc.coll.pairs(list :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to create pairs from.',
            name: 'list',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.pairsMin': {
        name: 'apoc.coll.pairsMin',
        category: '',
        description:
          'Returns `LIST<ANY>` values of adjacent elements in the `LIST<ANY>` ([1,2],[2,3]), skipping the final element.',
        signature: 'apoc.coll.pairsMin(list :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to create pairs from.',
            name: 'list',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.partition': {
        name: 'apoc.coll.partition',
        category: '',
        description:
          'Partitions the original `LIST<ANY>` into a new `LIST<ANY>` of the given batch size.\nThe final `LIST<ANY>` may be smaller than the given batch size.',
        signature:
          'apoc.coll.partition(coll :: LIST<ANY>, batchSize :: INTEGER) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to partition into smaller sublists.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The max size of each partitioned sublist.',
            name: 'batchSize',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.randomItem': {
        name: 'apoc.coll.randomItem',
        category: '',
        description:
          'Returns a random item from the `LIST<ANY>`, or null on `LIST<NOTHING>` or `LIST<NULL>`.',
        signature: 'apoc.coll.randomItem(coll :: LIST<ANY>) :: ANY',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to return a random item from.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'ANY',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.randomItems': {
        name: 'apoc.coll.randomItems',
        category: '',
        description:
          'Returns a `LIST<ANY>` of `itemCount` random items from the original `LIST<ANY>` (optionally allowing elements in the original `LIST<ANY>` to be selected more than once).',
        signature:
          'apoc.coll.randomItems(coll :: LIST<ANY>, itemCount :: INTEGER, allowRepick = false :: BOOLEAN) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to return random items from.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The number of random items to return from the list.',
            name: 'itemCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=false, type=BOOLEAN}',
            description:
              'Whether elements from the original list can be selected more than once.',
            name: 'allowRepick',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.remove': {
        name: 'apoc.coll.remove',
        category: '',
        description:
          'Removes a range of values from the `LIST<ANY>`, beginning at position index for the given length of values.',
        signature:
          'apoc.coll.remove(coll :: LIST<ANY>, index :: INTEGER, length = 1 :: INTEGER) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to remove values from.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description:
              'The starting index in the list to begin removing values from.',
            name: 'index',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=1, type=INTEGER}',
            description: 'The number of values to remove.',
            name: 'length',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.removeAll': {
        name: 'apoc.coll.removeAll',
        category: '',
        description:
          'Returns the first `LIST<ANY>` with all elements also present in the second `LIST<ANY>` removed.',
        signature:
          'apoc.coll.removeAll(list1 :: LIST<ANY>, list2 :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to remove values from.',
            name: 'list1',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The values to remove from the given list.',
            name: 'list2',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.runningTotal': {
        name: 'apoc.coll.runningTotal',
        category: '',
        description: 'Returns an accumulative `LIST<INTEGER | FLOAT>`.',
        signature:
          'apoc.coll.runningTotal(list :: LIST<INTEGER | FLOAT>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to return a running total from.',
            name: 'list',
            type: 'LIST<INTEGER | FLOAT>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.set': {
        name: 'apoc.coll.set',
        category: '',
        description: 'Sets the element at the given index to the new value.',
        signature:
          'apoc.coll.set(coll :: LIST<ANY>, index :: INTEGER, value :: ANY) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to be updated.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The position of the value in the list to be updated.',
            name: 'index',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The new value to be set.',
            name: 'value',
            type: 'ANY',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.shuffle': {
        name: 'apoc.coll.shuffle',
        category: '',
        description: 'Returns the `LIST<ANY>` shuffled.',
        signature: 'apoc.coll.shuffle(coll :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to be shuffled.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.sort': {
        name: 'apoc.coll.sort',
        category: '',
        description: 'Sorts the given `LIST<ANY>` into ascending order.',
        signature: 'apoc.coll.sort(coll :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to be sorted.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.sortMaps': {
        name: 'apoc.coll.sortMaps',
        category: '',
        description:
          'Sorts the given `LIST<MAP<STRING, ANY>>` into descending order, based on the `MAP` property indicated by `prop`.',
        signature:
          'apoc.coll.sortMaps(list :: LIST<MAP>, prop :: STRING) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list of maps to be sorted.',
            name: 'list',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description:
              'The property key to be used to sort the list of maps by.',
            name: 'prop',
            type: 'STRING',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.sortMulti': {
        name: 'apoc.coll.sortMulti',
        category: '',
        description:
          'Sorts the given `LIST<MAP<STRING, ANY>>` by the given fields.\nTo indicate that a field should be sorted according to ascending values, prefix it with a caret (^).\nIt is also possible to add limits to the `LIST<MAP<STRING, ANY>>` and to skip values.',
        signature:
          'apoc.coll.sortMulti(coll :: LIST<MAP>, orderFields = [] :: LIST<STRING>, limit = -1 :: INTEGER, skip = 0 :: INTEGER) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list of maps to be sorted.',
            name: 'coll',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[], type=LIST<STRING>}',
            description:
              'The property keys to be used to sort the list of maps by.',
            name: 'orderFields',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=-1, type=INTEGER}',
            description: 'The amount of results to return.',
            name: 'limit',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=0, type=INTEGER}',
            description: 'The amount to skip by.',
            name: 'skip',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.sortNodes': {
        name: 'apoc.coll.sortNodes',
        category: '',
        description:
          'Sorts the given `LIST<NODE>` by the property of the nodes into descending order.',
        signature:
          'apoc.coll.sortNodes(coll :: LIST<NODE>, prop :: STRING) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list of nodes to be sorted.',
            name: 'coll',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            description:
              'The property key on the node to be used to sort the list by.',
            name: 'prop',
            type: 'STRING',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.sortText': {
        name: 'apoc.coll.sortText',
        category: '',
        description: 'Sorts the given `LIST<STRING>` into ascending order.',
        signature:
          'apoc.coll.sortText(coll :: LIST<STRING>, conf = {} :: MAP) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list of strings to be sorted.',
            name: 'coll',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              'A map containing a single key `locale` to indicate which language to use when sorting the strings.',
            name: 'conf',
            type: 'MAP',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.stdev': {
        name: 'apoc.coll.stdev',
        category: '',
        description:
          'Returns sample or population standard deviation with `isBiasCorrected` true or false respectively.',
        signature:
          'apoc.coll.stdev(list :: LIST<INTEGER | FLOAT>, isBiasCorrected = true :: BOOLEAN) :: INTEGER | FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A list to collect the standard deviation from.',
            name: 'list',
            type: 'LIST<INTEGER | FLOAT>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=true, type=BOOLEAN}',
            description:
              'Will perform a sample standard deviation if `isBiasCorrected`, otherwise a population standard deviation is performed.',
            name: 'isBiasCorrected',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: 'INTEGER | FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.subtract': {
        name: 'apoc.coll.subtract',
        category: '',
        description:
          'Returns the first `LIST<ANY>` as a set with all the elements of the second `LIST<ANY>` removed.',
        signature:
          'apoc.coll.subtract(list1 :: LIST<ANY>, list2 :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to remove values from.',
            name: 'list1',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The list of values to be removed from `list1`.',
            name: 'list2',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.sum': {
        name: 'apoc.coll.sum',
        category: '',
        description:
          'Returns the sum of all the `INTEGER | FLOAT` in the `LIST<INTEGER | FLOAT>`.',
        signature: 'apoc.coll.sum(coll :: LIST<INTEGER | FLOAT>) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list of numbers to create a sum from.',
            name: 'coll',
            type: 'LIST<INTEGER | FLOAT>',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.sumLongs': {
        name: 'apoc.coll.sumLongs',
        category: '',
        description:
          'Returns the sum of all the `INTEGER | FLOAT` in the `LIST<INTEGER | FLOAT>`.',
        signature:
          'apoc.coll.sumLongs(coll :: LIST<INTEGER | FLOAT>) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list of numbers to create a sum from after each is cast to a java Long value.',
            name: 'coll',
            type: 'LIST<INTEGER | FLOAT>',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.toSet': {
        name: 'apoc.coll.toSet',
        category: '',
        description: 'Returns a unique `LIST<ANY>` from the given `LIST<ANY>`.',
        signature: 'apoc.coll.toSet(coll :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list of values to remove all duplicates from.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.union': {
        name: 'apoc.coll.union',
        category: '',
        description:
          'Returns the distinct union of the two given `LIST<ANY>` values.',
        signature:
          'apoc.coll.union(list1 :: LIST<ANY>, list2 :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list of values to compare against `list2` and form a distinct union from.',
            name: 'list1',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description:
              'The list of values to compare against `list1` and form a distinct union from.',
            name: 'list2',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.unionAll': {
        name: 'apoc.coll.unionAll',
        category: '',
        description:
          'Returns the full union of the two given `LIST<ANY>` values (duplicates included).',
        signature:
          'apoc.coll.unionAll(list1 :: LIST<ANY>, list2 :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list of values to compare against `list2` and form a union from.',
            name: 'list1',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description:
              'The list of values to compare against `list1` and form a union from.',
            name: 'list2',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.coll.zip': {
        name: 'apoc.coll.zip',
        category: '',
        description:
          'Returns the two given `LIST<ANY>` values zipped together as a `LIST<LIST<ANY>>`.',
        signature:
          'apoc.coll.zip(list1 :: LIST<ANY>, list2 :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to zip together with `list2`.',
            name: 'list1',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The list to zip together with `list1`.',
            name: 'list2',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.convert.fromJsonList': {
        name: 'apoc.convert.fromJsonList',
        category: '',
        description:
          'Converts the given JSON list into a Cypher `LIST<STRING>`.',
        signature:
          'apoc.convert.fromJsonList(list :: STRING, path =  :: STRING, pathOptions = null :: LIST<STRING>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A JSON stringified list.',
            name: 'list',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              'A JSON path expression used to extract a certain part from the list.',
            name: 'path',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=LIST<STRING>}',
            description:
              "JSON path options: ('ALWAYS_RETURN_LIST', 'AS_PATH_LIST', 'DEFAULT_PATH_LEAF_TO_NULL', 'REQUIRE_PROPERTIES', 'SUPPRESS_EXCEPTIONS')",
            name: 'pathOptions',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.convert.fromJsonMap': {
        name: 'apoc.convert.fromJsonMap',
        category: '',
        description: 'Converts the given JSON map into a Cypher `MAP`.',
        signature:
          'apoc.convert.fromJsonMap(map :: STRING, path =  :: STRING, pathOptions = null :: LIST<STRING>) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A JSON stringified map.',
            name: 'map',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              'A JSON path expression used to extract a certain part from the map.',
            name: 'path',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=LIST<STRING>}',
            description:
              "JSON path options: ('ALWAYS_RETURN_LIST', 'AS_PATH_LIST', 'DEFAULT_PATH_LEAF_TO_NULL', 'REQUIRE_PROPERTIES', 'SUPPRESS_EXCEPTIONS')",
            name: 'pathOptions',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.convert.getJsonProperty': {
        name: 'apoc.convert.getJsonProperty',
        category: '',
        description:
          'Converts a serialized JSON object from the property of the given `NODE` into the equivalent Cypher structure (e.g. `MAP`, `LIST<ANY>`).',
        signature:
          'apoc.convert.getJsonProperty(node :: NODE, key :: STRING, path =  :: STRING, pathOptions = null :: LIST<STRING>) :: ANY',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The node containing a JSON string property.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The property key to convert.',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              'A JSON path expression used to extract a certain part from the node property string.',
            name: 'path',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=LIST<STRING>}',
            description:
              "JSON path options: ('ALWAYS_RETURN_LIST', 'AS_PATH_LIST', 'DEFAULT_PATH_LEAF_TO_NULL', 'REQUIRE_PROPERTIES', 'SUPPRESS_EXCEPTIONS')",
            name: 'pathOptions',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: 'ANY',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.convert.getJsonPropertyMap': {
        name: 'apoc.convert.getJsonPropertyMap',
        category: '',
        description:
          'Converts a serialized JSON object from the property of the given `NODE` into a Cypher `MAP`.',
        signature:
          'apoc.convert.getJsonPropertyMap(node :: NODE, key :: STRING, path =  :: STRING, pathOptions = null :: LIST<STRING>) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The node containing a JSON stringified map.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The property key to convert.',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              'A JSON path expression used to extract a certain part from the node property string.',
            name: 'path',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=LIST<STRING>}',
            description:
              "JSON path options: ('ALWAYS_RETURN_LIST', 'AS_PATH_LIST', 'DEFAULT_PATH_LEAF_TO_NULL', 'REQUIRE_PROPERTIES', 'SUPPRESS_EXCEPTIONS')",
            name: 'pathOptions',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.convert.toJson': {
        name: 'apoc.convert.toJson',
        category: '',
        description: 'Serializes the given JSON value.',
        signature: 'apoc.convert.toJson(value :: ANY) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The value to serialize.',
            name: 'value',
            type: 'ANY',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.convert.toList': {
        name: 'apoc.convert.toList',
        category: '',
        description: 'Converts the given value into a `LIST<ANY>`.',
        signature: 'apoc.convert.toList(value :: ANY) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The value to convert into a list.',
            name: 'value',
            type: 'ANY',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.convert.toMap': {
        name: 'apoc.convert.toMap',
        category: '',
        description: 'Converts the given value into a `MAP`.',
        signature: 'apoc.convert.toMap(map :: ANY) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The value to convert into a map.',
            name: 'map',
            type: 'ANY',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.convert.toNode': {
        name: 'apoc.convert.toNode',
        category: '',
        description: 'Converts the given value into a `NODE`.',
        signature: 'apoc.convert.toNode(node :: ANY) :: NODE',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The value to convert into a node.',
            name: 'node',
            type: 'ANY',
          },
        ],
        returnDescription: 'NODE',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.convert.toNodeList': {
        name: 'apoc.convert.toNodeList',
        category: '',
        description: 'Converts the given value into a `LIST<NODE>`.',
        signature: 'apoc.convert.toNodeList(list :: ANY) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The value to covert into a node list.',
            name: 'list',
            type: 'ANY',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.convert.toRelationship': {
        name: 'apoc.convert.toRelationship',
        category: '',
        description: 'Converts the given value into a `RELATIONSHIP`.',
        signature: 'apoc.convert.toRelationship(rel :: ANY) :: RELATIONSHIP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The value to convert into a relationship.',
            name: 'rel',
            type: 'ANY',
          },
        ],
        returnDescription: 'RELATIONSHIP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.convert.toRelationshipList': {
        name: 'apoc.convert.toRelationshipList',
        category: '',
        description: 'Converts the given value into a `LIST<RELATIONSHIP>`.',
        signature:
          'apoc.convert.toRelationshipList(relList :: ANY) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The value to convert into a relationship list.',
            name: 'relList',
            type: 'ANY',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.convert.toSet': {
        name: 'apoc.convert.toSet',
        category: '',
        description:
          'Converts the given value into a set represented in Cypher as a `LIST<ANY>`.',
        signature: 'apoc.convert.toSet(list :: ANY) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to convert into a set.',
            name: 'list',
            type: 'ANY',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.convert.toSortedJsonMap': {
        name: 'apoc.convert.toSortedJsonMap',
        category: '',
        description:
          'Converts a serialized JSON object from the property of a given `NODE` into a Cypher `MAP`.',
        signature:
          'apoc.convert.toSortedJsonMap(value :: ANY, ignoreCase = true :: BOOLEAN) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The value to convert into a stringified JSON map.',
            name: 'value',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=true, type=BOOLEAN}',
            description:
              'Whether or not to ignore the case of the keys when sorting.',
            name: 'ignoreCase',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.create.uuidBase64': {
        name: 'apoc.create.uuidBase64',
        category: '',
        description: 'Returns a UUID encoded with base64.',
        signature: 'apoc.create.uuidBase64() :: STRING',
        isBuiltIn: false,
        argumentDescription: [],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.create.uuidBase64ToHex': {
        name: 'apoc.create.uuidBase64ToHex',
        category: '',
        description:
          'Takes the given base64 encoded UUID and returns it as a hexadecimal `STRING`.',
        signature:
          'apoc.create.uuidBase64ToHex(base64Uuid :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string representing a UUID encoded with Base64.',
            name: 'base64Uuid',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.create.uuidHexToBase64': {
        name: 'apoc.create.uuidHexToBase64',
        category: '',
        description:
          'Takes the given UUID represented as a hexadecimal `STRING` and returns it encoded with base64.',
        signature: 'apoc.create.uuidHexToBase64(uuid :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The UUID represented as a hexadecimal string.',
            name: 'uuid',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.create.vNode': {
        name: 'apoc.create.vNode',
        category: '',
        description: 'Returns a virtual `NODE`.',
        signature:
          'apoc.create.vNode(labels :: LIST<STRING>, props = {} :: MAP) :: NODE',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list of labels to assign to the virtual node.',
            name: 'labels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'The map of properties to assign to the virtual node.',
            name: 'props',
            type: 'MAP',
          },
        ],
        returnDescription: 'NODE',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.create.vRelationship': {
        name: 'apoc.create.vRelationship',
        category: '',
        description: 'Returns a virtual `RELATIONSHIP`.',
        signature:
          'apoc.create.vRelationship(from :: NODE, relType :: STRING, props :: MAP, to :: NODE) :: RELATIONSHIP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The start node to assign to the virtual relationship.',
            name: 'from',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The type to assign to the virtual relationship.',
            name: 'relType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The map of properties to assign to the virtual relationship.',
            name: 'props',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The end node to assign to the virtual relationship.',
            name: 'to',
            type: 'NODE',
          },
        ],
        returnDescription: 'RELATIONSHIP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.create.virtual.fromNode': {
        name: 'apoc.create.virtual.fromNode',
        category: '',
        description:
          'Returns a virtual `NODE` from the given existing `NODE`. The virtual `NODE` only contains the requested properties.',
        signature:
          'apoc.create.virtual.fromNode(node :: NODE, propertyNames :: LIST<STRING>) :: NODE',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The node to generate a virtual node from.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The properties to copy to the virtual node.',
            name: 'propertyNames',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: 'NODE',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.cypher.runFirstColumnMany': {
        name: 'apoc.cypher.runFirstColumnMany',
        category: '',
        description:
          'Runs the given statement with the given parameters and returns the first column collected into a `LIST<ANY>`.',
        signature:
          'apoc.cypher.runFirstColumnMany(statement :: STRING, params :: MAP) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The Cypher query to execute.',
            name: 'statement',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The parameters needed for input to the given Cypher query.',
            name: 'params',
            type: 'MAP',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.cypher.runFirstColumnSingle': {
        name: 'apoc.cypher.runFirstColumnSingle',
        category: '',
        description:
          'Runs the given statement with the given parameters and returns the first element of the first column.',
        signature:
          'apoc.cypher.runFirstColumnSingle(statement :: STRING, params :: MAP) :: ANY',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The Cypher query to execute.',
            name: 'statement',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The parameters needed for input to the given Cypher query.',
            name: 'params',
            type: 'MAP',
          },
        ],
        returnDescription: 'ANY',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.data.url': {
        name: 'apoc.data.url',
        category: '',
        description: 'Turns a URL into a `MAP`.',
        signature: 'apoc.data.url(url :: STRING) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The URL to extract metadata from.',
            name: 'url',
            type: 'STRING',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.date.add': {
        name: 'apoc.date.add',
        category: '',
        description: 'Adds a unit of specified time to the given timestamp.',
        signature:
          'apoc.date.add(time :: INTEGER, unit :: STRING, addValue :: INTEGER, addUnit :: STRING) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The timestamp to add time to.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The unit the given timestamp is in.',
            name: 'unit',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The amount of time to add to the given timestamp.',
            name: 'addValue',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The unit the added value is in.',
            name: 'addUnit',
            type: 'STRING',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.date.convert': {
        name: 'apoc.date.convert',
        category: '',
        description:
          'Converts the given timestamp from one time unit into a timestamp of a different time unit.',
        signature:
          'apoc.date.convert(time :: INTEGER, unit :: STRING, toUnit :: STRING) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The timestamp to be converted.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The unit the given timestamp is in.',
            name: 'unit',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The unit to convert the given timestamp to.',
            name: 'toUnit',
            type: 'STRING',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.date.convertFormat': {
        name: 'apoc.date.convertFormat',
        category: '',
        description:
          'Converts a `STRING` of one type of date format into a `STRING` of another type of date format.',
        signature:
          'apoc.date.convertFormat(temporal :: STRING, currentFormat :: STRING, convertTo = yyyy-MM-dd :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A string representation of a temporal value.',
            name: 'temporal',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the given temporal is formatted as.',
            name: 'currentFormat',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=yyyy-MM-dd, type=STRING}',
            description: 'The format to convert the given temporal value to.',
            name: 'convertTo',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.date.currentTimestamp': {
        name: 'apoc.date.currentTimestamp',
        category: '',
        description:
          'Returns the current Unix epoch timestamp in milliseconds.',
        signature: 'apoc.date.currentTimestamp() :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.date.field': {
        name: 'apoc.date.field',
        category: '',
        description: 'Returns the value of one field from the given date time.',
        signature:
          'apoc.date.field(time :: INTEGER, unit = d :: STRING, timezone = UTC :: STRING) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The timestamp in ms since epoch to return a field from.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=d, type=STRING}',
            description: 'The unit of the field to return the value of.',
            name: 'unit',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=UTC, type=STRING}',
            description: 'The timezone the given timestamp is in.',
            name: 'timezone',
            type: 'STRING',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.date.fields': {
        name: 'apoc.date.fields',
        category: '',
        description:
          'Splits the given date into fields returning a `MAP` containing the values of each field.',
        signature:
          'apoc.date.fields(date :: STRING, pattern = yyyy-MM-dd HH:mm:ss :: STRING) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A string representation of a temporal value.',
            name: 'date',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=yyyy-MM-dd HH:mm:ss, type=STRING}',
            description: 'The format the given temporal is formatted as.',
            name: 'pattern',
            type: 'STRING',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.date.format': {
        name: 'apoc.date.format',
        category: '',
        description:
          'Returns a `STRING` representation of the time value.\nThe time unit (default: ms), date format (default: ISO), and time zone (default: current time zone) can all be changed.',
        signature:
          'apoc.date.format(time :: INTEGER, unit = ms :: STRING, format = yyyy-MM-dd HH:mm:ss :: STRING, timezone =  :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The timestamp since epoch to format.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=ms, type=STRING}',
            description: 'The unit of the given timestamp.',
            name: 'unit',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=yyyy-MM-dd HH:mm:ss, type=STRING}',
            description: 'The format to convert the given temporal value to.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'The timezone the given timestamp is in.',
            name: 'timezone',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.date.fromISO8601': {
        name: 'apoc.date.fromISO8601',
        category: '',
        description:
          'Converts the given date `STRING` (ISO8601) to an `INTEGER` representing the time value in milliseconds.',
        signature: 'apoc.date.fromISO8601(time :: STRING) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The datetime to convert to ms.',
            name: 'time',
            type: 'STRING',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.date.parse': {
        name: 'apoc.date.parse',
        category: '',
        description:
          'Parses the given date `STRING` from a specified format into the specified time unit.',
        signature:
          'apoc.date.parse(time :: STRING, unit = ms :: STRING, format = yyyy-MM-dd HH:mm:ss :: STRING, timezone =  :: STRING) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The datetime to convert.',
            name: 'time',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=ms, type=STRING}',
            description: 'The conversion unit.',
            name: 'unit',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=yyyy-MM-dd HH:mm:ss, type=STRING}',
            description: 'The format the given datetime is in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'The timezone the given datetime is in.',
            name: 'timezone',
            type: 'STRING',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.date.systemTimezone': {
        name: 'apoc.date.systemTimezone',
        category: '',
        description:
          'Returns the display name of the system time zone (e.g. Europe/London).',
        signature: 'apoc.date.systemTimezone() :: STRING',
        isBuiltIn: false,
        argumentDescription: [],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.date.toISO8601': {
        name: 'apoc.date.toISO8601',
        category: '',
        description:
          'Returns a `STRING` representation of a specified time value in the ISO8601 format.',
        signature:
          'apoc.date.toISO8601(time :: INTEGER, unit = ms :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The timestamp since epoch to format.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=ms, type=STRING}',
            description: 'The unit of the given timestamp.',
            name: 'unit',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.date.toYears': {
        name: 'apoc.date.toYears',
        category: '',
        description:
          'Converts the given timestamp or the given date into a `FLOAT` representing years.',
        signature:
          'apoc.date.toYears(value :: ANY, format = yyyy-MM-dd HH:mm:ss :: STRING) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The timestamp or datetime string to extract the years from.',
            name: 'value',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=yyyy-MM-dd HH:mm:ss, type=STRING}',
            description: 'The format the given datetime string is in.',
            name: 'format',
            type: 'STRING',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.diff.nodes': {
        name: 'apoc.diff.nodes',
        category: '',
        description:
          'Returns a `MAP` detailing the differences between the two given `NODE` values.',
        signature:
          'apoc.diff.nodes(leftNode :: NODE, rightNode :: NODE) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The first node to compare against the second node.',
            name: 'leftNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The second node to compare against the first node.',
            name: 'rightNode',
            type: 'NODE',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.hashing.fingerprint': {
        name: 'apoc.hashing.fingerprint',
        category: '',
        description:
          'Calculates a MD5 checksum over a `NODE` or `RELATIONSHIP` (identical entities share the same checksum).\nUnsuitable for cryptographic use-cases.',
        signature:
          'apoc.hashing.fingerprint(object :: ANY, excludedPropertyKeys = [] :: LIST<STRING>) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A node or relationship to hash.',
            name: 'object',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[], type=LIST<STRING>}',
            description: 'Property keys to exclude from the hashing.',
            name: 'excludedPropertyKeys',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.hashing.fingerprintGraph': {
        name: 'apoc.hashing.fingerprintGraph',
        category: '',
        description:
          'Calculates a MD5 checksum over the full graph.\nThis function uses in-memory data structures.\nUnsuitable for cryptographic use-cases.',
        signature:
          'apoc.hashing.fingerprintGraph(propertyExcludes = [] :: LIST<STRING>) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[], type=LIST<STRING>}',
            description: 'Property keys to exclude from the hashing.',
            name: 'propertyExcludes',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.hashing.fingerprinting': {
        name: 'apoc.hashing.fingerprinting',
        category: '',
        description:
          'Calculates a MD5 checksum over a `NODE` or `RELATIONSHIP` (identical entities share the same checksum).\nUnlike `apoc.hashing.fingerprint()`, this function supports a number of config parameters.\nUnsuitable for cryptographic use-cases.',
        signature:
          'apoc.hashing.fingerprinting(object :: ANY, config = {} :: MAP) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A node or relationship to hash.',
            name: 'object',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    digestAlgorithm = "MD5" :: STRING,\n    strategy = "LAZY" :: STRING,\n    nodeAllowMap = [] :: MAP<STRING, LIST<STRING>>,\n    relAllowMap = [] :: MAP<STRING, LIST<STRING>>,\n    relDisallowMap = [] :: MAP<STRING, LIST<STRING>>,\n    mapAllowList = [] :: LIST<STRING>,\n    mapDisallowList = [] :: LIST<STRING>,\n    allNodesAllowList = [] :: LIST<STRING>,\n    allNodesDisallowList = [] :: LIST<STRING>,\n    allRelsAllowList = [] :: LIST<STRING>,\n    allRelsDisallowList = [] :: LIST<STRING>\n}',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.json.path': {
        name: 'apoc.json.path',
        category: '',
        description: 'Returns the given JSON path.',
        signature:
          'apoc.json.path(json :: STRING, path = $ :: STRING, pathOptions = null :: LIST<STRING>) :: ANY',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A JSON string.',
            name: 'json',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=$, type=STRING}',
            description: 'The path to extract from the JSON string.',
            name: 'path',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=LIST<STRING>}',
            description:
              'A list of JSON path option enum values: ALWAYS_RETURN_LIST, AS_PATH_LIST, DEFAULT_PATH_LEAF_TO_NULL, REQUIRE_PROPERTIES, SUPPRESS_EXCEPTIONS.',
            name: 'pathOptions',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: 'ANY',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.label.exists': {
        name: 'apoc.label.exists',
        category: '',
        description:
          'Returns true or false depending on whether or not the given label exists.',
        signature: 'apoc.label.exists(node :: ANY, label :: STRING) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A node to check for the given label on.',
            name: 'node',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The given label to check for existence.',
            name: 'label',
            type: 'STRING',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.clean': {
        name: 'apoc.map.clean',
        category: '',
        description:
          'Filters the keys and values contained in the given `LIST<ANY>` values.',
        signature:
          'apoc.map.clean(map :: MAP, keys :: LIST<STRING>, values :: LIST<ANY>) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The map to clean.',
            name: 'map',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The list of property keys to be removed.',
            name: 'keys',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The list of values to be removed.',
            name: 'values',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.flatten': {
        name: 'apoc.map.flatten',
        category: '',
        description:
          'Flattens nested items in the given `MAP`.\nThis function is the reverse of the `apoc.map.unflatten` function.',
        signature:
          'apoc.map.flatten(map :: MAP, delimiter = . :: STRING) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A nested map to flatten.',
            name: 'map',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=., type=STRING}',
            description:
              'The delimiter used to separate the levels of the flattened map.',
            name: 'delimiter',
            type: 'STRING',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.fromLists': {
        name: 'apoc.map.fromLists',
        category: '',
        description:
          'Creates a `MAP` from the keys and values in the given `LIST<ANY>` values.',
        signature:
          'apoc.map.fromLists(keys :: LIST<STRING>, values :: LIST<ANY>) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A list of keys to create a map from.',
            name: 'keys',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description:
              'A list of values associated with the keys to create a map from.',
            name: 'values',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.fromNodes': {
        name: 'apoc.map.fromNodes',
        category: '',
        description:
          'Returns a `MAP` of the given prop to the node of the given label.',
        signature: 'apoc.map.fromNodes(label :: STRING, prop :: STRING) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The node labels from which the map will be created.',
            name: 'label',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The property name to map the returned nodes by.',
            name: 'prop',
            type: 'STRING',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.fromPairs': {
        name: 'apoc.map.fromPairs',
        category: '',
        description:
          'Creates a `MAP` from the given `LIST<LIST<ANY>>` of key-value pairs.',
        signature: 'apoc.map.fromPairs(pairs :: LIST<LIST<ANY>>) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A list of pairs to create a map from.',
            name: 'pairs',
            type: 'LIST<LIST<ANY>>',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.fromValues': {
        name: 'apoc.map.fromValues',
        category: '',
        description:
          'Creates a `MAP` from the alternating keys and values in the given `LIST<ANY>`.',
        signature: 'apoc.map.fromValues(values :: LIST<ANY>) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A list of keys and values listed pairwise to create a map from.',
            name: 'values',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.get': {
        name: 'apoc.map.get',
        category: '',
        description:
          'Returns a value for the given key.\nIf the given key does not exist, or lacks a default value, this function will throw an exception.',
        signature:
          'apoc.map.get(map :: MAP, key :: STRING, value = null :: ANY, fail = true :: BOOLEAN) :: ANY',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The map to extract a value from.',
            name: 'map',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The key to extract.',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=ANY}',
            description: 'The default value of the given key.',
            name: 'value',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=true, type=BOOLEAN}',
            description:
              'If a key is not present and no default is provided, it will either throw an exception if true, or return a null value',
            name: 'fail',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: 'ANY',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.groupBy': {
        name: 'apoc.map.groupBy',
        category: '',
        description:
          'Creates a `MAP` of the `LIST<ANY>` keyed by the given property, with single values.',
        signature:
          'apoc.map.groupBy(values :: LIST<ANY>, key :: STRING) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A list of map values to be grouped.',
            name: 'values',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The key to group the map values by.',
            name: 'key',
            type: 'STRING',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.groupByMulti': {
        name: 'apoc.map.groupByMulti',
        category: '',
        description:
          'Creates a `MAP` of the `LIST<ANY>` values keyed by the given property, with the `LIST<ANY>` values.',
        signature:
          'apoc.map.groupByMulti(values :: LIST<ANY>, key :: STRING) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A list of map values to be grouped.',
            name: 'values',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The key to group the map values by.',
            name: 'key',
            type: 'STRING',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.merge': {
        name: 'apoc.map.merge',
        category: '',
        description: 'Merges the two given `MAP` values into one `MAP`.',
        signature: 'apoc.map.merge(map1 :: MAP, map2 :: MAP) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The first map to merge with the second map.',
            name: 'map1',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The second map to merge with the first map.',
            name: 'map2',
            type: 'MAP',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.mergeList': {
        name: 'apoc.map.mergeList',
        category: '',
        description:
          'Merges all `MAP` values in the given `LIST<MAP<STRING, ANY>>` into one `MAP`.',
        signature: 'apoc.map.mergeList(maps :: LIST<MAP>) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A list of maps to merge.',
            name: 'maps',
            type: 'LIST<MAP>',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.mget': {
        name: 'apoc.map.mget',
        category: '',
        description:
          'Returns a `LIST<ANY>` for the given keys.\nIf one of the keys does not exist, or lacks a default value, this function will throw an exception.',
        signature:
          'apoc.map.mget(map :: MAP, keys :: LIST<STRING>, values = [] :: LIST<ANY>, fail = true :: BOOLEAN) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The map to extract a list of values from.',
            name: 'map',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The list of keys to extract.',
            name: 'keys',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[], type=LIST<ANY>}',
            description: 'The default values of the given keys.',
            name: 'values',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=true, type=BOOLEAN}',
            description:
              'If a key is not present and no default is provided, it will either throw an exception if true, or return a null value',
            name: 'fail',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.removeKey': {
        name: 'apoc.map.removeKey',
        category: '',
        description:
          'Removes the given key from the `MAP` (recursively if recursive is true).',
        signature:
          'apoc.map.removeKey(map :: MAP, key :: STRING, config = {} :: MAP) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The map to be updated.',
            name: 'map',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The key to remove from the map.',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: '{ recursive = false :: BOOLEAN }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.removeKeys': {
        name: 'apoc.map.removeKeys',
        category: '',
        description:
          'Removes the given keys from the `MAP` (recursively if recursive is true).',
        signature:
          'apoc.map.removeKeys(map :: MAP, keys :: LIST<STRING>, config = {} :: MAP) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The map to be updated.',
            name: 'map',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The keys to remove from the map.',
            name: 'keys',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: '{ recursive = false :: BOOLEAN }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.setKey': {
        name: 'apoc.map.setKey',
        category: '',
        description: 'Adds or updates the given entry in the `MAP`.',
        signature:
          'apoc.map.setKey(map :: MAP, key :: STRING, value :: ANY) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The map to be updated.',
            name: 'map',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The key to add or update the map with.',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The value to set the given key to.',
            name: 'value',
            type: 'ANY',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.setLists': {
        name: 'apoc.map.setLists',
        category: '',
        description:
          'Adds or updates the given keys/value pairs provided in `LIST<ANY>` format (e.g. [key1, key2],[value1, value2]) in a `MAP`.',
        signature:
          'apoc.map.setLists(map :: MAP, keys :: LIST<STRING>, values :: LIST<ANY>) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The map to be updated.',
            name: 'map',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'A list of keys to add or update the map with.',
            name: 'keys',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description:
              'A list of values associated to the keys to add or update the map with.',
            name: 'values',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.setPairs': {
        name: 'apoc.map.setPairs',
        category: '',
        description:
          'Adds or updates the given key/value pairs (e.g. [key1,value1],[key2,value2]) in a `MAP`.',
        signature:
          'apoc.map.setPairs(map :: MAP, pairs :: LIST<LIST<ANY>>) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The map to be updated.',
            name: 'map',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'A list of pairs to add or update the map with.',
            name: 'pairs',
            type: 'LIST<LIST<ANY>>',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.setValues': {
        name: 'apoc.map.setValues',
        category: '',
        description:
          'Adds or updates the alternating key/value pairs (e.g. [key1,value1,key2,value2]) in a `MAP`.',
        signature: 'apoc.map.setValues(map :: MAP, pairs :: LIST<ANY>) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The map to be updated.',
            name: 'map',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              'A list of items listed pairwise to add or update the map with.',
            name: 'pairs',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.sortedProperties': {
        name: 'apoc.map.sortedProperties',
        category: '',
        description:
          'Returns a `LIST<ANY>` of key/value pairs.\nThe pairs are sorted by alphabetically by key, with optional case sensitivity.',
        signature:
          'apoc.map.sortedProperties(map :: MAP, ignoreCase = true :: BOOLEAN) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The map to extract the properties from.',
            name: 'map',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=true, type=BOOLEAN}',
            description:
              'Whether or not to take the case into account when sorting.',
            name: 'ignoreCase',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.submap': {
        name: 'apoc.map.submap',
        category: '',
        description:
          'Returns a sub-map for the given keys.\nIf one of the keys does not exist, or lacks a default value, this function will throw an exception.',
        signature:
          'apoc.map.submap(map :: MAP, keys :: LIST<STRING>, values = [] :: LIST<ANY>, fail = true :: BOOLEAN) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The map to extract a submap from.',
            name: 'map',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The list of keys to extract into a submap.',
            name: 'keys',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[], type=LIST<ANY>}',
            description: 'The default values of the given keys.',
            name: 'values',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=true, type=BOOLEAN}',
            description:
              'If a key is not present and no default is provided, it will either throw an exception if true, or return a null value.',
            name: 'fail',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.unflatten': {
        name: 'apoc.map.unflatten',
        category: '',
        description:
          'Unflattens items in the given `MAP` to nested items.\nThis function is the reverse of the `apoc.map.flatten` function.',
        signature:
          'apoc.map.unflatten(map :: MAP, delimiter = . :: STRING) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The map to unflatten.',
            name: 'map',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=., type=STRING}',
            description:
              'The delimiter used to separate the levels of the flattened map.',
            name: 'delimiter',
            type: 'STRING',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.updateTree': {
        name: 'apoc.map.updateTree',
        category: '',
        description:
          'Adds the data `MAP` on each level of the nested tree, where the key-value pairs match.',
        signature:
          'apoc.map.updateTree(tree :: MAP, key :: STRING, data :: LIST<LIST<ANY>>) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The map to be updated.',
            name: 'tree',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The name of the key to match on.',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'A list of pairs, where the first item is the value to match with the given key, and the second is a map to add to the tree.',
            name: 'data',
            type: 'LIST<LIST<ANY>>',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.map.values': {
        name: 'apoc.map.values',
        category: '',
        description:
          'Returns a `LIST<ANY>` indicated by the given keys (returns a null value if a given key is missing).',
        signature:
          'apoc.map.values(map :: MAP, keys = [] :: LIST<STRING>, addNullsForMissing = false :: BOOLEAN) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A map to extract values from.',
            name: 'map',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[], type=LIST<STRING>}',
            description: 'A list of keys to extract from the given map.',
            name: 'keys',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=false, type=BOOLEAN}',
            description:
              'Whether or not to return missing values as null values.',
            name: 'addNullsForMissing',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.math.cosh': {
        name: 'apoc.math.cosh',
        category: '',
        description: 'Returns the hyperbolic cosine.',
        signature: 'apoc.math.cosh(value :: FLOAT) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An angle in radians.',
            name: 'value',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.math.coth': {
        name: 'apoc.math.coth',
        category: '',
        description: 'Returns the hyperbolic cotangent.',
        signature: 'apoc.math.coth(value :: FLOAT) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An angle in radians.',
            name: 'value',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.math.csch': {
        name: 'apoc.math.csch',
        category: '',
        description: 'Returns the hyperbolic cosecant.',
        signature: 'apoc.math.csch(value :: FLOAT) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An angle in radians.',
            name: 'value',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.math.maxByte': {
        name: 'apoc.math.maxByte',
        category: '',
        description: 'Returns the maximum value of a byte.',
        signature: 'apoc.math.maxByte() :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.math.maxDouble': {
        name: 'apoc.math.maxDouble',
        category: '',
        description:
          'Returns the largest positive finite value of type double.',
        signature: 'apoc.math.maxDouble() :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.math.maxInt': {
        name: 'apoc.math.maxInt',
        category: '',
        description: 'Returns the maximum value of an integer.',
        signature: 'apoc.math.maxInt() :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.math.maxLong': {
        name: 'apoc.math.maxLong',
        category: '',
        description: 'Returns the maximum value of a long.',
        signature: 'apoc.math.maxLong() :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.math.minByte': {
        name: 'apoc.math.minByte',
        category: '',
        description: 'Returns the minimum value of a byte.',
        signature: 'apoc.math.minByte() :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.math.minDouble': {
        name: 'apoc.math.minDouble',
        category: '',
        description:
          'Returns the smallest positive non-zero value of type double.',
        signature: 'apoc.math.minDouble() :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.math.minInt': {
        name: 'apoc.math.minInt',
        category: '',
        description: 'Returns the minimum value of an integer.',
        signature: 'apoc.math.minInt() :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.math.minLong': {
        name: 'apoc.math.minLong',
        category: '',
        description: 'Returns the minimum value of a long.',
        signature: 'apoc.math.minLong() :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.math.sech': {
        name: 'apoc.math.sech',
        category: '',
        description: 'Returns the hyperbolic secant of the given value.',
        signature: 'apoc.math.sech(value :: FLOAT) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An angle in radians.',
            name: 'value',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.math.sigmoid': {
        name: 'apoc.math.sigmoid',
        category: '',
        description: 'Returns the sigmoid of the given value.',
        signature: 'apoc.math.sigmoid(value :: FLOAT) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An angle in radians.',
            name: 'value',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.math.sigmoidPrime': {
        name: 'apoc.math.sigmoidPrime',
        category: '',
        description:
          'Returns the sigmoid prime [ sigmoid(val) * (1 - sigmoid(val)) ] of the given value.',
        signature: 'apoc.math.sigmoidPrime(value :: FLOAT) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An angle in radians.',
            name: 'value',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.math.sinh': {
        name: 'apoc.math.sinh',
        category: '',
        description: 'Returns the hyperbolic sine of the given value.',
        signature: 'apoc.math.sinh(value :: FLOAT) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An angle in radians.',
            name: 'value',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.math.tanh': {
        name: 'apoc.math.tanh',
        category: '',
        description: 'Returns the hyperbolic tangent of the given value.',
        signature: 'apoc.math.tanh(value :: FLOAT) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An angle in radians.',
            name: 'value',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.meta.cypher.isType': {
        name: 'apoc.meta.cypher.isType',
        category: '',
        description: 'Returns true if the given value matches the given type.',
        signature:
          'apoc.meta.cypher.isType(value :: ANY, type :: STRING) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An object to check the type of.',
            name: 'value',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The verification type.',
            name: 'type',
            type: 'STRING',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.meta.cypher.type': {
        name: 'apoc.meta.cypher.type',
        category: '',
        description: 'Returns the type name of the given value.',
        signature: 'apoc.meta.cypher.type(value :: ANY) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An object to get the type of.',
            name: 'value',
            type: 'ANY',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.meta.cypher.types': {
        name: 'apoc.meta.cypher.types',
        category: '',
        description:
          'Returns a `MAP` containing the type names of the given values.',
        signature: 'apoc.meta.cypher.types(props :: ANY) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A relationship, node or map to get the property types from.',
            name: 'props',
            type: 'ANY',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.meta.nodes.count': {
        name: 'apoc.meta.nodes.count',
        category: '',
        description:
          'Returns the sum of the `NODE` values with the given labels in the `LIST<STRING>`.',
        signature:
          'apoc.meta.nodes.count(nodes = [] :: LIST<STRING>, config = {} :: MAP) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[], type=LIST<STRING>}',
            description: 'A list of node labels.',
            name: 'nodes',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              'A relationship, node or map to get the property types from. { includeRels = [] :: LIST<STRING> }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.node.degree': {
        name: 'apoc.node.degree',
        category: '',
        description: 'Returns the total degrees of the given `NODE`.',
        signature:
          'apoc.node.degree(node :: NODE, relTypes =  :: STRING) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node to count the total number of relationships on.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              "The relationship types to restrict the count to. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
            name: 'relTypes',
            type: 'STRING',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.node.degree.in': {
        name: 'apoc.node.degree.in',
        category: '',
        description:
          'Returns the total number of incoming `RELATIONSHIP` values connected to the given `NODE`.',
        signature:
          'apoc.node.degree.in(node :: NODE, relTypes =  :: STRING) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node for which to count the total number of incoming relationships.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'The relationship type to restrict the count to.',
            name: 'relTypes',
            type: 'STRING',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.node.degree.out': {
        name: 'apoc.node.degree.out',
        category: '',
        description:
          'Returns the total number of outgoing `RELATIONSHIP` values from the given `NODE`.',
        signature:
          'apoc.node.degree.out(node :: NODE, relTypes =  :: STRING) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node for which to count the total number of outgoing relationships.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'The relationship type to restrict the count to.',
            name: 'relTypes',
            type: 'STRING',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.node.id': {
        name: 'apoc.node.id',
        category: '',
        description: 'Returns the id for the given virtual `NODE`.',
        signature: 'apoc.node.id(node :: NODE) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The node to return the id from.',
            name: 'node',
            type: 'NODE',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.node.labels': {
        name: 'apoc.node.labels',
        category: '',
        description: 'Returns the labels for the given virtual `NODE`.',
        signature: 'apoc.node.labels(node :: NODE) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The node to return labels from.',
            name: 'node',
            type: 'NODE',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.node.relationship.exists': {
        name: 'apoc.node.relationship.exists',
        category: '',
        description:
          'Returns a `BOOLEAN` based on whether the given `NODE` has a connecting `RELATIONSHIP` (or whether the given `NODE` has a connecting `RELATIONSHIP` of the given type and direction).',
        signature:
          'apoc.node.relationship.exists(node :: NODE, relTypes =  :: STRING) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node to check for the specified relationship types.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              "The relationship types to check for on the given node. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
            name: 'relTypes',
            type: 'STRING',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.node.relationship.types': {
        name: 'apoc.node.relationship.types',
        category: '',
        description:
          'Returns a `LIST<STRING>` of distinct `RELATIONSHIP` types for the given `NODE`.',
        signature:
          'apoc.node.relationship.types(node :: NODE, relTypes =  :: STRING) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node to return the connected relationship types from.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              "If not empty, provides an allow list of relationship types to be returned. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
            name: 'relTypes',
            type: 'STRING',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.node.relationships.exist': {
        name: 'apoc.node.relationships.exist',
        category: '',
        description:
          'Returns a `BOOLEAN` based on whether the given `NODE` has connecting `RELATIONSHIP` values (or whether the given `NODE` has connecting `RELATIONSHIP` values of the given type and direction).',
        signature:
          'apoc.node.relationships.exist(node :: NODE, relTypes =  :: STRING) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node to check for the specified relationship types.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              "The relationship types to check for on the given node. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|....",
            name: 'relTypes',
            type: 'STRING',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.nodes.connected': {
        name: 'apoc.nodes.connected',
        category: '',
        description:
          'Returns true when a given `NODE` is directly connected to another given `NODE`.\nThis function is optimized for dense nodes.',
        signature:
          'apoc.nodes.connected(startNode :: NODE, endNode :: NODE, types =  :: STRING) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node to check if it is directly connected to the second node.',
            name: 'startNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description:
              'The node to check if it is directly connected to the first node.',
            name: 'endNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              "If not empty, provides an allow list of relationship types the nodes can be connected by. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
            name: 'types',
            type: 'STRING',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.nodes.isDense': {
        name: 'apoc.nodes.isDense',
        category: '',
        description: 'Returns true if the given `NODE` is a dense node.',
        signature: 'apoc.nodes.isDense(node :: NODE) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The node to check for being dense or not.',
            name: 'node',
            type: 'NODE',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.nodes.relationship.types': {
        name: 'apoc.nodes.relationship.types',
        category: '',
        description:
          'Returns a `LIST<STRING>` of distinct `RELATIONSHIP` types from the given `LIST<NODE>` values.',
        signature:
          'apoc.nodes.relationship.types(nodes :: ANY, types =  :: STRING) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'Nodes to return connected relationship types from.',
            name: 'nodes',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              "If not empty, provides an allow list of relationship types to be returned. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
            name: 'types',
            type: 'STRING',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.nodes.relationships.exist': {
        name: 'apoc.nodes.relationships.exist',
        category: '',
        description:
          'Returns a `BOOLEAN` based on whether or not the given `NODE` values have the given `RELATIONSHIP` values.',
        signature:
          'apoc.nodes.relationships.exist(nodes :: ANY, types =  :: STRING) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'Nodes to check for the specified relationship types.',
            name: 'nodes',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              "The relationship types to check for on the given nodes. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
            name: 'types',
            type: 'STRING',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.number.arabicToRoman': {
        name: 'apoc.number.arabicToRoman',
        category: '',
        description: 'Converts the given Arabic numbers to Roman numbers.',
        signature: 'apoc.number.arabicToRoman(number :: ANY) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A number to be converted to a Roman number represented as a string.',
            name: 'number',
            type: 'ANY',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.number.exact.add': {
        name: 'apoc.number.exact.add',
        category: '',
        description:
          'Returns the result of adding the two given large numbers (using Java BigDecimal).',
        signature:
          'apoc.number.exact.add(stringA :: STRING, stringB :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A string representation of a number to be added to the second number.',
            name: 'stringA',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'A string representation of a number to be added to the first number.',
            name: 'stringB',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.number.exact.div': {
        name: 'apoc.number.exact.div',
        category: '',
        description:
          'Returns the result of dividing a given large number with another given large number (using Java BigDecimal).',
        signature:
          'apoc.number.exact.div(stringA :: STRING, stringB :: STRING, precision = 0 :: INTEGER, roundingMode = HALF_UP :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A string representation of a number to be divided by the second number.',
            name: 'stringA',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'A string representation of a number to divide the first number by.',
            name: 'stringB',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=0, type=INTEGER}',
            description: 'The rounding precision.',
            name: 'precision',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=HALF_UP, type=STRING}',
            description:
              'A precision rounding mode (`UP`, `DOWN`, `CEILING`, `FLOOR`, `HALF_UP`, `HALF_DOWN`, `HALF_EVEN`).',
            name: 'roundingMode',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.number.exact.mul': {
        name: 'apoc.number.exact.mul',
        category: '',
        description:
          'Returns the result of multiplying two given large numbers (using Java BigDecimal).',
        signature:
          'apoc.number.exact.mul(stringA :: STRING, stringB :: STRING, precision = 0 :: INTEGER, roundingMode = HALF_UP :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A string representation of a number to multiply by the second number.',
            name: 'stringA',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'A string representation of a number to multiply by the first number.',
            name: 'stringB',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=0, type=INTEGER}',
            description: 'The rounding precision.',
            name: 'precision',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=HALF_UP, type=STRING}',
            description:
              'A precision rounding mode (`UP`, `DOWN`, `CEILING`, `FLOOR`, `HALF_UP`, `HALF_DOWN`, `HALF_EVEN`).',
            name: 'roundingMode',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.number.exact.sub': {
        name: 'apoc.number.exact.sub',
        category: '',
        description:
          'Returns the result of subtracting a given large number from another given large number (using Java BigDecimal).',
        signature:
          'apoc.number.exact.sub(stringA :: STRING, stringB :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A string representation of a number to have a second number subtracted from.',
            name: 'stringA',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'A string representation of a number to subtract from the first number.',
            name: 'stringB',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.number.exact.toExact': {
        name: 'apoc.number.exact.toExact',
        category: '',
        description:
          'Returns the exact value of the given number (using Java BigDecimal).',
        signature: 'apoc.number.exact.toExact(number :: INTEGER) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An integer to receive the exact value of.',
            name: 'number',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.number.exact.toFloat': {
        name: 'apoc.number.exact.toFloat',
        category: '',
        description:
          'Returns the `FLOAT` of the given large number (using Java BigDecimal).',
        signature:
          'apoc.number.exact.toFloat(string :: STRING, precision = 0 :: INTEGER, roundingMode = HALF_UP :: STRING) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A large number represented as a string.',
            name: 'string',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=0, type=INTEGER}',
            description: 'The rounding precision.',
            name: 'precision',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=HALF_UP, type=STRING}',
            description:
              'A precision rounding mode (`UP`, `DOWN`, `CEILING`, `FLOOR`, `HALF_UP`, `HALF_DOWN`, `HALF_EVEN`).',
            name: 'roundingMode',
            type: 'STRING',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.number.exact.toInteger': {
        name: 'apoc.number.exact.toInteger',
        category: '',
        description:
          'Returns the `INTEGER` of the given large number (using Java BigDecimal).',
        signature:
          'apoc.number.exact.toInteger(string :: STRING, precision = 0 :: INTEGER, roundingMode = HALF_UP :: STRING) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A large number represented as a string.',
            name: 'string',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=0, type=INTEGER}',
            description: 'The rounding precision.',
            name: 'precision',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=HALF_UP, type=STRING}',
            description:
              'A precision rounding mode (`UP`, `DOWN`, `CEILING`, `FLOOR`, `HALF_UP`, `HALF_DOWN`, `HALF_EVEN`).',
            name: 'roundingMode',
            type: 'STRING',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.number.format': {
        name: 'apoc.number.format',
        category: '',
        description:
          'Formats the given `INTEGER` or `FLOAT` using the given pattern and language to produce a `STRING`.',
        signature:
          'apoc.number.format(number :: ANY, pattern =  :: STRING, language =  :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The number to format.',
            name: 'number',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'The pattern to format the number in.',
            name: 'pattern',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'An ISO-compliant language tag.',
            name: 'language',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.number.parseFloat': {
        name: 'apoc.number.parseFloat',
        category: '',
        description:
          'Parses the given `STRING` using the given pattern and language to produce a `FLOAT`.',
        signature:
          'apoc.number.parseFloat(text :: STRING, pattern =  :: STRING, language =  :: STRING) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to parse a float from.',
            name: 'text',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'The pattern the given string is in.',
            name: 'pattern',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'An ISO-compliant language tag.',
            name: 'language',
            type: 'STRING',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.number.parseInt': {
        name: 'apoc.number.parseInt',
        category: '',
        description:
          'Parses the given `STRING` using the given pattern and language to produce a `INTEGER`.',
        signature:
          'apoc.number.parseInt(text :: STRING, pattern =  :: STRING, language =  :: STRING) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to parse an integer from.',
            name: 'text',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'The pattern the given string is in.',
            name: 'pattern',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'An ISO-compliant language tag.',
            name: 'language',
            type: 'STRING',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.number.romanToArabic': {
        name: 'apoc.number.romanToArabic',
        category: '',
        description: 'Converts the given Roman numbers to Arabic numbers.',
        signature:
          'apoc.number.romanToArabic(romanNumber :: STRING) :: INTEGER | FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A Roman number to be converted.',
            name: 'romanNumber',
            type: 'STRING',
          },
        ],
        returnDescription: 'INTEGER | FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.path.combine': {
        name: 'apoc.path.combine',
        category: '',
        description: 'Combines the two given `PATH` values into one `PATH`.',
        signature: 'apoc.path.combine(path1 :: PATH, path2 :: PATH) :: PATH',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The first path to combine with the second path.',
            name: 'path1',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            description: 'The second path to combine with the first path.',
            name: 'path2',
            type: 'PATH',
          },
        ],
        returnDescription: 'PATH',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.path.create': {
        name: 'apoc.path.create',
        category: '',
        description:
          'Returns a `PATH` from the given start `NODE` and `LIST<RELATIONSHIP>`.',
        signature:
          'apoc.path.create(startNode :: NODE, rels = [] :: LIST<RELATIONSHIP>) :: PATH',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The starting node of the new path.',
            name: 'startNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[], type=LIST<RELATIONSHIP>}',
            description: 'The list of relationships to create the path from.',
            name: 'rels',
            type: 'LIST<RELATIONSHIP>',
          },
        ],
        returnDescription: 'PATH',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.path.elements': {
        name: 'apoc.path.elements',
        category: '',
        description:
          'Converts the given `PATH` into a `LIST<NODE | RELATIONSHIP>`.',
        signature: 'apoc.path.elements(path :: PATH) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The path to be converted into a list of nodes and relationships.',
            name: 'path',
            type: 'PATH',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.path.slice': {
        name: 'apoc.path.slice',
        category: '',
        description:
          'Returns a new `PATH` of the given length, taken from the given `PATH` at the given offset.',
        signature:
          'apoc.path.slice(path :: PATH, offset = 0 :: INTEGER, length = -1 :: INTEGER) :: PATH',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The path to be sliced.',
            name: 'path',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=0, type=INTEGER}',
            description: 'The offset to begin the new path from.',
            name: 'offset',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=-1, type=INTEGER}',
            description: 'The length of the new path.',
            name: 'length',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'PATH',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.rel.endNode': {
        name: 'apoc.rel.endNode',
        category: '',
        description:
          'Returns the end `NODE` for the given virtual `RELATIONSHIP`.',
        signature: 'apoc.rel.endNode(rel :: RELATIONSHIP) :: NODE',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The relationship to get the end node from.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
        ],
        returnDescription: 'NODE',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.rel.id': {
        name: 'apoc.rel.id',
        category: '',
        description: 'Returns the id for the given virtual `RELATIONSHIP`.',
        signature: 'apoc.rel.id(rel :: RELATIONSHIP) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The relationship to get the id from.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.rel.startNode': {
        name: 'apoc.rel.startNode',
        category: '',
        description:
          'Returns the start `NODE` for the given virtual `RELATIONSHIP`.',
        signature: 'apoc.rel.startNode(rel :: RELATIONSHIP) :: NODE',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The relationship to get the start node from.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
        ],
        returnDescription: 'NODE',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.rel.type': {
        name: 'apoc.rel.type',
        category: '',
        description: 'Returns the type for the given virtual `RELATIONSHIP`.',
        signature: 'apoc.rel.type(rel :: RELATIONSHIP) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The relationship to get the type from.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.schema.node.constraintExists': {
        name: 'apoc.schema.node.constraintExists',
        category: '',
        description:
          'Returns a `BOOLEAN` depending on whether or not a constraint exists for the given `NODE` label with the given property names.',
        signature:
          'apoc.schema.node.constraintExists(labelName :: STRING, propertyName :: LIST<STRING>) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The node label to check for a constraint on.',
            name: 'labelName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The property names to check for a constraint on.',
            name: 'propertyName',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.schema.node.indexExists': {
        name: 'apoc.schema.node.indexExists',
        category: '',
        description:
          'Returns a `BOOLEAN` depending on whether or not an index exists for the given `NODE` label with the given property names.',
        signature:
          'apoc.schema.node.indexExists(labelName :: STRING, propertyName :: LIST<STRING>) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The node label to check for an index on.',
            name: 'labelName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The property names to check for an index on.',
            name: 'propertyName',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.schema.relationship.constraintExists': {
        name: 'apoc.schema.relationship.constraintExists',
        category: '',
        description:
          'Returns a `BOOLEAN` depending on whether or not a constraint exists for the given `RELATIONSHIP` type with the given property names.',
        signature:
          'apoc.schema.relationship.constraintExists(type :: STRING, propertyName :: LIST<STRING>) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The relationship type to check for a constraint on.',
            name: 'type',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The property names to check for a constraint on.',
            name: 'propertyName',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.schema.relationship.indexExists': {
        name: 'apoc.schema.relationship.indexExists',
        category: '',
        description:
          'Returns a `BOOLEAN` depending on whether or not an index exists for the given `RELATIONSHIP` type with the given property names.',
        signature:
          'apoc.schema.relationship.indexExists(type :: STRING, propertyName :: LIST<STRING>) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The relationship type to check for an index on.',
            name: 'type',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The property names to check for an index on.',
            name: 'propertyName',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.scoring.existence': {
        name: 'apoc.scoring.existence',
        category: '',
        description: 'Returns the given score if true, 0 if false.',
        signature:
          'apoc.scoring.existence(score :: INTEGER, exists :: BOOLEAN) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The score to return if the exists is true.',
            name: 'score',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Whether or not to return the score.',
            name: 'exists',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.scoring.pareto': {
        name: 'apoc.scoring.pareto',
        category: '',
        description:
          'Applies a Pareto scoring function over the given `INTEGER` values.',
        signature:
          'apoc.scoring.pareto(minimumThreshold :: INTEGER, eightyPercentValue :: INTEGER, maximumValue :: INTEGER, score :: INTEGER) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The minimum threshold for the score.',
            name: 'minimumThreshold',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The eighty percent value.',
            name: 'eightyPercentValue',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The maximum value.',
            name: 'maximumValue',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The score.',
            name: 'score',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.temporal.format': {
        name: 'apoc.temporal.format',
        category: '',
        description:
          'Formats the given temporal value into the given time format.',
        signature:
          'apoc.temporal.format(temporal :: ANY, format = yyyy-MM-dd :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A temporal value to be formatted.',
            name: 'temporal',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=yyyy-MM-dd, type=STRING}',
            description: 'The format to return the temporal value in.',
            name: 'format',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.temporal.formatDuration': {
        name: 'apoc.temporal.formatDuration',
        category: '',
        description: 'Formats the given duration into the given time format.',
        signature:
          'apoc.temporal.formatDuration(input :: ANY, format :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The duration value to be formatted into a string.',
            name: 'input',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The format to return the duration in.',
            name: 'format',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.temporal.toZonedTemporal': {
        name: 'apoc.temporal.toZonedTemporal',
        category: '',
        description:
          'Parses the given date `STRING` using the specified format into the given time zone.',
        signature:
          'apoc.temporal.toZonedTemporal(time :: STRING, format = yyyy-MM-dd HH:mm:ss :: STRING, timezone = UTC :: STRING) :: ZONED DATETIME',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The date string to be parsed.',
            name: 'time',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=yyyy-MM-dd HH:mm:ss, type=STRING}',
            description: 'The format of the given date string.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=UTC, type=STRING}',
            description: 'The timezone the given string is in.',
            name: 'timezone',
            type: 'STRING',
          },
        ],
        returnDescription: 'ZONED DATETIME',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.base64Decode': {
        name: 'apoc.text.base64Decode',
        category: '',
        description: 'Decodes the given Base64 encoded `STRING`.',
        signature: 'apoc.text.base64Decode(text :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to be decoded using base64.',
            name: 'text',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.base64Encode': {
        name: 'apoc.text.base64Encode',
        category: '',
        description: 'Encodes the given `STRING` with Base64.',
        signature: 'apoc.text.base64Encode(text :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to be encoded using base64.',
            name: 'text',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.base64UrlDecode': {
        name: 'apoc.text.base64UrlDecode',
        category: '',
        description: 'Decodes the given Base64 encoded URL.',
        signature: 'apoc.text.base64UrlDecode(url :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The url to be decoded using base64.',
            name: 'url',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.base64UrlEncode': {
        name: 'apoc.text.base64UrlEncode',
        category: '',
        description: 'Encodes the given URL with Base64.',
        signature: 'apoc.text.base64UrlEncode(url :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The url to be encoded with base64.',
            name: 'url',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.byteCount': {
        name: 'apoc.text.byteCount',
        category: '',
        description: 'Returns the size of the given `STRING` in bytes.',
        signature:
          'apoc.text.byteCount(text :: STRING, charset = UTF-8 :: STRING) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to get the size of in bytes.',
            name: 'text',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=UTF-8, type=STRING}',
            description: 'The name of a supported charset.',
            name: 'charset',
            type: 'STRING',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.bytes': {
        name: 'apoc.text.bytes',
        category: '',
        description: 'Returns the given `STRING` as bytes.',
        signature:
          'apoc.text.bytes(text :: STRING, charset = UTF-8 :: STRING) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to get the bytes from.',
            name: 'text',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=UTF-8, type=STRING}',
            description: 'The name of a supported charset.',
            name: 'charset',
            type: 'STRING',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.camelCase': {
        name: 'apoc.text.camelCase',
        category: '',
        description: 'Converts the given `STRING` to camel case.',
        signature: 'apoc.text.camelCase(text :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to be converted to camel case.',
            name: 'text',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.capitalize': {
        name: 'apoc.text.capitalize',
        category: '',
        description: 'Capitalizes the first letter of the given `STRING`.',
        signature: 'apoc.text.capitalize(text :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string in which to capitalize the first letter.',
            name: 'text',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.capitalizeAll': {
        name: 'apoc.text.capitalizeAll',
        category: '',
        description:
          'Capitalizes the first letter of every word in the given `STRING`.',
        signature: 'apoc.text.capitalizeAll(text :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string in which to capitalize every word.',
            name: 'text',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.charAt': {
        name: 'apoc.text.charAt',
        category: '',
        description:
          'Returns the `INTEGER` value of the character at the given index.',
        signature:
          'apoc.text.charAt(text :: STRING, index :: INTEGER) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The string from which a character is taken to be converted into an integer value.',
            name: 'text',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The index of the character in the given string to convert.',
            name: 'index',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.clean': {
        name: 'apoc.text.clean',
        category: '',
        description:
          'Strips the given `STRING` of everything except alpha numeric characters and converts it to lower case.',
        signature: 'apoc.text.clean(text :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The string to be stripped of all non-alphanumeric characters and converted to lowercase.',
            name: 'text',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.code': {
        name: 'apoc.text.code',
        category: '',
        description: 'Converts the `INTEGER` value into a `STRING`.',
        signature: 'apoc.text.code(codepoint :: INTEGER) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An integer to be converted into a character.',
            name: 'codepoint',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.compareCleaned': {
        name: 'apoc.text.compareCleaned',
        category: '',
        description:
          'Compares two given `STRING` values stripped of everything except alpha numeric characters converted to lower case.',
        signature:
          'apoc.text.compareCleaned(text1 :: STRING, text2 :: STRING) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The first string to be stripped of all non-alphanumeric characters and compared to the second string.',
            name: 'text1',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The second string to be stripped of all non-alphanumeric characters and compared to the first string.',
            name: 'text2',
            type: 'STRING',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.decapitalize': {
        name: 'apoc.text.decapitalize',
        category: '',
        description:
          'Turns the first letter of the given `STRING` from upper case to lower case.',
        signature: 'apoc.text.decapitalize(text :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The string in which to decapitalize the first letter.',
            name: 'text',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.decapitalizeAll': {
        name: 'apoc.text.decapitalizeAll',
        category: '',
        description:
          'Turns the first letter of every word in the given `STRING` to lower case.',
        signature: 'apoc.text.decapitalizeAll(text :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string in which to decapitalize every word.',
            name: 'text',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.distance': {
        name: 'apoc.text.distance',
        category: '',
        description:
          'Compares the two given `STRING` values using the Levenshtein distance algorithm.',
        signature:
          'apoc.text.distance(text1 :: STRING, text2 :: STRING) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The first string to be compared against the second.',
            name: 'text1',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The second string to be compared against the first.',
            name: 'text2',
            type: 'STRING',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.doubleMetaphone': {
        name: 'apoc.text.doubleMetaphone',
        category: '',
        description:
          'Returns the double metaphone phonetic encoding of all words in the given `STRING` value.',
        signature: 'apoc.text.doubleMetaphone(value :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The string to be encoded using the double metaphone phonetic encoding.',
            name: 'value',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.format': {
        name: 'apoc.text.format',
        category: '',
        description: 'Formats the given `STRING` with the given parameters.',
        signature:
          'apoc.text.format(text :: STRING, params :: LIST<ANY>, language = en :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The format string.',
            name: 'text',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'Arguments referenced by the format specifiers in the format string.',
            name: 'params',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=en, type=STRING}',
            description:
              'An ISO 639 alpha-2 or alpha-3 language code, or a language subtag up to 8 characters in length.',
            name: 'language',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.fuzzyMatch': {
        name: 'apoc.text.fuzzyMatch',
        category: '',
        description:
          'Performs a fuzzy match search of the two given `STRING` values.',
        signature:
          'apoc.text.fuzzyMatch(text1 :: STRING, text2 :: STRING) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The first string to be compared against the second.',
            name: 'text1',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The second string to be compared against the first.',
            name: 'text2',
            type: 'STRING',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.hammingDistance': {
        name: 'apoc.text.hammingDistance',
        category: '',
        description:
          'Compares the two given `STRING` values using the Hamming distance algorithm.',
        signature:
          'apoc.text.hammingDistance(text1 :: STRING, text2 :: STRING) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The first string to be compared against the second.',
            name: 'text1',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The second string to be compared against the first.',
            name: 'text2',
            type: 'STRING',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.hexCharAt': {
        name: 'apoc.text.hexCharAt',
        category: '',
        description:
          'Returns the hexadecimal value of the given `STRING` at the given index.',
        signature:
          'apoc.text.hexCharAt(text :: STRING, index :: INTEGER) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The string from which to take a character and convert it into a hexadecimal value represented as a string',
            name: 'text',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The index of the character in the given string to convert.',
            name: 'index',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.hexValue': {
        name: 'apoc.text.hexValue',
        category: '',
        description: 'Returns the hexadecimal value of the given value.',
        signature: 'apoc.text.hexValue(value :: INTEGER) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The value to convert into a hexidecimal value represented as a string.',
            name: 'value',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.indexOf': {
        name: 'apoc.text.indexOf',
        category: '',
        description:
          'Returns the first occurrence of the lookup `STRING` in the given `STRING`, or -1 if not found.',
        signature:
          'apoc.text.indexOf(text :: STRING, lookup :: STRING, from = 0 :: INTEGER, to = -1 :: INTEGER) :: INTEGER',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to search for the lookup string in.',
            name: 'text',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The lookup string to search for in the given string.',
            name: 'lookup',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=0, type=INTEGER}',
            description: 'The index at which to start the search.',
            name: 'from',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=-1, type=INTEGER}',
            description: 'The index at which to stop the search.',
            name: 'to',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.indexesOf': {
        name: 'apoc.text.indexesOf',
        category: '',
        description:
          'Returns all occurrences of the lookup `STRING` in the given `STRING`, or an empty list if not found.',
        signature:
          'apoc.text.indexesOf(text :: STRING, lookup :: STRING, from = 0 :: INTEGER, to = -1 :: INTEGER) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to search for the lookup string in.',
            name: 'text',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The lookup string to search for in the given string.',
            name: 'lookup',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=0, type=INTEGER}',
            description: 'The index at which to start the search.',
            name: 'from',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=-1, type=INTEGER}',
            description: 'The index at which to stop the search.',
            name: 'to',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.jaroWinklerDistance': {
        name: 'apoc.text.jaroWinklerDistance',
        category: '',
        description:
          'Compares the two given `STRING` values using the Jaro-Winkler distance algorithm.',
        signature:
          'apoc.text.jaroWinklerDistance(text1 :: STRING, text2 :: STRING) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The first string to be compared against the second.',
            name: 'text1',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The second string to be compared against the first.',
            name: 'text2',
            type: 'STRING',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.join': {
        name: 'apoc.text.join',
        category: '',
        description:
          'Joins the given `STRING` values using the given delimiter.',
        signature:
          'apoc.text.join(texts :: LIST<STRING>, delimiter :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list of strings to be concatenated using the given delimiter.',
            name: 'texts',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The given delimiter to join the given strings with.',
            name: 'delimiter',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.levenshteinSimilarity': {
        name: 'apoc.text.levenshteinSimilarity',
        category: '',
        description:
          'Returns the similarity (a value within 0 and 1) between the two given `STRING` values based on the Levenshtein distance algorithm.',
        signature:
          'apoc.text.levenshteinSimilarity(text1 :: STRING, text2 :: STRING) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The first string to be compared against the second.',
            name: 'text1',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The second string to be compared against the first.',
            name: 'text2',
            type: 'STRING',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.lpad': {
        name: 'apoc.text.lpad',
        category: '',
        description: 'Left pads the given `STRING` by the given width.',
        signature:
          'apoc.text.lpad(text :: STRING, count :: INTEGER, delimiter =   :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to be padded.',
            name: 'text',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The number of delimiters to pad the given string with.',
            name: 'count',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value= , type=STRING}',
            description: 'The delimiter to pad the given string with.',
            name: 'delimiter',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.phonetic': {
        name: 'apoc.text.phonetic',
        category: '',
        description:
          'Returns the US_ENGLISH phonetic soundex encoding of all words of the `STRING`.',
        signature: 'apoc.text.phonetic(text :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The string to encode using US_ENGLISH phonetic soundex.',
            name: 'text',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.random': {
        name: 'apoc.text.random',
        category: '',
        description:
          'Generates a random `STRING` to the given length using a length parameter and an optional `STRING` of valid characters.\nUnsuitable for cryptographic use-cases.',
        signature:
          'apoc.text.random(length :: INTEGER, valid = A-Za-z0-9 :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The length of the random string.',
            name: 'length',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=A-Za-z0-9, type=STRING}',
            description: 'The valid characters the random string can contain.',
            name: 'valid',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.regexGroups': {
        name: 'apoc.text.regexGroups',
        category: '',
        description:
          'Returns all groups matching the given regular expression in the given text.',
        signature:
          'apoc.text.regexGroups(text :: STRING, regex :: STRING) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The text to extract matches from.',
            name: 'text',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The regex pattern to match.',
            name: 'regex',
            type: 'STRING',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.regexGroupsByName': {
        name: 'apoc.text.regexGroupsByName',
        category: '',
        description:
          'Returns all groups with their group name matching the given regular expression in the given text.',
        signature:
          'apoc.text.regexGroupsByName(text :: STRING, regex :: STRING) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The text to extract matches from.',
            name: 'text',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The regex pattern to match.',
            name: 'regex',
            type: 'STRING',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.repeat': {
        name: 'apoc.text.repeat',
        category: '',
        description:
          'Returns the result of the given item multiplied by the given count.',
        signature:
          'apoc.text.repeat(item :: STRING, count :: INTEGER) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to be repeated.',
            name: 'item',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of times to repeat the given string.',
            name: 'count',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.replace': {
        name: 'apoc.text.replace',
        category: '',
        description:
          'Finds and replaces all matches found by the given regular expression with the given replacement.',
        signature:
          'apoc.text.replace(text :: STRING, regex :: STRING, replacement :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to be modified.',
            name: 'text',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The regular expression pattern to replace in the original string.',
            name: 'regex',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The value to be inserted in the original string.',
            name: 'replacement',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.rpad': {
        name: 'apoc.text.rpad',
        category: '',
        description: 'Right pads the given `STRING` by the given width.',
        signature:
          'apoc.text.rpad(text :: STRING, count :: INTEGER, delimiter =   :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to be padded.',
            name: 'text',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The number of delimiters to pad the given string with.',
            name: 'count',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value= , type=STRING}',
            description: 'The delimiter to pad the given string with.',
            name: 'delimiter',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.slug': {
        name: 'apoc.text.slug',
        category: '',
        description:
          'Replaces the whitespace in the given `STRING` with the given delimiter.',
        signature:
          'apoc.text.slug(text :: STRING, delimiter = - :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string whose whitespace is to be replaced.',
            name: 'text',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=-, type=STRING}',
            description: 'The delimiter to replace the whitespace with.',
            name: 'delimiter',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.snakeCase': {
        name: 'apoc.text.snakeCase',
        category: '',
        description: 'Converts the given `STRING` to snake case.',
        signature: 'apoc.text.snakeCase(text :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to convert to snake case.',
            name: 'text',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.sorensenDiceSimilarity': {
        name: 'apoc.text.sorensenDiceSimilarity',
        category: '',
        description:
          'Compares the two given `STRING` values using the Sørensen–Dice coefficient formula, with the provided IETF language tag.',
        signature:
          'apoc.text.sorensenDiceSimilarity(text1 :: STRING, text2 :: STRING, languageTag = en :: STRING) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A string to be compared against `text2`.',
            name: 'text1',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'A string to be compared against `text1`.',
            name: 'text2',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=en, type=STRING}',
            description: 'A language tag string specified by IETF BCP 47.',
            name: 'languageTag',
            type: 'STRING',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.split': {
        name: 'apoc.text.split',
        category: '',
        description:
          'Splits the given `STRING` using a given regular expression as a separator.',
        signature:
          'apoc.text.split(text :: STRING, regex :: STRING, limit = 0 :: INTEGER) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to split.',
            name: 'text',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The delimiting regular expression.',
            name: 'regex',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=0, type=INTEGER}',
            description:
              'The number of times the regex pattern is applied; if set to 0, it will be applied as many times as possible.',
            name: 'limit',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.swapCase': {
        name: 'apoc.text.swapCase',
        category: '',
        description: 'Swaps the cases in the given `STRING`.',
        signature: 'apoc.text.swapCase(text :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to swap the case of.',
            name: 'text',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.toCypher': {
        name: 'apoc.text.toCypher',
        category: '',
        description: 'Converts the given value to a Cypher property `STRING`.',
        signature:
          'apoc.text.toCypher(value :: ANY, config = {} :: MAP) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The value to convert to a Cypher property string.',
            name: 'value',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{ keepValues :: LIST<ANY> , skipValues :: LIST<ANY> }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.toUpperCase': {
        name: 'apoc.text.toUpperCase',
        category: '',
        description: 'Converts the given `STRING` to upper case.',
        signature: 'apoc.text.toUpperCase(text :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to convert to upper case.',
            name: 'text',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.upperCamelCase': {
        name: 'apoc.text.upperCamelCase',
        category: '',
        description: 'Converts the given `STRING` to upper camel case.',
        signature: 'apoc.text.upperCamelCase(text :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to convert to camel case.',
            name: 'text',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.urldecode': {
        name: 'apoc.text.urldecode',
        category: '',
        description: 'Decodes the given URL encoded `STRING`.',
        signature: 'apoc.text.urldecode(text :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to url decode.',
            name: 'text',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.text.urlencode': {
        name: 'apoc.text.urlencode',
        category: '',
        description: 'Encodes the given URL `STRING`.',
        signature: 'apoc.text.urlencode(text :: STRING) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to url encode.',
            name: 'text',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.util.compress': {
        name: 'apoc.util.compress',
        category: '',
        description: 'Zips the given `STRING`.',
        signature:
          'apoc.util.compress(data :: STRING, config = {} :: MAP) :: BYTEARRAY',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to be compressed.',
            name: 'data',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{ compression = "GZIP" :: ["GZIP", "BZIP2", "DEFLATE", "BLOCK_LZ4", "FRAMED_SNAPPY", "NONE"], charset = "UTF_8" ::["UTF-8", "UTF-16", "UTF-16BE", "UTF-16LE", "UTF-32", "US-ASCII", "ISO-8859-1"] }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: 'BYTEARRAY',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.util.decompress': {
        name: 'apoc.util.decompress',
        category: '',
        description: 'Unzips the given byte array.',
        signature:
          'apoc.util.decompress(data :: BYTEARRAY, config = {} :: MAP) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The bytearray of data to decompress.',
            name: 'data',
            type: 'BYTEARRAY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{ compression = "GZIP" :: ["GZIP", "BZIP2", "DEFLATE", "BLOCK_LZ4", "FRAMED_SNAPPY", "NONE"], charset = "UTF_8" ::["UTF-8", "UTF-16", "UTF-16BE", "UTF-16LE", "UTF-32", "US-ASCII", "ISO-8859-1"] }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.util.md5': {
        name: 'apoc.util.md5',
        category: '',
        description:
          'Returns the MD5 checksum of the concatenation of all `STRING` values in the given `LIST<ANY>`.\nMD5 is a weak hashing algorithm which is unsuitable for cryptographic use-cases.',
        signature: 'apoc.util.md5(values :: LIST<ANY>) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list of values to concatenate and generate an md5 checksum from.',
            name: 'values',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.util.sha1': {
        name: 'apoc.util.sha1',
        category: '',
        description:
          'Returns the SHA1 of the concatenation of all `STRING` values in the given `LIST<ANY>`.\nSHA1 is a weak hashing algorithm which is unsuitable for cryptographic use-cases.',
        signature: 'apoc.util.sha1(values :: LIST<ANY>) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list of values to concatenate and generate a sha1 checksum from.',
            name: 'values',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.util.sha256': {
        name: 'apoc.util.sha256',
        category: '',
        description:
          'Returns the SHA256 of the concatenation of all `STRING` values in the given `LIST<ANY>`.',
        signature: 'apoc.util.sha256(values :: LIST<ANY>) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list of values to concatenate and generate a sha256 checksum from.',
            name: 'values',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.util.sha384': {
        name: 'apoc.util.sha384',
        category: '',
        description:
          'Returns the SHA384 of the concatenation of all `STRING` values in the given `LIST<ANY>`.',
        signature: 'apoc.util.sha384(values :: LIST<ANY>) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list of values to concatenate and generate a sha384 checksum from.',
            name: 'values',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.util.sha512': {
        name: 'apoc.util.sha512',
        category: '',
        description:
          'Returns the SHA512 of the concatenation of all `STRING` values in the `LIST<ANY>`.',
        signature: 'apoc.util.sha512(values :: LIST<ANY>) :: STRING',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list of values to concatenate and generate a sha512 checksum from.',
            name: 'values',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.util.validatePredicate': {
        name: 'apoc.util.validatePredicate',
        category: '',
        description:
          'If the given predicate is true an exception is thrown, otherwise it returns true (for use inside `WHERE` subclauses).',
        signature:
          'apoc.util.validatePredicate(predicate :: BOOLEAN, message :: STRING, params :: LIST<ANY>) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The predicate to be evaluated.',
            name: 'predicate',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description:
              'The error message thrown if the predicate evaluates to `true`.',
            name: 'message',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Parameters to format the message with.',
            name: 'params',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.version': {
        name: 'apoc.version',
        category: '',
        description: 'Returns the APOC version currently installed.',
        signature: 'apoc.version() :: STRING',
        isBuiltIn: false,
        argumentDescription: [],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'apoc.xml.parse': {
        name: 'apoc.xml.parse',
        category: '',
        description: 'Parses the given XML `STRING` as a `MAP`.',
        signature:
          'apoc.xml.parse(data :: STRING, path = / :: STRING, config = {} :: MAP, simple = false :: BOOLEAN) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The XML data to parse.',
            name: 'data',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=/, type=STRING}',
            description: 'An xPath expression.',
            name: 'path',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              'A config map describing whether or not to fail on an encountered error; { failOnError = true :: BOOLEAN }',
            name: 'config',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=false, type=BOOLEAN}',
            description:
              'Specify simple mode to make XML elements accessible via a property of the element name prefixed with an `_`.',
            name: 'simple',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      asin: {
        name: 'asin',
        category: 'Trigonometric',
        description: 'Returns the arcsine of a `FLOAT` in radians.',
        signature: 'asin(input :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An angle in radians.',
            name: 'input',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      atan: {
        name: 'atan',
        category: 'Trigonometric',
        description: 'Returns the arctangent of a `FLOAT` in radians.',
        signature: 'atan(input :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An angle in radians.',
            name: 'input',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      atan2: {
        name: 'atan2',
        category: 'Trigonometric',
        description:
          'Returns the arctangent2 of a set of coordinates in radians.',
        signature: 'atan2(y :: FLOAT, x :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A y angle in radians.',
            name: 'y',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'An x angle in radians.',
            name: 'x',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      avg: {
        name: 'avg',
        category: 'Aggregating',
        description:
          'Returns the average of a set of `INTEGER`, `FLOAT` or `DURATION` values.',
        signature:
          'avg(input :: INTEGER | FLOAT | DURATION) :: INTEGER | FLOAT | DURATION',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value aggregated to form an average.',
            name: 'input',
            type: 'INTEGER | FLOAT | DURATION',
          },
        ],
        returnDescription: 'INTEGER | FLOAT | DURATION',
        aggregating: true,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      btrim: {
        name: 'btrim',
        category: 'String',
        description:
          'Returns the given `STRING` with leading and trailing `trimCharacterString` characters removed.',
        signature:
          'btrim(input :: STRING, trimCharacterString :: STRING) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A value from which the leading and trailing trim character will be removed.',
            name: 'input',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'A character to be removed from the start and end of the given string.',
            name: 'trimCharacterString',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      ceil: {
        name: 'ceil',
        category: 'Numeric',
        description:
          'Returns the smallest `FLOAT` that is greater than or equal to a number and equal to an `INTEGER`.',
        signature: 'ceil(input :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be rounded to the nearest higher integer.',
            name: 'input',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      char_length: {
        name: 'char_length',
        category: 'Scalar',
        description: 'Returns the number of Unicode characters in a `STRING`.',
        signature: 'char_length(input :: STRING) :: INTEGER',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A string value whose length in characters is to be calculated.',
            name: 'input',
            type: 'STRING',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      character_length: {
        name: 'character_length',
        category: 'Scalar',
        description: 'Returns the number of Unicode characters in a `STRING`.',
        signature: 'character_length(input :: STRING) :: INTEGER',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A string value whose length in characters is to be calculated.',
            name: 'input',
            type: 'STRING',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      coalesce: {
        name: 'coalesce',
        category: 'Scalar',
        description:
          'Returns the first non-null value in a list of expressions.',
        signature: 'coalesce(input :: ANY) :: ANY',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'If this is the first non-`NULL` value, it will be returned.',
            name: 'input',
            type: 'ANY',
          },
        ],
        returnDescription: 'ANY',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      collect: {
        name: 'collect',
        category: 'Aggregating',
        description:
          'Returns a list containing the values returned by an expression.',
        signature: 'collect(input :: ANY) :: LIST<ANY>',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value aggregated into a list.',
            name: 'input',
            type: 'ANY',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: true,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      cos: {
        name: 'cos',
        category: 'Trigonometric',
        description: 'Returns the cosine of a `FLOAT`.',
        signature: 'cos(input :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An angle in radians.',
            name: 'input',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      cot: {
        name: 'cot',
        category: 'Trigonometric',
        description: 'Returns the cotangent of a `FLOAT`.',
        signature: 'cot(input :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An angle in radians.',
            name: 'input',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      count: {
        name: 'count',
        category: 'Aggregating',
        description: 'Returns the number of values or rows.',
        signature: 'count(input :: ANY) :: INTEGER',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be aggregated.',
            name: 'input',
            type: 'ANY',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: true,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      date: {
        name: 'date',
        category: 'Temporal',
        description: 'Creates a `DATE` instant.',
        signature: 'date(input = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: DATE',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description:
              "Either a string representation of a temporal value, a map containing the single key 'timezone', or a map containing temporal values ('date', 'year', 'month', 'day', 'week', 'dayOfWeek', 'quarter', 'dayOfQuarter', 'ordinalDay') as components.",
            name: 'input',
            type: 'ANY',
          },
        ],
        returnDescription: 'DATE',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'date.realtime': {
        name: 'date.realtime',
        category: 'Temporal',
        description:
          'Returns the current `DATE` instant using the realtime clock.',
        signature:
          'date.realtime(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: DATE',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description: 'A string value representing a time zone.',
            name: 'timezone',
            type: 'ANY',
          },
        ],
        returnDescription: 'DATE',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'date.statement': {
        name: 'date.statement',
        category: 'Temporal',
        description:
          'Returns the current `DATE` instant using the statement clock.',
        signature:
          'date.statement(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: DATE',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description: 'A string value representing a time zone.',
            name: 'timezone',
            type: 'ANY',
          },
        ],
        returnDescription: 'DATE',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'date.transaction': {
        name: 'date.transaction',
        category: 'Temporal',
        description:
          'Returns the current `DATE` instant using the transaction clock.',
        signature:
          'date.transaction(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: DATE',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description: 'A string value representing a time zone.',
            name: 'timezone',
            type: 'ANY',
          },
        ],
        returnDescription: 'DATE',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'date.truncate': {
        name: 'date.truncate',
        category: 'Temporal',
        description:
          'Truncates the given temporal value to a `DATE` instant using the specified unit.',
        signature:
          'date.truncate(unit :: STRING, input = DEFAULT_TEMPORAL_ARGUMENT :: ANY, fields = null :: MAP) :: DATE',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              "A string representing one of the following: 'day', 'week', 'month', 'weekYear', 'quarter', 'year', 'decade', 'century', 'millennium'.",
            name: 'unit',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description:
              'The date to be truncated using either `ZONED DATETIME`, `LOCAL DATETIME`, or `DATE`.',
            name: 'input',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=MAP}',
            description:
              'A list of time components smaller than those specified in `unit` to preserve during truncation.',
            name: 'fields',
            type: 'MAP',
          },
        ],
        returnDescription: 'DATE',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      datetime: {
        name: 'datetime',
        category: 'Temporal',
        description: 'Creates a `ZONED DATETIME` instant.',
        signature:
          'datetime(input = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: ZONED DATETIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description:
              "Either a string representation of a temporal value, a map containing the single key 'timezone', or a map containing temporal values ('year', 'month', 'day', 'hour', 'minute', 'second', 'millisecond', 'microsecond', 'nanosecond', 'timezone', 'epochSeconds', 'epochMillis') as components.",
            name: 'input',
            type: 'ANY',
          },
        ],
        returnDescription: 'ZONED DATETIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'datetime.fromepoch': {
        name: 'datetime.fromepoch',
        category: 'Temporal',
        description:
          'Creates a `ZONED DATETIME` given the seconds and nanoseconds since the start of the epoch.',
        signature:
          'datetime.fromepoch(seconds :: INTEGER | FLOAT, nanoseconds :: INTEGER | FLOAT) :: ZONED DATETIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The number of seconds from the UNIX epoch in the UTC time zone.',
            name: 'seconds',
            type: 'INTEGER | FLOAT',
          },
          {
            isDeprecated: false,
            description:
              'The number of nanoseconds from the UNIX epoch in the UTC time zone. This can be added to seconds.',
            name: 'nanoseconds',
            type: 'INTEGER | FLOAT',
          },
        ],
        returnDescription: 'ZONED DATETIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'datetime.fromepochmillis': {
        name: 'datetime.fromepochmillis',
        category: 'Temporal',
        description:
          'Creates a `ZONED DATETIME` given the milliseconds since the start of the epoch.',
        signature:
          'datetime.fromepochmillis(milliseconds :: INTEGER | FLOAT) :: ZONED DATETIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The number of milliseconds from the UNIX epoch in the UTC time zone.',
            name: 'milliseconds',
            type: 'INTEGER | FLOAT',
          },
        ],
        returnDescription: 'ZONED DATETIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'datetime.realtime': {
        name: 'datetime.realtime',
        category: 'Temporal',
        description:
          'Returns the current `ZONED DATETIME` instant using the realtime clock.',
        signature:
          'datetime.realtime(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: ZONED DATETIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description: 'A string value representing a time zone.',
            name: 'timezone',
            type: 'ANY',
          },
        ],
        returnDescription: 'ZONED DATETIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'datetime.statement': {
        name: 'datetime.statement',
        category: 'Temporal',
        description:
          'Returns the current `ZONED DATETIME` instant using the statement clock.',
        signature:
          'datetime.statement(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: ZONED DATETIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description: 'A string value representing a time zone.',
            name: 'timezone',
            type: 'ANY',
          },
        ],
        returnDescription: 'ZONED DATETIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'datetime.transaction': {
        name: 'datetime.transaction',
        category: 'Temporal',
        description:
          'Returns the current `ZONED DATETIME` instant using the transaction clock.',
        signature:
          'datetime.transaction(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: ZONED DATETIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description: 'A string value representing a time zone.',
            name: 'timezone',
            type: 'ANY',
          },
        ],
        returnDescription: 'ZONED DATETIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'datetime.truncate': {
        name: 'datetime.truncate',
        category: 'Temporal',
        description:
          'Truncates the given temporal value to a `ZONED DATETIME` instant using the specified unit.',
        signature:
          'datetime.truncate(unit :: STRING, input = DEFAULT_TEMPORAL_ARGUMENT :: ANY, fields = null :: MAP) :: ZONED DATETIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              "A string representing one of the following: 'microsecond', 'millisecond', 'second', 'minute', 'hour', 'day', 'week', 'month', 'weekYear', 'quarter', 'year', 'decade', 'century', 'millennium'.",
            name: 'unit',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description:
              'The date to be truncated using either `ZONED DATETIME`, `LOCAL DATETIME`, or `DATE`.',
            name: 'input',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=MAP}',
            description:
              'A list of time components smaller than those specified in `unit` to preserve during truncation.',
            name: 'fields',
            type: 'MAP',
          },
        ],
        returnDescription: 'ZONED DATETIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'db.nameFromElementId': {
        name: 'db.nameFromElementId',
        category: 'Database',
        description: 'Resolves the database name for the given element id',
        signature: 'db.nameFromElementId(elementId :: STRING) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An element id of a node or relationship.',
            name: 'elementId',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      degrees: {
        name: 'degrees',
        category: 'Trigonometric',
        description: 'Converts radians to degrees.',
        signature: 'degrees(input :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An angle in radians.',
            name: 'input',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      duration: {
        name: 'duration',
        category: 'Temporal',
        description: 'Creates a `DURATION` value.',
        signature: 'duration(input :: ANY) :: DURATION',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              "A map optionally containing the following keys: 'years', 'quarters', 'months', 'weeks', 'days', 'hours', 'minutes', 'seconds', 'milliseconds', 'microseconds', or 'nanoseconds'.",
            name: 'input',
            type: 'ANY',
          },
        ],
        returnDescription: 'DURATION',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'duration.between': {
        name: 'duration.between',
        category: 'Temporal',
        description:
          'Computes the `DURATION` between the `from` instant (inclusive) and the `to` instant (exclusive) in logical units.',
        signature: 'duration.between(from :: ANY, to :: ANY) :: DURATION',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A temporal instant type (`DATE`, `LOCAL TIME`, `ZONED TIME`, `LOCAL DATETIME`, `ZONED DATETIME`) representing the starting instant.',
            name: 'from',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'A temporal instant type (`DATE`, `LOCAL TIME`, `ZONED TIME`, `LOCAL DATETIME`, `ZONED DATETIME`) representing the ending instant.',
            name: 'to',
            type: 'ANY',
          },
        ],
        returnDescription: 'DURATION',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'duration.inDays': {
        name: 'duration.inDays',
        category: 'Temporal',
        description:
          'Computes the `DURATION` between the `from` instant (inclusive) and the `to` instant (exclusive) in days.',
        signature: 'duration.inDays(from :: ANY, to :: ANY) :: DURATION',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A temporal instant type (`DATE`, `LOCAL TIME`, `ZONED TIME`, `LOCAL DATETIME`, `ZONED DATETIME`) representing the starting instant.',
            name: 'from',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'A temporal instant type (`DATE`, `LOCAL TIME`, `ZONED TIME`, `LOCAL DATETIME`, `ZONED DATETIME`) representing the ending instant.',
            name: 'to',
            type: 'ANY',
          },
        ],
        returnDescription: 'DURATION',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'duration.inMonths': {
        name: 'duration.inMonths',
        category: 'Temporal',
        description:
          'Computes the `DURATION` between the `from` instant (inclusive) and the `to` instant (exclusive) in months.',
        signature: 'duration.inMonths(from :: ANY, to :: ANY) :: DURATION',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A temporal instant type (`DATE`, `LOCAL TIME`, `ZONED TIME`, `LOCAL DATETIME`, `ZONED DATETIME`) representing the starting instant.',
            name: 'from',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'A temporal instant type (`DATE`, `LOCAL TIME`, `ZONED TIME`, `LOCAL DATETIME`, `ZONED DATETIME`) representing the ending instant.',
            name: 'to',
            type: 'ANY',
          },
        ],
        returnDescription: 'DURATION',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'duration.inSeconds': {
        name: 'duration.inSeconds',
        category: 'Temporal',
        description:
          'Computes the `DURATION` between the `from` instant (inclusive) and the `to` instant (exclusive) in seconds.',
        signature: 'duration.inSeconds(from :: ANY, to :: ANY) :: DURATION',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A temporal instant type (`DATE`, `LOCAL TIME`, `ZONED TIME`, `LOCAL DATETIME`, `ZONED DATETIME`) representing the starting instant.',
            name: 'from',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'A temporal instant type (`DATE`, `LOCAL TIME`, `ZONED TIME`, `LOCAL DATETIME`, `ZONED DATETIME`) representing the ending instant.',
            name: 'to',
            type: 'ANY',
          },
        ],
        returnDescription: 'DURATION',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      e: {
        name: 'e',
        category: 'Logarithmic',
        description: 'Returns the base of the natural logarithm, e.',
        signature: 'e() :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      elementId: {
        name: 'elementId',
        category: 'Scalar',
        description: 'Returns the element id of a `NODE` or `RELATIONSHIP`.',
        signature: 'elementId(input :: NODE | RELATIONSHIP) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An element id of a node or a relationship.',
            name: 'input',
            type: 'NODE | RELATIONSHIP',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      endNode: {
        name: 'endNode',
        category: 'Scalar',
        description: 'Returns the end `NODE` of a `RELATIONSHIP`.',
        signature: 'endNode(input :: RELATIONSHIP) :: NODE',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A relationship.',
            name: 'input',
            type: 'RELATIONSHIP',
          },
        ],
        returnDescription: 'NODE',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      exists: {
        name: 'exists',
        category: 'Predicate',
        description:
          'Returns true if a match for the pattern exists in the graph.',
        signature: 'exists(input :: ANY) :: BOOLEAN',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A pattern to verify the existence of.',
            name: 'input',
            type: 'ANY',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      exp: {
        name: 'exp',
        category: 'Logarithmic',
        description:
          'Returns e^n, where e is the base of the natural logarithm, and n is the value of the argument expression.',
        signature: 'exp(input :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A value to which the base of the natural logarithm, e, will be raised.',
            name: 'input',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      file: {
        name: 'file',
        category: 'Scalar',
        description:
          'Returns the absolute path of the file that LOAD CSV is using.',
        signature: 'file() :: STRING',
        isBuiltIn: true,
        argumentDescription: [],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      floor: {
        name: 'floor',
        category: 'Numeric',
        description:
          'Returns the largest `FLOAT` that is less than or equal to a number and equal to an `INTEGER`.',
        signature: 'floor(input :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be rounded to the nearest lower integer.',
            name: 'input',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.alpha.linkprediction.adamicAdar': {
        name: 'gds.alpha.linkprediction.adamicAdar',
        category: '',
        description: 'Given two nodes, calculate Adamic Adar similarity',
        signature:
          'gds.alpha.linkprediction.adamicAdar(node1 :: NODE, node2 :: NODE, config = {} :: MAP) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'node1 :: NODE',
            name: 'node1',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'node2 :: NODE',
            name: 'node2',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'config = {} :: MAP',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.alpha.linkprediction.commonNeighbors': {
        name: 'gds.alpha.linkprediction.commonNeighbors',
        category: '',
        description: 'Given two nodes, returns the number of common neighbors',
        signature:
          'gds.alpha.linkprediction.commonNeighbors(node1 :: NODE, node2 :: NODE, config = {} :: MAP) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'node1 :: NODE',
            name: 'node1',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'node2 :: NODE',
            name: 'node2',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'config = {} :: MAP',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.alpha.linkprediction.preferentialAttachment': {
        name: 'gds.alpha.linkprediction.preferentialAttachment',
        category: '',
        description: 'Given two nodes, calculate Preferential Attachment',
        signature:
          'gds.alpha.linkprediction.preferentialAttachment(node1 :: NODE, node2 :: NODE, config = {} :: MAP) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'node1 :: NODE',
            name: 'node1',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'node2 :: NODE',
            name: 'node2',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'config = {} :: MAP',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.alpha.linkprediction.resourceAllocation': {
        name: 'gds.alpha.linkprediction.resourceAllocation',
        category: '',
        description:
          'Given two nodes, calculate Resource Allocation similarity',
        signature:
          'gds.alpha.linkprediction.resourceAllocation(node1 :: NODE, node2 :: NODE, config = {} :: MAP) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'node1 :: NODE',
            name: 'node1',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'node2 :: NODE',
            name: 'node2',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'config = {} :: MAP',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.alpha.linkprediction.sameCommunity': {
        name: 'gds.alpha.linkprediction.sameCommunity',
        category: '',
        description:
          'Given two nodes, indicates if they have the same community',
        signature:
          'gds.alpha.linkprediction.sameCommunity(node1 :: NODE, node2 :: NODE, communityProperty = community :: STRING) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'node1 :: NODE',
            name: 'node1',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'node2 :: NODE',
            name: 'node2',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=community, type=STRING}',
            description: 'communityProperty = community :: STRING',
            name: 'communityProperty',
            type: 'STRING',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.alpha.linkprediction.totalNeighbors': {
        name: 'gds.alpha.linkprediction.totalNeighbors',
        category: '',
        description: 'Given two nodes, calculate Total Neighbors',
        signature:
          'gds.alpha.linkprediction.totalNeighbors(node1 :: NODE, node2 :: NODE, config = {} :: MAP) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'node1 :: NODE',
            name: 'node1',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'node2 :: NODE',
            name: 'node2',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'config = {} :: MAP',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.alpha.ml.oneHotEncoding': {
        name: 'gds.alpha.ml.oneHotEncoding',
        category: '',
        description:
          'RETURN gds.alpha.ml.oneHotEncoding(availableValues, selectedValues) - return a list of selected values in a one hot encoding format.',
        signature:
          'gds.alpha.ml.oneHotEncoding(availableValues :: LIST<ANY>, selectedValues :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'availableValues :: LIST<ANY>',
            name: 'availableValues',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'selectedValues :: LIST<ANY>',
            name: 'selectedValues',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.graph.exists': {
        name: 'gds.graph.exists',
        category: '',
        description: 'Checks if a graph exists in the catalog.',
        signature: 'gds.graph.exists(graphName :: STRING) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.graph.project': {
        name: 'gds.graph.project',
        category: '',
        description:
          'Creates a named graph in the catalog for use by algorithms.',
        signature:
          'gds.graph.project(graphName :: STRING, sourceNode :: ANY, targetNode = null :: ANY, dataConfig = null :: ANY, configuration = null :: ANY, alphaMigrationConfig = null :: ANY) :: MAP',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'sourceNode :: ANY',
            name: 'sourceNode',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=ANY}',
            description: 'targetNode = null :: ANY',
            name: 'targetNode',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=ANY}',
            description: 'dataConfig = null :: ANY',
            name: 'dataConfig',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=ANY}',
            description: 'configuration = null :: ANY',
            name: 'configuration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=ANY}',
            description: 'alphaMigrationConfig = null :: ANY',
            name: 'alphaMigrationConfig',
            type: 'ANY',
          },
        ],
        returnDescription: 'MAP',
        aggregating: true,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.isLicensed': {
        name: 'gds.isLicensed',
        category: '',
        description:
          'RETURN gds.isLicensed - Return if GDS is licensed. For more details use the procedure gds.license.state.',
        signature: 'gds.isLicensed() :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.similarity.cosine': {
        name: 'gds.similarity.cosine',
        category: '',
        description:
          'RETURN gds.similarity.cosine(vector1, vector2) - Given two collection vectors, calculate cosine similarity',
        signature:
          'gds.similarity.cosine(vector1 :: LIST<INTEGER | FLOAT>, vector2 :: LIST<INTEGER | FLOAT>) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'vector1 :: LIST<INTEGER | FLOAT>',
            name: 'vector1',
            type: 'LIST<INTEGER | FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'vector2 :: LIST<INTEGER | FLOAT>',
            name: 'vector2',
            type: 'LIST<INTEGER | FLOAT>',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.similarity.euclidean': {
        name: 'gds.similarity.euclidean',
        category: '',
        description:
          'RETURN gds.similarity.euclidean(vector1, vector2) - Given two collection vectors, calculate similarity based on euclidean distance',
        signature:
          'gds.similarity.euclidean(vector1 :: LIST<INTEGER | FLOAT>, vector2 :: LIST<INTEGER | FLOAT>) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'vector1 :: LIST<INTEGER | FLOAT>',
            name: 'vector1',
            type: 'LIST<INTEGER | FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'vector2 :: LIST<INTEGER | FLOAT>',
            name: 'vector2',
            type: 'LIST<INTEGER | FLOAT>',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.similarity.euclideanDistance': {
        name: 'gds.similarity.euclideanDistance',
        category: '',
        description:
          'RETURN gds.similarity.euclideanDistance(vector1, vector2) - Given two collection vectors, calculate the euclidean distance (square root of the sum of the squared differences)',
        signature:
          'gds.similarity.euclideanDistance(vector1 :: LIST<INTEGER | FLOAT>, vector2 :: LIST<INTEGER | FLOAT>) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'vector1 :: LIST<INTEGER | FLOAT>',
            name: 'vector1',
            type: 'LIST<INTEGER | FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'vector2 :: LIST<INTEGER | FLOAT>',
            name: 'vector2',
            type: 'LIST<INTEGER | FLOAT>',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.similarity.jaccard': {
        name: 'gds.similarity.jaccard',
        category: '',
        description:
          'RETURN gds.similarity.jaccard(vector1, vector2) - Given two collection vectors, calculate Jaccard similarity',
        signature:
          'gds.similarity.jaccard(vector1 :: LIST<INTEGER | FLOAT>, vector2 :: LIST<INTEGER | FLOAT>) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'vector1 :: LIST<INTEGER | FLOAT>',
            name: 'vector1',
            type: 'LIST<INTEGER | FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'vector2 :: LIST<INTEGER | FLOAT>',
            name: 'vector2',
            type: 'LIST<INTEGER | FLOAT>',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.similarity.overlap': {
        name: 'gds.similarity.overlap',
        category: '',
        description:
          'RETURN gds.similarity.overlap(vector1, vector2) - Given two collection vectors, calculate overlap similarity',
        signature:
          'gds.similarity.overlap(vector1 :: LIST<INTEGER | FLOAT>, vector2 :: LIST<INTEGER | FLOAT>) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'vector1 :: LIST<INTEGER | FLOAT>',
            name: 'vector1',
            type: 'LIST<INTEGER | FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'vector2 :: LIST<INTEGER | FLOAT>',
            name: 'vector2',
            type: 'LIST<INTEGER | FLOAT>',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.similarity.pearson': {
        name: 'gds.similarity.pearson',
        category: '',
        description:
          'RETURN gds.similarity.pearson(vector1, vector2) - Given two collection vectors, calculate pearson similarity',
        signature:
          'gds.similarity.pearson(vector1 :: LIST<INTEGER | FLOAT>, vector2 :: LIST<INTEGER | FLOAT>) :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'vector1 :: LIST<INTEGER | FLOAT>',
            name: 'vector1',
            type: 'LIST<INTEGER | FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'vector2 :: LIST<INTEGER | FLOAT>',
            name: 'vector2',
            type: 'LIST<INTEGER | FLOAT>',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.util.NaN': {
        name: 'gds.util.NaN',
        category: '',
        description: 'RETURN gds.util.NaN() - Returns NaN as a Cypher value.',
        signature: 'gds.util.NaN() :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.util.asNode': {
        name: 'gds.util.asNode',
        category: '',
        description:
          'RETURN gds.util.asNode(nodeId) - Return the node objects for the given node id or null if none exists.',
        signature: 'gds.util.asNode(nodeId :: INTEGER | FLOAT) :: NODE',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER | FLOAT',
            name: 'nodeId',
            type: 'INTEGER | FLOAT',
          },
        ],
        returnDescription: 'NODE',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.util.asNodes': {
        name: 'gds.util.asNodes',
        category: '',
        description:
          'RETURN gds.util.asNodes(nodeIds) - Return the node objects for the given node ids or an empty list if none exists.',
        signature:
          'gds.util.asNodes(nodeIds :: LIST<INTEGER | FLOAT>) :: LIST<ANY>',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'nodeIds :: LIST<INTEGER | FLOAT>',
            name: 'nodeIds',
            type: 'LIST<INTEGER | FLOAT>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.util.infinity': {
        name: 'gds.util.infinity',
        category: '',
        description:
          'RETURN gds.util.infinity() - Return infinity as a Cypher value.',
        signature: 'gds.util.infinity() :: FLOAT',
        isBuiltIn: false,
        argumentDescription: [],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.util.isFinite': {
        name: 'gds.util.isFinite',
        category: '',
        description:
          'RETURN gds.util.isFinite(value) - Return true iff the given argument is a finite value (not ±Infinity, NaN, or null).',
        signature: 'gds.util.isFinite(value :: INTEGER | FLOAT) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'value :: INTEGER | FLOAT',
            name: 'value',
            type: 'INTEGER | FLOAT',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.util.isInfinite': {
        name: 'gds.util.isInfinite',
        category: '',
        description:
          'RETURN gds.util.isInfinite(value) - Return true iff the given argument is not a finite value (not ±Infinity, NaN, or null).',
        signature: 'gds.util.isInfinite(value :: INTEGER | FLOAT) :: BOOLEAN',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'value :: INTEGER | FLOAT',
            name: 'value',
            type: 'INTEGER | FLOAT',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.util.nodeProperty': {
        name: 'gds.util.nodeProperty',
        category: '',
        description:
          'Returns a node property value from a named in-memory graph.',
        signature:
          'gds.util.nodeProperty(graphName :: STRING, nodeId :: ANY, propertyKey :: STRING, nodeLabel = * :: STRING) :: ANY',
        isBuiltIn: false,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeId :: ANY',
            name: 'nodeId',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'propertyKey :: STRING',
            name: 'propertyKey',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=*, type=STRING}',
            description: 'nodeLabel = * :: STRING',
            name: 'nodeLabel',
            type: 'STRING',
          },
        ],
        returnDescription: 'ANY',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'gds.version': {
        name: 'gds.version',
        category: '',
        description:
          'RETURN gds.version() | Return the installed graph data science library version.',
        signature: 'gds.version() :: STRING',
        isBuiltIn: false,
        argumentDescription: [],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'graph.byElementId': {
        name: 'graph.byElementId',
        category: 'Graph',
        description:
          'Returns the graph reference with the given element id. It is only supported in the `USE` clause, on composite databases.',
        signature: 'graph.byElementId(elementId :: STRING) :: GRAPH',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An element id of a node or relationship.',
            name: 'elementId',
            type: 'STRING',
          },
        ],
        returnDescription: 'GRAPH',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'graph.byName': {
        name: 'graph.byName',
        category: 'Graph',
        description:
          'Returns the graph reference of the given name. It is only supported in the `USE` clause, on composite databases.',
        signature: 'graph.byName(name :: STRING) :: GRAPH',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the graph to be resolved.',
            name: 'name',
            type: 'STRING',
          },
        ],
        returnDescription: 'GRAPH',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'graph.names': {
        name: 'graph.names',
        category: 'Graph',
        description: 'Lists the names of graphs in the current database.',
        signature: 'graph.names() :: LIST<STRING>',
        isBuiltIn: true,
        argumentDescription: [],
        returnDescription: 'LIST<STRING>',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'graph.propertiesByName': {
        name: 'graph.propertiesByName',
        category: 'Graph',
        description: 'Returns the `MAP` of properties associated with a graph.',
        signature: 'graph.propertiesByName(graphName :: STRING) :: MAP',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The name of the graph from which all associated properties will be returned.',
            name: 'graphName',
            type: 'STRING',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      haversin: {
        name: 'haversin',
        category: 'Trigonometric',
        description: 'Returns half the versine of a number.',
        signature: 'haversin(input :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An angle in radians.',
            name: 'input',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      head: {
        name: 'head',
        category: 'Scalar',
        description: 'Returns the first element in a `LIST<ANY>`.',
        signature: 'head(list :: LIST<ANY>) :: ANY',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A list from which the first element will be returned.',
            name: 'list',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'ANY',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      id: {
        name: 'id',
        category: 'Scalar',
        description: 'Returns the id of a `NODE` or `RELATIONSHIP`.',
        signature: 'id(input :: NODE | RELATIONSHIP) :: INTEGER',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A node or a relationship.',
            name: 'input',
            type: 'NODE | RELATIONSHIP',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: true,
        deprecatedBy: null,
      },
      isEmpty: {
        name: 'isEmpty',
        category: 'Predicate',
        description:
          'Checks whether a `STRING`, `MAP` or `LIST<ANY>` is empty.',
        signature: 'isEmpty(input :: STRING | MAP | LIST<ANY>) :: BOOLEAN',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be checked for emptiness.',
            name: 'input',
            type: 'STRING | MAP | LIST<ANY>',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      isNaN: {
        name: 'isNaN',
        category: 'Numeric',
        description: 'Returns whether the given `INTEGER` or `FLOAT` is NaN.',
        signature: 'isNaN(input :: INTEGER | FLOAT) :: BOOLEAN',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A numeric value to be compared against `NaN`.',
            name: 'input',
            type: 'INTEGER | FLOAT',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      keys: {
        name: 'keys',
        category: 'List',
        description:
          'Returns a `LIST<STRING>` containing the `STRING` representations for all the property names of a `NODE`, `RELATIONSHIP` or `MAP`.',
        signature: 'keys(input :: NODE | RELATIONSHIP | MAP) :: LIST<STRING>',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A node or relationship from which the names of all properties will be returned.',
            name: 'input',
            type: 'NODE | RELATIONSHIP | MAP',
          },
        ],
        returnDescription: 'LIST<STRING>',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      labels: {
        name: 'labels',
        category: 'List',
        description:
          'Returns a `LIST<STRING>` containing the `STRING` representations for all the labels of a `NODE`.',
        signature: 'labels(input :: NODE) :: LIST<STRING>',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A node whose labels will be returned.',
            name: 'input',
            type: 'NODE',
          },
        ],
        returnDescription: 'LIST<STRING>',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      last: {
        name: 'last',
        category: 'Scalar',
        description: 'Returns the last element in a `LIST<ANY>`.',
        signature: 'last(list :: LIST<ANY>) :: ANY',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A list from which the last element will be returned.',
            name: 'list',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'ANY',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      left: {
        name: 'left',
        category: 'String',
        description:
          'Returns a `STRING` containing the specified number (`INTEGER`) of leftmost characters in the given `STRING`.',
        signature: 'left(original :: STRING, length :: INTEGER) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A string value whose rightmost characters will be trimmed.',
            name: 'original',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The length of the leftmost characters to be returned.',
            name: 'length',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      length: {
        name: 'length',
        category: 'Scalar',
        description: 'Returns the length of a `PATH`.',
        signature: 'length(input :: PATH) :: INTEGER',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A path whose relationships will be counted.',
            name: 'input',
            type: 'PATH',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      linenumber: {
        name: 'linenumber',
        category: 'Scalar',
        description:
          'Returns the line number that LOAD CSV is currently using.',
        signature: 'linenumber() :: INTEGER',
        isBuiltIn: true,
        argumentDescription: [],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      localdatetime: {
        name: 'localdatetime',
        category: 'Temporal',
        description: 'Creates a `LOCAL DATETIME` instant.',
        signature:
          'localdatetime(input = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: LOCAL DATETIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description:
              "Either a string representation of a temporal value, a map containing the single key 'timezone', or a map containing temporal values ('year', 'month', 'day', 'hour', 'minute', 'second', 'millisecond', 'microsecond', 'nanosecond') as components.",
            name: 'input',
            type: 'ANY',
          },
        ],
        returnDescription: 'LOCAL DATETIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'localdatetime.realtime': {
        name: 'localdatetime.realtime',
        category: 'Temporal',
        description:
          'Returns the current `LOCAL DATETIME` instant using the realtime clock.',
        signature:
          'localdatetime.realtime(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: LOCAL DATETIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description: 'A string value representing a time zone.',
            name: 'timezone',
            type: 'ANY',
          },
        ],
        returnDescription: 'LOCAL DATETIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'localdatetime.statement': {
        name: 'localdatetime.statement',
        category: 'Temporal',
        description:
          'Returns the current `LOCAL DATETIME` instant using the statement clock.',
        signature:
          'localdatetime.statement(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: LOCAL DATETIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description: 'A string value representing a time zone.',
            name: 'timezone',
            type: 'ANY',
          },
        ],
        returnDescription: 'LOCAL DATETIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'localdatetime.transaction': {
        name: 'localdatetime.transaction',
        category: 'Temporal',
        description:
          'Returns the current `LOCAL DATETIME` instant using the transaction clock.',
        signature:
          'localdatetime.transaction(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: LOCAL DATETIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description: 'A string value representing a time zone.',
            name: 'timezone',
            type: 'ANY',
          },
        ],
        returnDescription: 'LOCAL DATETIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'localdatetime.truncate': {
        name: 'localdatetime.truncate',
        category: 'Temporal',
        description:
          'Truncates the given temporal value to a `LOCAL DATETIME` instant using the specified unit.',
        signature:
          'localdatetime.truncate(unit :: STRING, input = DEFAULT_TEMPORAL_ARGUMENT :: ANY, fields = null :: MAP) :: LOCAL DATETIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              "A string representing one of the following: 'microsecond', 'millisecond', 'second', 'minute', 'hour', 'day', 'week', 'month', 'weekYear', 'quarter', 'year', 'decade', 'century', 'millennium'.",
            name: 'unit',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description:
              'The date to be truncated using either `ZONED DATETIME`, `LOCAL DATETIME`, or `DATE`.',
            name: 'input',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=MAP}',
            description:
              'A list of time components smaller than those specified in `unit` to preserve during truncation.',
            name: 'fields',
            type: 'MAP',
          },
        ],
        returnDescription: 'LOCAL DATETIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      localtime: {
        name: 'localtime',
        category: 'Temporal',
        description: 'Creates a `LOCAL TIME` instant.',
        signature:
          'localtime(input = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: LOCAL TIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description:
              "Either a string representation of a temporal value, a map containing the single key 'timezone', or a map containing temporal values ('hour, 'minute', 'second', 'millisecond', 'microsecond', 'nanosecond' as components.",
            name: 'input',
            type: 'ANY',
          },
        ],
        returnDescription: 'LOCAL TIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'localtime.realtime': {
        name: 'localtime.realtime',
        category: 'Temporal',
        description:
          'Returns the current `LOCAL TIME` instant using the realtime clock.',
        signature:
          'localtime.realtime(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: LOCAL TIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description: 'A string value representing a time zone.',
            name: 'timezone',
            type: 'ANY',
          },
        ],
        returnDescription: 'LOCAL TIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'localtime.statement': {
        name: 'localtime.statement',
        category: 'Temporal',
        description:
          'Returns the current `LOCAL TIME` instant using the statement clock.',
        signature:
          'localtime.statement(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: LOCAL TIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description: 'A string value representing a time zone.',
            name: 'timezone',
            type: 'ANY',
          },
        ],
        returnDescription: 'LOCAL TIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'localtime.transaction': {
        name: 'localtime.transaction',
        category: 'Temporal',
        description:
          'Returns the current `LOCAL TIME` instant using the transaction clock.',
        signature:
          'localtime.transaction(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: LOCAL TIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description: 'A string value representing a time zone.',
            name: 'timezone',
            type: 'ANY',
          },
        ],
        returnDescription: 'LOCAL TIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'localtime.truncate': {
        name: 'localtime.truncate',
        category: 'Temporal',
        description:
          'Truncates the given temporal value to a `LOCAL TIME` instant using the specified unit.',
        signature:
          'localtime.truncate(unit :: STRING, input = DEFAULT_TEMPORAL_ARGUMENT :: ANY, fields = null :: MAP) :: LOCAL TIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              "A string representing one of the following: 'day', 'week', 'month', 'weekYear', 'quarter', 'year', 'decade', 'century', 'millennium'.",
            name: 'unit',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description:
              'The date to be truncated using either `ZONED DATETIME`, `LOCAL DATETIME`, `LOCAL TIME`, or `DATE`.',
            name: 'input',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=MAP}',
            description:
              'A list of time components smaller than those specified in `unit` to preserve during truncation.',
            name: 'fields',
            type: 'MAP',
          },
        ],
        returnDescription: 'LOCAL TIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      log: {
        name: 'log',
        category: 'Logarithmic',
        description: 'Returns the natural logarithm of a `FLOAT`.',
        signature: 'log(input :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A value for which the natural logarithm will be returned.',
            name: 'input',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      log10: {
        name: 'log10',
        category: 'Logarithmic',
        description: 'Returns the common logarithm (base 10) of a `FLOAT`.',
        signature: 'log10(input :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A value for which the common logarithm (base 10) will be returned.',
            name: 'input',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      lower: {
        name: 'lower',
        category: 'String',
        description: 'Returns the given `STRING` in lowercase.',
        signature: 'lower(input :: STRING) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A string to be converted into lowercase.',
            name: 'input',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      ltrim: {
        name: 'ltrim',
        category: 'String',
        description:
          'Returns the given `STRING` with leading `trimCharacterString` characters removed.',
        signature:
          'ltrim(input :: STRING, trimCharacterString :: STRING) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A value from which the leading trim character will be removed.',
            name: 'input',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'A character to be removed from the start of the given string.',
            name: 'trimCharacterString',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      max: {
        name: 'max',
        category: 'Aggregating',
        description: 'Returns the maximum value in a set of values.',
        signature: 'max(input :: ANY) :: ANY',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be aggregated.',
            name: 'input',
            type: 'ANY',
          },
        ],
        returnDescription: 'ANY',
        aggregating: true,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      min: {
        name: 'min',
        category: 'Aggregating',
        description: 'Returns the minimum value in a set of values.',
        signature: 'min(input :: ANY) :: ANY',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be aggregated.',
            name: 'input',
            type: 'ANY',
          },
        ],
        returnDescription: 'ANY',
        aggregating: true,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      nodes: {
        name: 'nodes',
        category: 'List',
        description:
          'Returns a `LIST<NODE>` containing all the `NODE` values in a `PATH`.',
        signature: 'nodes(input :: PATH) :: LIST<NODE>',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A path whose nodes will be returned.',
            name: 'input',
            type: 'PATH',
          },
        ],
        returnDescription: 'LIST<NODE>',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      none: {
        name: 'none',
        category: 'Predicate',
        description:
          'Returns true if the predicate holds for no element in the given `LIST<ANY>`.',
        signature:
          'none(variable :: VARIABLE IN list :: LIST<ANY> WHERE predicate :: ANY) :: BOOLEAN',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A variable that can be used within the `WHERE` clause.',
            name: 'variable',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'A list for the predicate to check against.',
            name: 'list',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      normalize: {
        name: 'normalize',
        category: 'String',
        description:
          'Normalize a `STRING`. The `STRING` will be normalized according to the specified normalization form.',
        signature:
          'normalize(input :: STRING, normalForm = NFC :: [NFC, NFD, NFKC, NFKD]) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be normalized.',
            name: 'input',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'A keyword specifying any of the normal forms; NFC, NFD, NFKC or NFKD.',
            name: 'normalForm',
            type: '[NFC, NFD, NFKC, NFKD]',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      nullIf: {
        name: 'nullIf',
        category: 'Scalar',
        description:
          'Returns null if the two given parameters are equivalent, otherwise returns the value of the first parameter.',
        signature: 'nullIf(v1 :: ANY, v2 :: ANY) :: ANY',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A first value to be returned if the second value is not equivalent.',
            name: 'v1',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'A second value against which the first value is compared.',
            name: 'v2',
            type: 'ANY',
          },
        ],
        returnDescription: 'ANY',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      percentileCont: {
        name: 'percentileCont',
        category: 'Aggregating',
        description:
          'Returns the percentile of a value over a group using linear interpolation.',
        signature:
          'percentileCont(input :: FLOAT, percentile :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be aggregated.',
            name: 'input',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'A percentile between 0.0 and 1.0.',
            name: 'percentile',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: true,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      percentileDisc: {
        name: 'percentileDisc',
        category: 'Aggregating',
        description:
          'Returns the nearest `INTEGER` or `FLOAT` value to the given percentile over a group using a rounding method.',
        signature:
          'percentileDisc(input :: INTEGER | FLOAT, percentile :: FLOAT) :: INTEGER | FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be aggregated.',
            name: 'input',
            type: 'INTEGER | FLOAT',
          },
          {
            isDeprecated: false,
            description: 'A percentile between 0.0 and 1.0.',
            name: 'percentile',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'INTEGER | FLOAT',
        aggregating: true,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      pi: {
        name: 'pi',
        category: 'Trigonometric',
        description: 'Returns the mathematical constant pi.',
        signature: 'pi() :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      point: {
        name: 'point',
        category: 'Spatial',
        description:
          'Returns a 2D or 3D point object, given two or respectively three coordinate values in the Cartesian coordinate system or WGS 84 geographic coordinate system.',
        signature: 'point(input :: MAP) :: POINT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'Cartesian 2D: {x :: FLOAT, y :: FLOAT, crs = "cartesian" :: STRING, srid = 7203 :: INTEGER}\n\nCartesian 3D: {x :: FLOAT, y :: FLOAT, z :: FLOAT, crs = "cartesian-3D" :: STRING, srid = 9157 :: INTEGER} \n\nWGS 84 2D: {longitude | x :: FLOAT, latitude | y :: FLOAT, crs = "WGS-84-2D" :: STRING, srid = 4326 :: INTEGER}\n\nWGS 84 3D: {longitude | x :: FLOAT, latitude | y :: FLOAT, height | z :: FLOAT, crs = "WGS-84-3D" :: STRING, srid = 4979 :: INTEGER}',
            name: 'input',
            type: 'MAP',
          },
        ],
        returnDescription: 'POINT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'point.distance': {
        name: 'point.distance',
        category: 'Spatial',
        description:
          'Returns a `FLOAT` representing the distance between any two points in the same CRS. If the points are in the WGS 84 CRS, the function returns the geodesic distance (i.e., the shortest path along the curved surface of the Earth). If the points are in a Cartesian CRS, the function returns the Euclidean distance (i.e., the shortest straight-line distance in a flat, planar space).',
        signature: 'point.distance(from :: POINT, to :: POINT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A start point.',
            name: 'from',
            type: 'POINT',
          },
          {
            isDeprecated: false,
            description: 'An end point in the same CRS as the start point.',
            name: 'to',
            type: 'POINT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'point.withinBBox': {
        name: 'point.withinBBox',
        category: 'Spatial',
        description:
          'Returns true if the provided point is within the bounding box defined by the two provided points.',
        signature:
          'point.withinBBox(point :: POINT, lowerLeft :: POINT, upperRight :: POINT) :: BOOLEAN',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A point to be confirmed in the bounding box.',
            name: 'point',
            type: 'POINT',
          },
          {
            isDeprecated: false,
            description: 'The lower left side point of the bounding box.',
            name: 'lowerLeft',
            type: 'POINT',
          },
          {
            isDeprecated: false,
            description: 'The upper right side point of the bounding box.',
            name: 'upperRight',
            type: 'POINT',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      properties: {
        name: 'properties',
        category: 'Scalar',
        description:
          'Returns a `MAP` containing all the properties of a `NODE`, `RELATIONSHIP` or `MAP`.',
        signature: 'properties(input :: NODE | RELATIONSHIP | MAP) :: MAP',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An entity to return the properties from.',
            name: 'input',
            type: 'NODE | RELATIONSHIP | MAP',
          },
        ],
        returnDescription: 'MAP',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      radians: {
        name: 'radians',
        category: 'Trigonometric',
        description: 'Converts degrees to radians.',
        signature: 'radians(input :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An angle in degrees.',
            name: 'input',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      rand: {
        name: 'rand',
        category: 'Numeric',
        description:
          'Returns a random `FLOAT` in the range from 0 (inclusive) to 1 (exclusive).',
        signature: 'rand() :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      randomUUID: {
        name: 'randomUUID',
        category: 'Scalar',
        description: 'Generates a random UUID.',
        signature: 'randomUUID() :: STRING',
        isBuiltIn: true,
        argumentDescription: [],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      range: {
        name: 'range',
        category: 'List',
        description:
          'Returns a `LIST<INTEGER>` comprising all `INTEGER` values within a specified range created with step length.',
        signature:
          'range(start :: INTEGER, end :: INTEGER, step :: INTEGER) :: LIST<INTEGER>',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The start value of the range.',
            name: 'start',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The end value of the range.',
            name: 'end',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the increment (default value: 1).',
            name: 'step',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'LIST<INTEGER>',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      reduce: {
        name: 'reduce',
        category: 'List',
        description:
          'Runs an expression against individual elements of a `LIST<ANY>`, storing the result of the expression in an accumulator.',
        signature:
          'reduce(accumulator :: VARIABLE = initial :: ANY, variable :: VARIABLE IN list :: LIST<ANY> | expression :: ANY) :: ANY',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A variable that holds the result as the list is iterated.',
            name: 'accumulator',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'A variable that can be used within the reducing expression.',
            name: 'variable',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'ANY',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      relationships: {
        name: 'relationships',
        category: 'List',
        description:
          'Returns a `LIST<RELATIONSHIP>` containing all the `RELATIONSHIP` values in a `PATH`.',
        signature: 'relationships(input :: PATH) :: LIST<RELATIONSHIP>',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The path from which all relationships will be returned.',
            name: 'input',
            type: 'PATH',
          },
        ],
        returnDescription: 'LIST<RELATIONSHIP>',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      replace: {
        name: 'replace',
        category: 'String',
        description:
          'Returns a `STRING` in which all occurrences of a specified search `STRING` in the given `STRING` have been replaced by another (specified) replacement `STRING`.',
        signature:
          'replace(original :: STRING, search :: STRING, replace :: STRING) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to be modified.',
            name: 'original',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The value to replace in the original string.',
            name: 'search',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The value to be inserted in the original string.',
            name: 'replace',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      reverse: {
        name: 'reverse',
        category: 'String',
        description:
          'Returns a `STRING` or `LIST<ANY>` in which the order of all characters or elements in the given `STRING` or `LIST<ANY>` have been reversed.',
        signature: 'reverse(input :: STRING | LIST<ANY>) :: STRING | LIST<ANY>',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string or list to be reversed.',
            name: 'input',
            type: 'STRING | LIST<ANY>',
          },
        ],
        returnDescription: 'STRING | LIST<ANY>',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      right: {
        name: 'right',
        category: 'String',
        description:
          'Returns a `STRING` containing the specified number of rightmost characters in the given `STRING`.',
        signature: 'right(original :: STRING, length :: INTEGER) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A string value whose leftmost characters will be trimmed.',
            name: 'original',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The length of the rightmost characters to be returned.',
            name: 'length',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      round: {
        name: 'round',
        category: 'Numeric',
        description:
          'Returns the value of a number rounded to the specified precision with the specified rounding mode.',
        signature:
          'round(value :: FLOAT, precision :: INTEGER | FLOAT, mode :: STRING) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be rounded.',
            name: 'value',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'The rounding precision.',
            name: 'precision',
            type: 'INTEGER | FLOAT',
          },
          {
            isDeprecated: false,
            description:
              'A precision rounding mode (`UP`, `DOWN`, `CEILING`, `FLOOR`, `HALF_UP`, `HALF_DOWN`, `HALF_EVEN`).',
            name: 'mode',
            type: 'STRING',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      rtrim: {
        name: 'rtrim',
        category: 'String',
        description:
          'Returns the given `STRING` with trailing `trimCharacterString` characters removed.',
        signature:
          'rtrim(input :: STRING, trimCharacterString :: STRING) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A value from which the leading and trailing trim character will be removed.',
            name: 'input',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'A character to be removed from the start and end of the given string.',
            name: 'trimCharacterString',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      sign: {
        name: 'sign',
        category: 'Numeric',
        description:
          'Returns the signum of an `INTEGER` or `FLOAT`: 0 if the number is 0, -1 for any negative number, and 1 for any positive number.',
        signature: 'sign(input :: INTEGER | FLOAT) :: INTEGER',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A positive or negative number.',
            name: 'input',
            type: 'INTEGER | FLOAT',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      sin: {
        name: 'sin',
        category: 'Trigonometric',
        description: 'Returns the sine of a `FLOAT`.',
        signature: 'sin(input :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An angle in radians.',
            name: 'input',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      single: {
        name: 'single',
        category: 'Predicate',
        description:
          'Returns true if the predicate holds for exactly one of the elements in the given `LIST<ANY>`.',
        signature:
          'single(variable :: VARIABLE IN list :: LIST<ANY> WHERE predicate :: ANY) :: BOOLEAN',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A variable that can be used within the `WHERE` clause.',
            name: 'variable',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'A list for the predicate to check against.',
            name: 'list',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      size: {
        name: 'size',
        category: 'Scalar',
        description:
          'Returns the number of items in a `LIST<ANY>` or the number of Unicode characters in a `STRING`.',
        signature: 'size(input :: STRING | LIST<ANY>) :: INTEGER',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value whose length is to be calculated.',
            name: 'input',
            type: 'STRING | LIST<ANY>',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      split: {
        name: 'split',
        category: 'String',
        description:
          'Returns a `LIST<STRING>` resulting from the splitting of the given `STRING` around matches of the given delimiter(s).',
        signature:
          'split(original :: STRING, splitDelimiters :: STRING | LIST<STRING>) :: LIST<STRING>',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to be split.',
            name: 'original',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The string with which to split the original string.',
            name: 'splitDelimiters',
            type: 'STRING | LIST<STRING>',
          },
        ],
        returnDescription: 'LIST<STRING>',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      sqrt: {
        name: 'sqrt',
        category: 'Logarithmic',
        description: 'Returns the square root of a `FLOAT`.',
        signature: 'sqrt(input :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The value to calculate the square root of.',
            name: 'input',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      startNode: {
        name: 'startNode',
        category: 'Scalar',
        description: 'Returns the start `NODE` of a `RELATIONSHIP`.',
        signature: 'startNode(input :: RELATIONSHIP) :: NODE',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A relationship.',
            name: 'input',
            type: 'RELATIONSHIP',
          },
        ],
        returnDescription: 'NODE',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      stdev: {
        name: 'stdev',
        category: 'Aggregating',
        description:
          'Returns the standard deviation for the given value over a group for a sample of a population.',
        signature: 'stdev(input :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The value to calculate the standard deviation of.',
            name: 'input',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: true,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      stdevp: {
        name: 'stdevp',
        category: 'Aggregating',
        description:
          'Returns the standard deviation for the given value over a group for an entire population.',
        signature: 'stdevp(input :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The value to calculate the population standard deviation of.',
            name: 'input',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: true,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      substring: {
        name: 'substring',
        category: 'String',
        description:
          'Returns a substring of a given `length` from the given `STRING`, beginning with a 0-based index start.',
        signature:
          'substring(original :: STRING, start :: INTEGER, length :: INTEGER) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The string to be shortened.',
            name: 'original',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The start position of the new string.',
            name: 'start',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The length of the new string.',
            name: 'length',
            type: 'INTEGER',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      sum: {
        name: 'sum',
        category: 'Aggregating',
        description:
          'Returns the sum of a set of `INTEGER`, `FLOAT` or `DURATION` values',
        signature:
          'sum(input :: INTEGER | FLOAT | DURATION) :: INTEGER | FLOAT | DURATION',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be aggregated.',
            name: 'input',
            type: 'INTEGER | FLOAT | DURATION',
          },
        ],
        returnDescription: 'INTEGER | FLOAT | DURATION',
        aggregating: true,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      tail: {
        name: 'tail',
        category: 'List',
        description: 'Returns all but the first element in a `LIST<ANY>`.',
        signature: 'tail(input :: LIST<ANY>) :: LIST<ANY>',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A list from which all but the first element will be returned.',
            name: 'input',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<ANY>',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      tan: {
        name: 'tan',
        category: 'Trigonometric',
        description: 'Returns the tangent of a `FLOAT`.',
        signature: 'tan(input :: FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'An angle in radians.',
            name: 'input',
            type: 'FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      time: {
        name: 'time',
        category: 'Temporal',
        description: 'Creates a `ZONED TIME` instant.',
        signature:
          'time(input = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: ZONED TIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description:
              "Either a string representation of a temporal value, a map containing the single key 'timezone', or a map containing temporal values ('hour', 'minute', 'second', 'millisecond', 'microsecond', 'nanosecond', 'timezone') as components.",
            name: 'input',
            type: 'ANY',
          },
        ],
        returnDescription: 'ZONED TIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'time.realtime': {
        name: 'time.realtime',
        category: 'Temporal',
        description:
          'Returns the current `ZONED TIME` instant using the realtime clock.',
        signature:
          'time.realtime(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: ZONED TIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description: 'A string value representing a time zone.',
            name: 'timezone',
            type: 'ANY',
          },
        ],
        returnDescription: 'ZONED TIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'time.statement': {
        name: 'time.statement',
        category: 'Temporal',
        description:
          'Returns the current `ZONED TIME` instant using the statement clock.',
        signature:
          'time.statement(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: ZONED TIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description: 'A string value representing a time zone.',
            name: 'timezone',
            type: 'ANY',
          },
        ],
        returnDescription: 'ZONED TIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'time.transaction': {
        name: 'time.transaction',
        category: 'Temporal',
        description:
          'Returns the current `ZONED TIME` instant using the transaction clock.',
        signature:
          'time.transaction(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: ZONED TIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description: 'A string value representing a time zone.',
            name: 'timezone',
            type: 'ANY',
          },
        ],
        returnDescription: 'ZONED TIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'time.truncate': {
        name: 'time.truncate',
        category: 'Temporal',
        description:
          'Truncates the given temporal value to a `ZONED TIME` instant using the specified unit.',
        signature:
          'time.truncate(unit :: STRING, input = DEFAULT_TEMPORAL_ARGUMENT :: ANY, fields = null :: MAP) :: ZONED TIME',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              "A string representing one of the following: 'microsecond', 'millisecond', 'second', 'minute', 'hour', 'day'.",
            name: 'unit',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}',
            description:
              'The date to be truncated using either `ZONED DATETIME`, `LOCAL DATETIME`, `ZONED TIME`, or `LOCAL TIME`.',
            name: 'input',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=MAP}',
            description:
              'A list of time components smaller than those specified in `unit` to preserve during truncation.',
            name: 'fields',
            type: 'MAP',
          },
        ],
        returnDescription: 'ZONED TIME',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      timestamp: {
        name: 'timestamp',
        category: 'Scalar',
        description:
          'Returns the difference, measured in milliseconds, between the current time and midnight, January 1, 1970 UTC',
        signature: 'timestamp() :: INTEGER',
        isBuiltIn: true,
        argumentDescription: [],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      toBoolean: {
        name: 'toBoolean',
        category: 'Scalar',
        description:
          'Converts a `BOOLEAN`, `STRING` or `INTEGER` value to a `BOOLEAN` value. For `INTEGER` values, 0 is defined to be false and any other `INTEGER` is defined to be true.',
        signature: 'toBoolean(input :: BOOLEAN | STRING | INTEGER) :: BOOLEAN',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be converted into a boolean.',
            name: 'input',
            type: 'BOOLEAN | STRING | INTEGER',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      toBooleanList: {
        name: 'toBooleanList',
        category: 'List',
        description:
          'Converts a `LIST<ANY>` of values to a `LIST<BOOLEAN>` values. If any values are not convertible to `BOOLEAN` they will be null in the `LIST<BOOLEAN>` returned.',
        signature: 'toBooleanList(input :: LIST<ANY>) :: LIST<BOOLEAN>',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A list of values to be converted into a list of booleans.',
            name: 'input',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<BOOLEAN>',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      toBooleanOrNull: {
        name: 'toBooleanOrNull',
        category: 'Scalar',
        description:
          'Converts a value to a `BOOLEAN` value, or null if the value cannot be converted.',
        signature: 'toBooleanOrNull(input :: ANY) :: BOOLEAN',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be converted into a boolean or null.',
            name: 'input',
            type: 'ANY',
          },
        ],
        returnDescription: 'BOOLEAN',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      toFloat: {
        name: 'toFloat',
        category: 'Scalar',
        description:
          'Converts a `STRING`, `INTEGER` or `FLOAT` value to a `FLOAT` value.',
        signature: 'toFloat(input :: STRING | INTEGER | FLOAT) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be converted into a float.',
            name: 'input',
            type: 'STRING | INTEGER | FLOAT',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      toFloatList: {
        name: 'toFloatList',
        category: 'List',
        description:
          'Converts a `LIST<ANY>` to a `LIST<FLOAT>` values. If any values are not convertible to `FLOAT` they will be null in the `LIST<FLOAT>` returned.',
        signature: 'toFloatList(input :: LIST<ANY>) :: LIST<FLOAT>',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A list of values to be converted into a list of floats.',
            name: 'input',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<FLOAT>',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      toFloatOrNull: {
        name: 'toFloatOrNull',
        category: 'Scalar',
        description:
          'Converts a value to a `FLOAT` value, or null if the value cannot be converted.',
        signature: 'toFloatOrNull(input :: ANY) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be converted into a float or null.',
            name: 'input',
            type: 'ANY',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      toInteger: {
        name: 'toInteger',
        category: 'Scalar',
        description:
          'Converts a `BOOLEAN`, `STRING`, `INTEGER` or `FLOAT` value to an `INTEGER` value. For `BOOLEAN` values, true is defined to be 1 and false is defined to be 0.',
        signature:
          'toInteger(input :: BOOLEAN | STRING | INTEGER | FLOAT) :: INTEGER',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be converted into an integer.',
            name: 'input',
            type: 'BOOLEAN | STRING | INTEGER | FLOAT',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      toIntegerList: {
        name: 'toIntegerList',
        category: 'List',
        description:
          'Converts a `LIST<ANY>` to a `LIST<INTEGER>` values. If any values are not convertible to `INTEGER` they will be null in the `LIST<INTEGER>` returned.',
        signature: 'toIntegerList(input :: LIST<ANY>) :: LIST<INTEGER>',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A list of values to be converted into a list of integers.',
            name: 'input',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<INTEGER>',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      toIntegerOrNull: {
        name: 'toIntegerOrNull',
        category: 'Scalar',
        description:
          'Converts a value to an `INTEGER` value, or null if the value cannot be converted.',
        signature: 'toIntegerOrNull(input :: ANY) :: INTEGER',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be converted into an integer or null.',
            name: 'input',
            type: 'ANY',
          },
        ],
        returnDescription: 'INTEGER',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      toLower: {
        name: 'toLower',
        category: 'String',
        description: 'Returns the given `STRING` in lowercase.',
        signature: 'toLower(input :: STRING) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A string to be converted into lowercase.',
            name: 'input',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      toString: {
        name: 'toString',
        category: 'String',
        description:
          'Converts an `INTEGER`, `FLOAT`, `BOOLEAN`, `POINT` or temporal type (i.e. `DATE`, `ZONED TIME`, `LOCAL TIME`, `ZONED DATETIME`, `LOCAL DATETIME` or `DURATION`) value to a `STRING`.',
        signature: 'toString(input :: ANY) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be converted into a string.',
            name: 'input',
            type: 'ANY',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      toStringList: {
        name: 'toStringList',
        category: 'List',
        description:
          'Converts a `LIST<ANY>` to a `LIST<STRING>` values. If any values are not convertible to `STRING` they will be null in the `LIST<STRING>` returned.',
        signature: 'toStringList(input :: LIST<ANY>) :: LIST<STRING>',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A list of values to be converted into a list of strings.',
            name: 'input',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: 'LIST<STRING>',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      toStringOrNull: {
        name: 'toStringOrNull',
        category: 'String',
        description:
          'Converts an `INTEGER`, `FLOAT`, `BOOLEAN`, `POINT` or temporal type (i.e. `DATE`, `ZONED TIME`, `LOCAL TIME`, `ZONED DATETIME`, `LOCAL DATETIME` or `DURATION`) value to a `STRING`, or null if the value cannot be converted.',
        signature: 'toStringOrNull(input :: ANY) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to be converted into a string or null.',
            name: 'input',
            type: 'ANY',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      toUpper: {
        name: 'toUpper',
        category: 'String',
        description: 'Returns the given `STRING` in uppercase.',
        signature: 'toUpper(input :: STRING) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A string to be converted into uppercase.',
            name: 'input',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      trim: {
        name: 'trim',
        category: 'String',
        description:
          'Returns the given `STRING` with leading and/or trailing `trimCharacterString` removed.',
        signature:
          'trim([[LEADING | TRAILING | BOTH] [trimCharacterString :: STRING] FROM] input :: STRING) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The parts of the string to trim; LEADING, TRAILING, BOTH',
            name: 'trimSpecification',
            type: '[LEADING, TRAILING, BOTH]',
          },
          {
            isDeprecated: false,
            description:
              'The characters to be removed from the start and/or end of the given string.',
            name: 'trimCharacterString',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'A value from which all leading and/or trailing trim characters will be removed.',
            name: 'input',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      type: {
        name: 'type',
        category: 'Scalar',
        description:
          'Returns a `STRING` representation of the `RELATIONSHIP` type.',
        signature: 'type(input :: RELATIONSHIP) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A relationship.',
            name: 'input',
            type: 'RELATIONSHIP',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      upper: {
        name: 'upper',
        category: 'String',
        description: 'Returns the given `STRING` in uppercase.',
        signature: 'upper(input :: STRING) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A string to be converted into uppercase.',
            name: 'input',
            type: 'STRING',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      valueType: {
        name: 'valueType',
        category: 'Scalar',
        description:
          'Returns a `STRING` representation of the most precise value type that the given expression evaluates to.',
        signature: 'valueType(input :: ANY) :: STRING',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A value to return the type of.',
            name: 'input',
            type: 'ANY',
          },
        ],
        returnDescription: 'STRING',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'vector.similarity.cosine': {
        name: 'vector.similarity.cosine',
        category: 'Vector',
        description:
          'Returns a `FLOAT` representing the similarity between the argument vectors based on their cosine.',
        signature:
          'vector.similarity.cosine(a :: LIST<INTEGER | FLOAT>, b :: LIST<INTEGER | FLOAT>) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A list representing the first vector.',
            name: 'a',
            type: 'LIST<INTEGER | FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'A list representing the second vector.',
            name: 'b',
            type: 'LIST<INTEGER | FLOAT>',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
      'vector.similarity.euclidean': {
        name: 'vector.similarity.euclidean',
        category: 'Vector',
        description:
          'Returns a `FLOAT` representing the similarity between the argument vectors based on their Euclidean distance.',
        signature:
          'vector.similarity.euclidean(a :: LIST<INTEGER | FLOAT>, b :: LIST<INTEGER | FLOAT>) :: FLOAT',
        isBuiltIn: true,
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A list representing the first vector.',
            name: 'a',
            type: 'LIST<INTEGER | FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'A list representing the second vector.',
            name: 'b',
            type: 'LIST<INTEGER | FLOAT>',
          },
        ],
        returnDescription: 'FLOAT',
        aggregating: false,
        rolesExecution: [
          'PUBLIC',
          'admin',
          'architect',
          'editor',
          'publisher',
          'reader',
        ],
        rolesBoostedExecution: [],
        isDeprecated: false,
        deprecatedBy: null,
      },
    }),
  },
  procedures: {
    'CYPHER 5': asNeo4jProcedures({
      'apoc.algo.aStar': {
        name: 'apoc.algo.aStar',
        description:
          'Runs the A* search algorithm to find the optimal path between two `NODE` values, using the given `RELATIONSHIP` property name for the cost function.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.algo.aStar(startNode :: NODE, endNode :: NODE, relTypesAndDirections :: STRING, weightPropertyName :: STRING, latPropertyName :: STRING, lonPropertyName :: STRING) :: (path :: PATH, weight :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The node to start the search from.',
            name: 'startNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The node to end the search on.',
            name: 'endNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description:
              "The relationship types to restrict the algorithm to. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
            name: 'relTypesAndDirections',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the property to use as the weight.',
            name: 'weightPropertyName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the property to use as the latitude.',
            name: 'latPropertyName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the property to use as the longitude.',
            name: 'lonPropertyName',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The path result.',
            name: 'path',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            description: 'The weight of the given path.',
            name: 'weight',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.algo.aStarConfig': {
        name: 'apoc.algo.aStarConfig',
        description:
          'Runs the A* search algorithm to find the optimal path between two `NODE` values, using the given `RELATIONSHIP` property name for the cost function.\nThis procedure looks for weight, latitude and longitude properties in the config.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.algo.aStarConfig(startNode :: NODE, endNode :: NODE, relTypesAndDirections :: STRING, config :: MAP) :: (path :: PATH, weight :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The node to start the search from.',
            name: 'startNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The node to end the search on.',
            name: 'endNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description:
              "The relationship types to restrict the algorithm to. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
            name: 'relTypesAndDirections',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              "{ weight = 'distance' :: STRING, default = Double.MAX_VALUE :: FLOAT, y = 'latitude' :: STRING, x = 'longitude' :: STRING, pointPropName :: STRING }",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The path result.',
            name: 'path',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            description: 'The weight of the given path.',
            name: 'weight',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.algo.allSimplePaths': {
        name: 'apoc.algo.allSimplePaths',
        description:
          'Runs a search algorithm to find all of the simple paths between the given `RELATIONSHIP` values, up to a max depth described by `maxNodes`.\nThe returned paths will not contain loops.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.algo.allSimplePaths(startNode :: NODE, endNode :: NODE, relTypesAndDirections :: STRING, maxNodes :: INTEGER) :: (path :: PATH)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The node to start the search from.',
            name: 'startNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The node to end the search on.',
            name: 'endNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description:
              "The relationship types to restrict the algorithm to. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
            name: 'relTypesAndDirections',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The max depth (in terms of nodes) the algorithm will explore.',
            name: 'maxNodes',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The path result.',
            name: 'path',
            type: 'PATH',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.algo.cover': {
        name: 'apoc.algo.cover',
        description:
          'Returns all `RELATIONSHIP` values connecting the given set of `NODE` values.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature: 'apoc.algo.cover(nodes :: ANY) :: (rel :: RELATIONSHIP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The nodes to look for connected relationships on.',
            name: 'nodes',
            type: 'ANY',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The relationships connected to the given nodes.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.algo.dijkstra': {
        name: 'apoc.algo.dijkstra',
        description:
          "Runs Dijkstra's algorithm using the given `RELATIONSHIP` property as the cost function.",
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.algo.dijkstra(startNode :: NODE, endNode :: NODE, relTypesAndDirections :: STRING, weightPropertyName :: STRING, defaultWeight = NaN :: FLOAT, numberOfWantedPaths = 1 :: INTEGER) :: (path :: PATH, weight :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The node to start the search from.',
            name: 'startNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The node to end the search on.',
            name: 'endNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description:
              "The relationship types to restrict the algorithm to. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
            name: 'relTypesAndDirections',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the property to use as the weight.',
            name: 'weightPropertyName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=NaN, type=FLOAT}',
            description:
              'The `defaultWeight` is used when no specific weight is provided for the given relationship or node. The default value for defaultWeight is NaN.',
            name: 'defaultWeight',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=1, type=INTEGER}',
            description: 'The number of wanted paths to return.',
            name: 'numberOfWantedPaths',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The path result.',
            name: 'path',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            description: 'The weight of the given path.',
            name: 'weight',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.atomic.add': {
        name: 'apoc.atomic.add',
        description:
          'Sets the given property to the sum of itself and the given `INTEGER` or `FLOAT` value.\nThe procedure then sets the property to the returned sum.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.atomic.add(container :: ANY, propertyName :: STRING, number :: INTEGER | FLOAT, retryAttempts = 5 :: INTEGER) :: (container :: ANY, property :: STRING, oldValue :: ANY, newValue :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node or relationship that contains the property to which the value will be added.',
            name: 'container',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'The name of the property whose value will be added to.',
            name: 'propertyName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number to add.',
            name: 'number',
            type: 'INTEGER | FLOAT',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=5, type=INTEGER}',
            description: 'The max retry attempts.',
            name: 'retryAttempts',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated node or relationship.',
            name: 'container',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The name of the updated property.',
            name: 'property',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The original value on the property.',
            name: 'oldValue',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The new value on the property.',
            name: 'newValue',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.atomic.concat': {
        name: 'apoc.atomic.concat',
        description:
          'Sets the given property to the concatenation of itself and the `STRING` value.\nThe procedure then sets the property to the returned `STRING`.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.atomic.concat(container :: ANY, propertyName :: STRING, string :: STRING, retryAttempts = 5 :: INTEGER) :: (container :: ANY, property :: STRING, oldValue :: ANY, newValue :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node or relationship that contains the property to which the value will be concatenated.',
            name: 'container',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The name of the property to be concatenated.',
            name: 'propertyName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The string value to concatenate with the property.',
            name: 'string',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=5, type=INTEGER}',
            description: 'The max retry attempts.',
            name: 'retryAttempts',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated node or relationship.',
            name: 'container',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The name of the updated property.',
            name: 'property',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The original value on the property.',
            name: 'oldValue',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The new value on the property.',
            name: 'newValue',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.atomic.insert': {
        name: 'apoc.atomic.insert',
        description:
          'Inserts a value at position into the `LIST<ANY>` value of a property.\nThe procedure then sets the result back on the property.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.atomic.insert(container :: ANY, propertyName :: STRING, position :: INTEGER, value :: ANY, retryAttempts = 5 :: INTEGER) :: (container :: ANY, property :: STRING, oldValue :: ANY, newValue :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node or relationship that has a property containing a list.',
            name: 'container',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'The name of the property into which the value will be inserted.',
            name: 'propertyName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The position in the list to insert the item into.',
            name: 'position',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The value to insert.',
            name: 'value',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=5, type=INTEGER}',
            description: 'The max retry attempts.',
            name: 'retryAttempts',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated node or relationship.',
            name: 'container',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The name of the updated property.',
            name: 'property',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The original value on the property.',
            name: 'oldValue',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The new value on the property.',
            name: 'newValue',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.atomic.remove': {
        name: 'apoc.atomic.remove',
        description:
          'Removes the element at position from the `LIST<ANY>` value of a property.\nThe procedure then sets the property to the resulting `LIST<ANY>` value.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.atomic.remove(container :: ANY, propertyName :: STRING, position :: INTEGER, retryAttempts = 5 :: INTEGER) :: (container :: ANY, property :: STRING, oldValue :: ANY, newValue :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node or relationship that has a property containing a list.',
            name: 'container',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'The name of the property from which the value will be removed.',
            name: 'propertyName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The position in the list to remove the item from.',
            name: 'position',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=5, type=INTEGER}',
            description: 'The max retry attempts.',
            name: 'retryAttempts',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated node or relationship.',
            name: 'container',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The name of the updated property.',
            name: 'property',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The original value on the property.',
            name: 'oldValue',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The new value on the property.',
            name: 'newValue',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.atomic.subtract': {
        name: 'apoc.atomic.subtract',
        description:
          'Sets the property of a value to itself minus the given `INTEGER` or `FLOAT` value.\nThe procedure then sets the property to the returned sum.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.atomic.subtract(container :: ANY, propertyName :: STRING, number :: INTEGER | FLOAT, retryAttempts = 5 :: INTEGER) :: (container :: ANY, property :: STRING, oldValue :: ANY, newValue :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node or relationship that contains the property from which the value will be subtracted.',
            name: 'container',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'The name of the property from which the value will be subtracted.',
            name: 'propertyName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number to subtract.',
            name: 'number',
            type: 'INTEGER | FLOAT',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=5, type=INTEGER}',
            description: 'The max retry attempts.',
            name: 'retryAttempts',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated node or relationship.',
            name: 'container',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The name of the updated property.',
            name: 'property',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The original value on the property.',
            name: 'oldValue',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The new value on the property.',
            name: 'newValue',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.atomic.update': {
        name: 'apoc.atomic.update',
        description: 'Updates the value of a property with a Cypher operation.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.atomic.update(container :: ANY, propertyName :: STRING, operation :: STRING, retryAttempts = 5 :: INTEGER) :: (container :: ANY, property :: STRING, oldValue :: ANY, newValue :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node or relationship with the property to be updated.',
            name: 'container',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The name of the property to be updated.',
            name: 'propertyName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The operation to perform to update the property.',
            name: 'operation',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=5, type=INTEGER}',
            description: 'The max retry attempts.',
            name: 'retryAttempts',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated node or relationship.',
            name: 'container',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The name of the updated property.',
            name: 'property',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The original value on the property.',
            name: 'oldValue',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The new value on the property.',
            name: 'newValue',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.case': {
        name: 'apoc.case',
        description:
          'For each pair of conditional and read-only queries in the given `LIST<ANY>`, this procedure will run the first query for which the conditional is evaluated to true. If none of the conditionals are true, the `ELSE` query will run instead.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.case(conditionals :: LIST<ANY>, elseQuery =  :: STRING, params = {} :: MAP) :: (value :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A list of conditionals, where each conditional is a pair: the first element is a predicate, and the second is a Cypher query to be executed based on that predicate.',
            name: 'conditionals',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              'A Cypher query to evaluate if all conditionals evaluate to false.',
            name: 'elseQuery',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              'A map of parameters to be used in the executed Cypher query.',
            name: 'params',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The result returned from the evaluated Cypher query.',
            name: 'value',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.coll.elements': {
        name: 'apoc.coll.elements',
        description:
          'Deconstructs a `LIST<ANY>` into identifiers indicating their specific type.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.coll.elements(coll :: LIST<ANY>, limit = -1 :: INTEGER, offset = 0 :: INTEGER) :: (_1 :: ANY, _2 :: ANY, _3 :: ANY, _4 :: ANY, _5 :: ANY, _6 :: ANY, _7 :: ANY, _8 :: ANY, _9 :: ANY, _10 :: ANY, _1s :: STRING, _2s :: STRING, _3s :: STRING, _4s :: STRING, _5s :: STRING, _6s :: STRING, _7s :: STRING, _8s :: STRING, _9s :: STRING, _10s :: STRING, _1i :: INTEGER, _2i :: INTEGER, _3i :: INTEGER, _4i :: INTEGER, _5i :: INTEGER, _6i :: INTEGER, _7i :: INTEGER, _8i :: INTEGER, _9i :: INTEGER, _10i :: INTEGER, _1f :: FLOAT, _2f :: FLOAT, _3f :: FLOAT, _4f :: FLOAT, _5f :: FLOAT, _6f :: FLOAT, _7f :: FLOAT, _8f :: FLOAT, _9f :: FLOAT, _10f :: FLOAT, _1b :: BOOLEAN, _2b :: BOOLEAN, _3b :: BOOLEAN, _4b :: BOOLEAN, _5b :: BOOLEAN, _6b :: BOOLEAN, _7b :: BOOLEAN, _8b :: BOOLEAN, _9b :: BOOLEAN, _10b :: BOOLEAN, _1l :: LIST<ANY>, _2l :: LIST<ANY>, _3l :: LIST<ANY>, _4l :: LIST<ANY>, _5l :: LIST<ANY>, _6l :: LIST<ANY>, _7l :: LIST<ANY>, _8l :: LIST<ANY>, _9l :: LIST<ANY>, _10l :: LIST<ANY>, _1m :: MAP, _2m :: MAP, _3m :: MAP, _4m :: MAP, _5m :: MAP, _6m :: MAP, _7m :: MAP, _8m :: MAP, _9m :: MAP, _10m :: MAP, _1n :: NODE, _2n :: NODE, _3n :: NODE, _4n :: NODE, _5n :: NODE, _6n :: NODE, _7n :: NODE, _8n :: NODE, _9n :: NODE, _10n :: NODE, _1r :: RELATIONSHIP, _2r :: RELATIONSHIP, _3r :: RELATIONSHIP, _4r :: RELATIONSHIP, _5r :: RELATIONSHIP, _6r :: RELATIONSHIP, _7r :: RELATIONSHIP, _8r :: RELATIONSHIP, _9r :: RELATIONSHIP, _10r :: RELATIONSHIP, _1p :: PATH, _2p :: PATH, _3p :: PATH, _4p :: PATH, _5p :: PATH, _6p :: PATH, _7p :: PATH, _8p :: PATH, _9p :: PATH, _10p :: PATH, elements :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A list of values to deconstruct.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=-1, type=INTEGER}',
            description:
              'The maximum size of elements to deconstruct from the given list.',
            name: 'limit',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=0, type=INTEGER}',
            description: 'The offset to start deconstructing from.',
            name: 'offset',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The value of the first item.',
            name: '_1',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The value of the second item.',
            name: '_2',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The value of the third item.',
            name: '_3',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The value of the fourth item.',
            name: '_4',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The value of the fifth item.',
            name: '_5',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The value of the sixth item.',
            name: '_6',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The value of the seventh item.',
            name: '_7',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The value of the eighth item.',
            name: '_8',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The value of the ninth item.',
            name: '_9',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The value of the tenth item.',
            name: '_10',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'The value of the first item, if it is a string value.',
            name: '_1s',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The value of the second item, if it is a string value.',
            name: '_2s',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The value of the third item, if it is a string value.',
            name: '_3s',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The value of the fourth item, if it is a string value.',
            name: '_4s',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The value of the fifth item, if it is a string value.',
            name: '_5s',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The value of the sixth item, if it is a string value.',
            name: '_6s',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The value of the seventh item, if it is a string value.',
            name: '_7s',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The value of the eighth item, if it is a string value.',
            name: '_8s',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The value of the ninth item, if it is a string value.',
            name: '_9s',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The value of the tenth item, if it is a string value.',
            name: '_10s',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The value of the first item, if it is an integer value.',
            name: '_1i',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'The value of the second item, if it is an integer value.',
            name: '_2i',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'The value of the third item, if it is an integer value.',
            name: '_3i',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'The value of the fourth item, if it is an integer value.',
            name: '_4i',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'The value of the fifth item, if it is an integer value.',
            name: '_5i',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'The value of the sixth item, if it is an integer value.',
            name: '_6i',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'The value of the seventh item, if it is an integer value.',
            name: '_7i',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'The value of the eighth item, if it is an integer value.',
            name: '_8i',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'The value of the ninth item, if it is an integer value.',
            name: '_9i',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'The value of the tenth item, if it is an integer value.',
            name: '_10i',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The value of the first item, if it is a float value.',
            name: '_1f',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description:
              'The value of the second item, if it is a float value.',
            name: '_2f',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'The value of the third item, if it is a float value.',
            name: '_3f',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description:
              'The value of the fourth item, if it is a float value.',
            name: '_4f',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'The value of the fifth item, if it is a float value.',
            name: '_5f',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'The value of the sixth item, if it is a float value.',
            name: '_6f',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description:
              'The value of the seventh item, if it is a float value.',
            name: '_7f',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description:
              'The value of the eighth item, if it is a float value.',
            name: '_8f',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'The value of the ninth item, if it is a float value.',
            name: '_9f',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'The value of the tenth item, if it is a float value.',
            name: '_10f',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description:
              'The value of the first item, if it is a boolean value.',
            name: '_1b',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description:
              'The value of the second item, if it is a boolean value.',
            name: '_2b',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description:
              'The value of the third item, if it is a boolean value.',
            name: '_3b',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description:
              'The value of the fourth item, if it is a boolean value.',
            name: '_4b',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description:
              'The value of the fifth item, if it is a boolean value.',
            name: '_5b',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description:
              'The value of the sixth item, if it is a boolean value.',
            name: '_6b',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description:
              'The value of the seventh item, if it is a boolean value.',
            name: '_7b',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description:
              'The value of the eighth item, if it is a boolean value.',
            name: '_8b',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description:
              'The value of the ninth item, if it is a boolean value.',
            name: '_9b',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description:
              'The value of the tenth item, if it is a boolean value.',
            name: '_10b',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The value of the first item, if it is a list value.',
            name: '_1l',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The value of the second item, if it is a list value.',
            name: '_2l',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The value of the third item, if it is a list value.',
            name: '_3l',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The value of the fourth item, if it is a list value.',
            name: '_4l',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The value of the fifth item, if it is a list value.',
            name: '_5l',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The value of the sixth item, if it is a list value.',
            name: '_6l',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description:
              'The value of the seventh item, if it is a list value.',
            name: '_7l',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The value of the eighth item, if it is a list value.',
            name: '_8l',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The value of the ninth item, if it is a list value.',
            name: '_9l',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The value of the tenth item, if it is a list value.',
            name: '_10l',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The value of the first item, if it is a map value.',
            name: '_1m',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The value of the second item, if it is a map value.',
            name: '_2m',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The value of the third item, if it is a map value.',
            name: '_3m',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The value of the fourth item, if it is a map value.',
            name: '_4m',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The value of the fifth item, if it is a map value.',
            name: '_5m',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The value of the sixth item, if it is a map value.',
            name: '_6m',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The value of the seventh item, if it is a map value.',
            name: '_7m',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The value of the eighth item, if it is a map value.',
            name: '_8m',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The value of the ninth item, if it is a map value.',
            name: '_9m',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The value of the tenth item, if it is a map value.',
            name: '_10m',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The value of the first item, if it is a node value.',
            name: '_1n',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The value of the second item, if it is a node value.',
            name: '_2n',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The value of the third item, if it is a node value.',
            name: '_3n',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The value of the fourth item, if it is a node value.',
            name: '_4n',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The value of the fifth item, if it is a node value.',
            name: '_5n',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The value of the sixth item, if it is a node value.',
            name: '_6n',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description:
              'The value of the seventh item, if it is a node value.',
            name: '_7n',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The value of the eighth item, if it is a node value.',
            name: '_8n',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The value of the ninth item, if it is a node value.',
            name: '_9n',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The value of the tenth item, if it is a node value.',
            name: '_10n',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description:
              'The value of the first item, if it is a relationship value.',
            name: '_1r',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description:
              'The value of the second item, if it is a relationship value.',
            name: '_2r',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description:
              'The value of the third item, if it is a relationship value.',
            name: '_3r',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description:
              'The value of the fourth item, if it is a relationship value.',
            name: '_4r',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description:
              'The value of the fifth item, if it is a relationship value.',
            name: '_5r',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description:
              'The value of the sixth item, if it is a relationship value.',
            name: '_6r',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description:
              'The value of the seventh item, if it is a relationship value.',
            name: '_7r',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description:
              'The value of the eighth item, if it is a relationship value.',
            name: '_8r',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description:
              'The value of the ninth item, if it is a relationship value.',
            name: '_9r',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description:
              'The value of the tenth item, if it is a relationship value.',
            name: '_10r',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description: 'The value of the first item, if it is a path value.',
            name: '_1p',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            description: 'The value of the second item, if it is a path value.',
            name: '_2p',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            description: 'The value of the third item, if it is a path value.',
            name: '_3p',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            description: 'The value of the fourth item, if it is a path value.',
            name: '_4p',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            description: 'The value of the fifth item, if it is a path value.',
            name: '_5p',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            description: 'The value of the sixth item, if it is a path value.',
            name: '_6p',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            description:
              'The value of the seventh item, if it is a path value.',
            name: '_7p',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            description: 'The value of the eighth item, if it is a path value.',
            name: '_8p',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            description: 'The value of the ninth item, if it is a path value.',
            name: '_9p',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            description: 'The value of the tenth item, if it is a path value.',
            name: '_10p',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            description: 'The number of deconstructed elements.',
            name: 'elements',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.coll.pairWithOffset': {
        name: 'apoc.coll.pairWithOffset',
        description: 'Returns a `LIST<ANY>` of pairs defined by the offset.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.coll.pairWithOffset(coll :: LIST<ANY>, offset :: INTEGER) :: (value :: LIST<ANY>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to create pairs from.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description:
              'The offset to make each pair with from the given list.',
            name: 'offset',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The created pair.',
            name: 'value',
            type: 'LIST<ANY>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.coll.partition': {
        name: 'apoc.coll.partition',
        description:
          'Partitions the original `LIST<ANY>` into a new `LIST<ANY>` of the given batch size.\nThe final `LIST<ANY>` may be smaller than the given batch size.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.coll.partition(coll :: LIST<ANY>, batchSize :: INTEGER) :: (value :: LIST<ANY>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to partition into smaller sublists.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The max size of each partitioned sublist.',
            name: 'batchSize',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The partitioned list.',
            name: 'value',
            type: 'LIST<ANY>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.coll.split': {
        name: 'apoc.coll.split',
        description:
          'Splits a collection by the given value.\nThe value itself will not be part of the resulting `LIST<ANY>` values.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.coll.split(coll :: LIST<ANY>, value :: ANY) :: (value :: LIST<ANY>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to split into parts.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The value to split the given list by.',
            name: 'value',
            type: 'ANY',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The split list.',
            name: 'value',
            type: 'LIST<ANY>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.coll.zipToRows': {
        name: 'apoc.coll.zipToRows',
        description:
          'Returns the two `LIST<ANY>` values zipped together, with one row per zipped pair.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.coll.zipToRows(list1 :: LIST<ANY>, list2 :: LIST<ANY>) :: (value :: LIST<ANY>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to zip together with `list2`.',
            name: 'list1',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The list to zip together with `list1`.',
            name: 'list2',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A zipped pair.',
            name: 'value',
            type: 'LIST<ANY>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.convert.setJsonProperty': {
        name: 'apoc.convert.setJsonProperty',
        description:
          'Serializes the given JSON object and sets it as a property on the given `NODE`.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.convert.setJsonProperty(node :: NODE, key :: STRING, value :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The node to set the JSON property on.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The name of the property to set.',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The property to serialize as a JSON object.',
            name: 'value',
            type: 'ANY',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.convert.toTree': {
        name: 'apoc.convert.toTree',
        description:
          'Returns a stream of `MAP` values, representing the given `PATH` values as a tree with at least one root.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.convert.toTree(paths :: LIST<PATH>, lowerCaseRels = true :: BOOLEAN, config = {} :: MAP) :: (value :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A list of paths to convert into a tree.',
            name: 'paths',
            type: 'LIST<PATH>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=true, type=BOOLEAN}',
            description:
              'Whether or not to convert relationship types to lower case.',
            name: 'lowerCaseRels',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{ nodes = {} :: MAP, rels = {} :: MAP, sortPaths = true :: BOOLEAN }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The resulting tree.',
            name: 'value',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy: 'apoc.paths.toJsonTree',
        option: {
          deprecated: true,
        },
      },
      'apoc.create.addLabels': {
        name: 'apoc.create.addLabels',
        description: 'Adds the given labels to the given `NODE` values.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.create.addLabels(nodes :: ANY, labels :: LIST<STRING>) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The nodes to add labels to.',
            name: 'nodes',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The labels to add to the nodes.',
            name: 'labels',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.create.clonePathToVirtual': {
        name: 'apoc.create.clonePathToVirtual',
        description:
          'Takes the given `PATH` and returns a virtual representation of it.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.create.clonePathToVirtual(path :: PATH) :: (path :: PATH)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The path to create a virtual path from.',
            name: 'path',
            type: 'PATH',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The path result.',
            name: 'path',
            type: 'PATH',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.create.clonePathsToVirtual': {
        name: 'apoc.create.clonePathsToVirtual',
        description:
          'Takes the given `LIST<PATH>` and returns a virtual representation of them.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.create.clonePathsToVirtual(paths :: LIST<PATH>) :: (path :: PATH)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The paths to create virtual paths from.',
            name: 'paths',
            type: 'LIST<PATH>',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The path result.',
            name: 'path',
            type: 'PATH',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.create.node': {
        name: 'apoc.create.node',
        description: 'Creates a `NODE` with the given dynamic labels.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.create.node(labels :: LIST<STRING>, props :: MAP) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The labels to assign to the new node.',
            name: 'labels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The properties to assign to the new node.',
            name: 'props',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The created node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.create.nodes': {
        name: 'apoc.create.nodes',
        description: 'Creates `NODE` values with the given dynamic labels.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.create.nodes(labels :: LIST<STRING>, props :: LIST<MAP>) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The labels to assign to the new nodes.',
            name: 'labels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The properties to assign to the new nodes.',
            name: 'props',
            type: 'LIST<MAP>',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The created node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.create.relationship': {
        name: 'apoc.create.relationship',
        description:
          'Creates a `RELATIONSHIP` with the given dynamic relationship type.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.create.relationship(from :: NODE, relType :: STRING, props :: MAP, to :: NODE) :: (rel :: RELATIONSHIP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node from which the outgoing relationship will start.',
            name: 'from',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The type to assign to the new relationship.',
            name: 'relType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The properties to assign to the new relationship.',
            name: 'props',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              'The node to which the incoming relationship will be connected.',
            name: 'to',
            type: 'NODE',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The created relationship.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.create.removeLabels': {
        name: 'apoc.create.removeLabels',
        description: 'Removes the given labels from the given `NODE` values.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.create.removeLabels(nodes :: ANY, labels :: LIST<STRING>) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The node to remove labels from.',
            name: 'nodes',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The labels to remove from the given node.',
            name: 'labels',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.create.removeProperties': {
        name: 'apoc.create.removeProperties',
        description:
          'Removes the given properties from the given `NODE` values.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.create.removeProperties(nodes :: ANY, keys :: LIST<STRING>) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The nodes to remove properties from.',
            name: 'nodes',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The property keys to remove from the given nodes.',
            name: 'keys',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.create.removeRelProperties': {
        name: 'apoc.create.removeRelProperties',
        description:
          'Removes the given properties from the given `RELATIONSHIP` values.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.create.removeRelProperties(rels :: ANY, keys :: LIST<STRING>) :: (rel :: RELATIONSHIP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The relationships to remove properties from.',
            name: 'rels',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The property keys to remove from the given nodes.',
            name: 'keys',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated relationship.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.create.setLabels': {
        name: 'apoc.create.setLabels',
        description:
          'Sets the given labels to the given `NODE` values. Non-matching labels are removed from the nodes.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.create.setLabels(nodes :: ANY, labels :: LIST<STRING>) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The nodes to set labels on.',
            name: 'nodes',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The labels to set on the given nodes.',
            name: 'labels',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.create.setProperties': {
        name: 'apoc.create.setProperties',
        description: 'Sets the given properties to the given `NODE` values.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.create.setProperties(nodes :: ANY, keys :: LIST<STRING>, values :: LIST<ANY>) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The nodes to set properties on.',
            name: 'nodes',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The property keys to set on the given nodes.',
            name: 'keys',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description:
              'The values to assign to the properties on the given nodes.',
            name: 'values',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.create.setProperty': {
        name: 'apoc.create.setProperty',
        description: 'Sets the given property to the given `NODE` values.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.create.setProperty(nodes :: ANY, key :: STRING, value :: ANY) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The nodes to set a property on.',
            name: 'nodes',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The name of the property key to set.',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The value of the property to set.',
            name: 'value',
            type: 'ANY',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.create.setRelProperties': {
        name: 'apoc.create.setRelProperties',
        description: 'Sets the given properties on the `RELATIONSHIP` values.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.create.setRelProperties(rels :: ANY, keys :: LIST<STRING>, values :: LIST<ANY>) :: (rel :: RELATIONSHIP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The relationships to set properties on.',
            name: 'rels',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'The keys of the properties to set on the given relationships.',
            name: 'keys',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description:
              'The values of the properties to set on the given relationships.',
            name: 'values',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated relationship.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.create.setRelProperty': {
        name: 'apoc.create.setRelProperty',
        description: 'Sets the given property on the `RELATIONSHIP` values.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.create.setRelProperty(rels :: ANY, key :: STRING, value :: ANY) :: (rel :: RELATIONSHIP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The relationships to set a property on.',
            name: 'rels',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The name of the property key to set.',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The value of the property to set.',
            name: 'value',
            type: 'ANY',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated relationship.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.create.uuids': {
        name: 'apoc.create.uuids',
        description: 'Returns a stream of UUIDs.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.create.uuids(count :: INTEGER) :: (row :: INTEGER, uuid :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The number of UUID values to generate.',
            name: 'count',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The row number of the generated UUID.',
            name: 'row',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The generated UUID value.',
            name: 'uuid',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy:
          "Neo4j's randomUUID() function can be used as a replacement, for example: `UNWIND range(0,$count) AS row RETURN row, randomUUID() AS uuid`",
        option: {
          deprecated: true,
        },
      },
      'apoc.create.vNode': {
        name: 'apoc.create.vNode',
        description: 'Returns a virtual `NODE`.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.create.vNode(labels :: LIST<STRING>, props :: MAP) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The labels to assign to the new virtual node.',
            name: 'labels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The properties to assign to the new virtual node.',
            name: 'props',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The created virtual node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.create.vNodes': {
        name: 'apoc.create.vNodes',
        description: 'Returns virtual `NODE` values.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.create.vNodes(labels :: LIST<STRING>, props :: LIST<MAP>) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The labels to assign to the new virtual node.',
            name: 'labels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The properties to assign to the new virtual nodes.',
            name: 'props',
            type: 'LIST<MAP>',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The created virtual node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.create.vRelationship': {
        name: 'apoc.create.vRelationship',
        description: 'Returns a virtual `RELATIONSHIP`.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.create.vRelationship(from :: NODE, relType :: STRING, props :: MAP, to :: NODE) :: (rel :: RELATIONSHIP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node to connect the outgoing virtual relationship from.',
            name: 'from',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The type to assign to the new virtual relationship.',
            name: 'relType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The properties to assign to the new virtual relationship.',
            name: 'props',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              'The node to which the incoming virtual relationship will be connected.',
            name: 'to',
            type: 'NODE',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The created virtual relationship.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.create.virtualPath': {
        name: 'apoc.create.virtualPath',
        description: 'Returns a virtual `PATH`.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.create.virtualPath(labelsN :: LIST<STRING>, n :: MAP, arelType :: STRING, props :: MAP, labelsM :: LIST<STRING>, m :: MAP) :: (from :: NODE, rel :: RELATIONSHIP, to :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The labels to assign to the new virtual start node.',
            name: 'labelsN',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description:
              'The properties to assign to the new virtual start node.',
            name: 'n',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The type to assign to the new virtual relationship.',
            name: 'arelType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The properties to assign to the new virtual relationship.',
            name: 'props',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The labels to assign to the new virtual node.',
            name: 'labelsM',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The properties to assign to the new virtual node.',
            name: 'm',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The created virtual start node.',
            name: 'from',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The created virtual relationship.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description: 'The created virtual end node.',
            name: 'to',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.cypher.doIt': {
        name: 'apoc.cypher.doIt',
        description:
          'Runs a dynamically constructed statement with the given parameters. This procedure allows for both read and write statements.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.cypher.doIt(statement :: STRING, params :: MAP) :: (value :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The Cypher statement to run.',
            name: 'statement',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The parameters for the given Cypher statement.',
            name: 'params',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The result returned from the Cypher statement.',
            name: 'value',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.cypher.run': {
        name: 'apoc.cypher.run',
        description:
          'Runs a dynamically constructed read-only statement with the given parameters.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.cypher.run(statement :: STRING, params :: MAP) :: (value :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The Cypher statement to run.',
            name: 'statement',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The parameters for the given Cypher statement.',
            name: 'params',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The result returned from the Cypher statement.',
            name: 'value',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.cypher.runMany': {
        name: 'apoc.cypher.runMany',
        description:
          'Runs each semicolon separated statement and returns a summary of the statement outcomes.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.cypher.runMany(statement :: STRING, params :: MAP, config = {} :: MAP) :: (row :: INTEGER, result :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The Cypher statements to run, semicolon separated (;).',
            name: 'statement',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The parameters for the given Cypher statements.',
            name: 'params',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: '{ statistics = true :: BOOLEAN }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The row number of the run Cypher statement.',
            name: 'row',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The result returned from the Cypher statement.',
            name: 'result',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.cypher.runManyReadOnly': {
        name: 'apoc.cypher.runManyReadOnly',
        description:
          'Runs each semicolon separated read-only statement and returns a summary of the statement outcomes.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'apoc.cypher.runManyReadOnly(statement :: STRING, params :: MAP, config = {} :: MAP) :: (row :: INTEGER, result :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The Cypher statements to run, semicolon separated (;).',
            name: 'statement',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The parameters for the given Cypher statements.',
            name: 'params',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: '{ statistics = true :: BOOLEAN }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The row number of the run Cypher statement.',
            name: 'row',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The result returned from the Cypher statement.',
            name: 'result',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.cypher.runSchema': {
        name: 'apoc.cypher.runSchema',
        description:
          'Runs the given query schema statement with the given parameters.',
        mode: 'SCHEMA',
        worksOnSystem: false,
        signature:
          'apoc.cypher.runSchema(statement :: STRING, params :: MAP) :: (value :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The Cypher schema statement to run.',
            name: 'statement',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The parameters for the given Cypher statement.',
            name: 'params',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The result returned from the Cypher statement.',
            name: 'value',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.cypher.runTimeboxed': {
        name: 'apoc.cypher.runTimeboxed',
        description:
          'Terminates a Cypher statement if it has not finished before the set timeout (ms).',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.cypher.runTimeboxed(statement :: STRING, params :: MAP, timeout :: INTEGER) :: (value :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The Cypher statement to run.',
            name: 'statement',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The parameters for the given Cypher statement.',
            name: 'params',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The maximum time the statement can run for.',
            name: 'timeout',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The result returned from the Cypher statement.',
            name: 'value',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.cypher.runWrite': {
        name: 'apoc.cypher.runWrite',
        description: 'Alias for `apoc.cypher.doIt`.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.cypher.runWrite(statement :: STRING, params :: MAP) :: (value :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The Cypher statement to run.',
            name: 'statement',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The parameters for the given Cypher statement.',
            name: 'params',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The result returned from the Cypher statement.',
            name: 'value',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.do.case': {
        name: 'apoc.do.case',
        description:
          'For each pair of conditional queries in the given `LIST<ANY>`, this procedure will run the first query for which the conditional is evaluated to true.\nIf none of the conditionals are true, the `ELSE` query will run instead.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.do.case(conditionals :: LIST<ANY>, elseQuery =  :: STRING, params = {} :: MAP) :: (value :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A list of conditionals, where each conditional is a pair: the first element is a predicate, and the second is a Cypher query to be executed based on that predicate.',
            name: 'conditionals',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              'A Cypher query to evaluate if all conditionals evaluate to false.',
            name: 'elseQuery',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              'A map of parameters to be used in the executed Cypher query.',
            name: 'params',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The result returned from the evaluated Cypher query.',
            name: 'value',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.do.when': {
        name: 'apoc.do.when',
        description:
          'Runs the given read/write `ifQuery` if the conditional has evaluated to true, otherwise the `elseQuery` will run.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.do.when(condition :: BOOLEAN, ifQuery :: STRING, elseQuery :: STRING, params = {} :: MAP) :: (value :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The predicate that determines whether to execute the `ifQuery`.',
            name: 'condition',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description:
              'The Cypher statement to run if the condition is true.',
            name: 'ifQuery',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The Cypher statement to run if the condition is false.',
            name: 'elseQuery',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'The parameters for the given Cypher statement.',
            name: 'params',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The result returned from the evaluated Cypher query.',
            name: 'value',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.example.movies': {
        name: 'apoc.example.movies',
        description: 'Seeds the database with the Neo4j movie dataset.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.example.movies() :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file containing the movies example.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Where the examples were sourced from.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the movies file was in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of nodes imported.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of relationships imported.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of properties imported.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the import.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the import was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the import was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Whether the import ran successfully.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The data returned by the import.',
            name: 'data',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.export.arrow.all': {
        name: 'apoc.export.arrow.all',
        description: 'Exports the full database as an arrow file.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.arrow.all(file :: STRING, config = {} :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to export the data to.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: '{ batchSize = 2000 :: INTEGER }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to which the data was exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'A summary of the exported data.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the file is exported in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of exported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the export.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the export was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the export was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Whether the export ran successfully.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The data returned by the export.',
            name: 'data',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy: 'This procedure is being moved to APOC Extended.',
        option: {
          deprecated: true,
        },
      },
      'apoc.export.arrow.graph': {
        name: 'apoc.export.arrow.graph',
        description: 'Exports the given graph as an arrow file.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.arrow.graph(file :: STRING, graph :: ANY, config = {} :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to export the data to.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The graph to export.',
            name: 'graph',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: '{ batchSize = 2000 :: INTEGER }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to which the data was exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'A summary of the exported data.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the file is exported in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of exported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the export.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the export was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the export was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Whether the export ran successfully.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The data returned by the export.',
            name: 'data',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy: 'This procedure is being moved to APOC Extended.',
        option: {
          deprecated: true,
        },
      },
      'apoc.export.arrow.query': {
        name: 'apoc.export.arrow.query',
        description:
          'Exports the results from the given Cypher query as an arrow file.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.arrow.query(file :: STRING, query :: STRING, config = {} :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The name of the file to which the data will be exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The query to use to collect the data for export.',
            name: 'query',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: '{ batchSize = 2000 :: INTEGER }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to which the data was exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'A summary of the exported data.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the file is exported in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of exported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the export.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the export was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the export was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Whether the export ran successfully.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The data returned by the export.',
            name: 'data',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy: 'This procedure is being moved to APOC Extended.',
        option: {
          deprecated: true,
        },
      },
      'apoc.export.arrow.stream.all': {
        name: 'apoc.export.arrow.stream.all',
        description: 'Exports the full database as an arrow byte array.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.arrow.stream.all(config = {} :: MAP) :: (value :: BYTEARRAY)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: '{ batchSize = 2000 :: INTEGER }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The data as a bytearray.',
            name: 'value',
            type: 'BYTEARRAY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy: 'This procedure is being moved to APOC Extended.',
        option: {
          deprecated: true,
        },
      },
      'apoc.export.arrow.stream.graph': {
        name: 'apoc.export.arrow.stream.graph',
        description: 'Exports the given graph as an arrow byte array.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.arrow.stream.graph(graph :: ANY, config = {} :: MAP) :: (value :: BYTEARRAY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The graph to export.',
            name: 'graph',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: '{ batchSize = 2000 :: INTEGER }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The data as a bytearray.',
            name: 'value',
            type: 'BYTEARRAY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy: 'This procedure is being moved to APOC Extended.',
        option: {
          deprecated: true,
        },
      },
      'apoc.export.arrow.stream.query': {
        name: 'apoc.export.arrow.stream.query',
        description: 'Exports the given Cypher query as an arrow byte array.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.arrow.stream.query(query :: STRING, config = {} :: MAP) :: (value :: BYTEARRAY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The query used to collect the data for export.',
            name: 'query',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: '{ batchSize = 2000 :: INTEGER }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The data as a bytearray.',
            name: 'value',
            type: 'BYTEARRAY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy: 'This procedure is being moved to APOC Extended.',
        option: {
          deprecated: true,
        },
      },
      'apoc.export.csv.all': {
        name: 'apoc.export.csv.all',
        description: 'Exports the full database to the provided CSV file.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.csv.all(file :: STRING, config :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The name of the file to which the data will be exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        quotes = 'always' :: ['always', 'none', 'ifNeeded'],\n        differentiateNulls = false :: BOOLEAN,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to which the data was exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'A summary of the exported data.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the file is exported in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of exported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the export.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the export was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the export was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Whether the export ran successfully.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The data returned by the export.',
            name: 'data',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.export.csv.data': {
        name: 'apoc.export.csv.data',
        description:
          'Exports the given `NODE` and `RELATIONSHIP` values to the provided CSV file.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.csv.data(nodes :: LIST<NODE>, rels :: LIST<RELATIONSHIP>, file :: STRING, config :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A list of nodes to export.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            description: 'A list of relationships to export.',
            name: 'rels',
            type: 'LIST<RELATIONSHIP>',
          },
          {
            isDeprecated: false,
            description:
              'The name of the file to which the data will be exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        quotes = 'always' :: ['always', 'none', 'ifNeeded'],\n        differentiateNulls = false :: BOOLEAN,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to which the data was exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'A summary of the exported data.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the file is exported in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of exported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the export.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the export was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the export was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Whether the export ran successfully.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The data returned by the export.',
            name: 'data',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.export.csv.graph': {
        name: 'apoc.export.csv.graph',
        description: 'Exports the given graph to the provided CSV file.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.csv.graph(graph :: MAP, file :: STRING, config :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The graph to export.',
            name: 'graph',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              'The name of the file to which the data will be exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        quotes = 'always' :: ['always', 'none', 'ifNeeded'],\n        differentiateNulls = false :: BOOLEAN,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to which the data was exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'A summary of the exported data.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the file is exported in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of exported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the export.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the export was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the export was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Whether the export ran successfully.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The data returned by the export.',
            name: 'data',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.export.csv.query': {
        name: 'apoc.export.csv.query',
        description:
          'Exports the results from running the given Cypher query to the provided CSV file.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.csv.query(query :: STRING, file :: STRING, config :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The query used to collect the data for export.',
            name: 'query',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The name of the file to which the data will be exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None':: STRING,\n        charset = 'UTF_8' :: STRING,\n        quotes = 'always' :: ['always', 'none', 'ifNeeded'],\n        differentiateNulls = false :: BOOLEAN,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to which the data was exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'A summary of the exported data.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the file is exported in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of exported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the export.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the export was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the export was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Whether the export ran successfully.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The data returned by the export.',
            name: 'data',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.export.cypher.all': {
        name: 'apoc.export.cypher.all',
        description:
          'Exports the full database (incl. indexes) as Cypher statements to the provided file (default: Cypher Shell).',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.cypher.all(file =  :: STRING, config = {} :: MAP) :: (file :: STRING, batches :: INTEGER, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, cypherStatements :: ANY, nodeStatements :: ANY, relationshipStatements :: ANY, schemaStatements :: ANY, cleanupStatements :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              'The name of the file to which the data will be exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to which the data was exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the export was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'A summary of the exported data.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the file is exported in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of exported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the export.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the export was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The executed Cypher Statements.',
            name: 'cypherStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed node statements.',
            name: 'nodeStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed relationship statements.',
            name: 'relationshipStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed schema statements.',
            name: 'schemaStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed cleanup statements.',
            name: 'cleanupStatements',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.export.cypher.data': {
        name: 'apoc.export.cypher.data',
        description:
          'Exports the given `NODE` and `RELATIONSHIP` values (incl. indexes) as Cypher statements to the provided file (default: Cypher Shell).',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.cypher.data(nodes :: LIST<NODE>, rels :: LIST<RELATIONSHIP>, file =  :: STRING, config = {} :: MAP) :: (file :: STRING, batches :: INTEGER, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, cypherStatements :: ANY, nodeStatements :: ANY, relationshipStatements :: ANY, schemaStatements :: ANY, cleanupStatements :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A list of nodes to export.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            description: 'A list of relationships to export.',
            name: 'rels',
            type: 'LIST<RELATIONSHIP>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              'The name of the file to which the data will be exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to which the data was exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the export was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'A summary of the exported data.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the file is exported in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of exported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the export.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the export was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The executed Cypher Statements.',
            name: 'cypherStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed node statements.',
            name: 'nodeStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed relationship statements.',
            name: 'relationshipStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed schema statements.',
            name: 'schemaStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed cleanup statements.',
            name: 'cleanupStatements',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.export.cypher.graph': {
        name: 'apoc.export.cypher.graph',
        description:
          'Exports the given graph (incl. indexes) as Cypher statements to the provided file (default: Cypher Shell).',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.cypher.graph(graph :: MAP, file :: STRING, config = {} :: MAP) :: (file :: STRING, batches :: INTEGER, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, cypherStatements :: ANY, nodeStatements :: ANY, relationshipStatements :: ANY, schemaStatements :: ANY, cleanupStatements :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The graph to export.',
            name: 'graph',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              'The name of the file to which the data will be exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to which the data was exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the export was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'A summary of the exported data.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the file is exported in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of exported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the export.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the export was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The executed Cypher Statements.',
            name: 'cypherStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed node statements.',
            name: 'nodeStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed relationship statements.',
            name: 'relationshipStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed schema statements.',
            name: 'schemaStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed cleanup statements.',
            name: 'cleanupStatements',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.export.cypher.query': {
        name: 'apoc.export.cypher.query',
        description:
          'Exports the `NODE` and `RELATIONSHIP` values from the given Cypher query (incl. indexes) as Cypher statements to the provided file (default: Cypher Shell).',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.cypher.query(statement :: STRING, file =  :: STRING, config = {} :: MAP) :: (file :: STRING, batches :: INTEGER, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, cypherStatements :: ANY, nodeStatements :: ANY, relationshipStatements :: ANY, schemaStatements :: ANY, cleanupStatements :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The query used to collect the data for export.',
            name: 'statement',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              'The name of the file to which the data will be exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to which the data was exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the export was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'A summary of the exported data.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the file is exported in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of exported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the export.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the export was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The executed Cypher Statements.',
            name: 'cypherStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed node statements.',
            name: 'nodeStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed relationship statements.',
            name: 'relationshipStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed schema statements.',
            name: 'schemaStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed cleanup statements.',
            name: 'cleanupStatements',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.export.cypher.schema': {
        name: 'apoc.export.cypher.schema',
        description:
          'Exports all schema indexes and constraints to Cypher statements.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.cypher.schema(file =  :: STRING, config = {} :: MAP) :: (file :: STRING, batches :: INTEGER, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, cypherStatements :: ANY, nodeStatements :: ANY, relationshipStatements :: ANY, schemaStatements :: ANY, cleanupStatements :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              'The name of the file to which the data will be exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to which the data was exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the export was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'A summary of the exported data.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the file is exported in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of exported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the export.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the export was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The executed Cypher Statements.',
            name: 'cypherStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed node statements.',
            name: 'nodeStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed relationship statements.',
            name: 'relationshipStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed schema statements.',
            name: 'schemaStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed cleanup statements.',
            name: 'cleanupStatements',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.export.graphml.all': {
        name: 'apoc.export.graphml.all',
        description: 'Exports the full database to the provided GraphML file.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.graphml.all(file :: STRING, config :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The name of the file to which the data will be exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to which the data was exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'A summary of the exported data.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the file is exported in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of exported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the export.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the export was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the export was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Whether the export ran successfully.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The data returned by the export.',
            name: 'data',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.export.graphml.data': {
        name: 'apoc.export.graphml.data',
        description:
          'Exports the given `NODE` and `RELATIONSHIP` values to the provided GraphML file.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.graphml.data(nodes :: LIST<NODE>, rels :: LIST<RELATIONSHIP>, file :: STRING, config :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A list of nodes to export.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            description: 'A list of relationships to export.',
            name: 'rels',
            type: 'LIST<RELATIONSHIP>',
          },
          {
            isDeprecated: false,
            description:
              'The name of the file to which the data will be exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to which the data was exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'A summary of the exported data.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the file is exported in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of exported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the export.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the export was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the export was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Whether the export ran successfully.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The data returned by the export.',
            name: 'data',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.export.graphml.graph': {
        name: 'apoc.export.graphml.graph',
        description: 'Exports the given graph to the provided GraphML file.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.graphml.graph(graph :: MAP, file :: STRING, config :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The graph to export.',
            name: 'graph',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              'The name of the file to which the data will be exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to which the data was exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'A summary of the exported data.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the file is exported in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of exported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the export.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the export was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the export was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Whether the export ran successfully.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The data returned by the export.',
            name: 'data',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.export.graphml.query': {
        name: 'apoc.export.graphml.query',
        description:
          'Exports the given `NODE` and `RELATIONSHIP` values from the Cypher statement to the provided GraphML file.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.graphml.query(statement :: STRING, file :: STRING, config :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The query used to collect the data for export.',
            name: 'statement',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The name of the file to which the data will be exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to which the data was exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'A summary of the exported data.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the file is exported in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of exported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the export.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the export was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the export was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Whether the export ran successfully.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The data returned by the export.',
            name: 'data',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.export.json.all': {
        name: 'apoc.export.json.all',
        description: 'Exports the full database to the provided JSON file.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.json.all(file :: STRING, config = {} :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The name of the file to which the data will be exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to which the data was exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'A summary of the exported data.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the file is exported in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of exported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the export.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the export was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the export was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Whether the export ran successfully.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The data returned by the export.',
            name: 'data',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.export.json.data': {
        name: 'apoc.export.json.data',
        description:
          'Exports the given `NODE` and `RELATIONSHIP` values to the provided JSON file.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.json.data(nodes :: LIST<NODE>, rels :: LIST<RELATIONSHIP>, file :: STRING, config = {} :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A list of nodes to export.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            description: 'A list of relationships to export.',
            name: 'rels',
            type: 'LIST<RELATIONSHIP>',
          },
          {
            isDeprecated: false,
            description:
              'The name of the file to which the data will be exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to which the data was exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'A summary of the exported data.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the file is exported in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of exported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the export.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the export was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the export was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Whether the export ran successfully.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The data returned by the export.',
            name: 'data',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.export.json.graph': {
        name: 'apoc.export.json.graph',
        description: 'Exports the given graph to the provided JSON file.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.json.graph(graph :: MAP, file :: STRING, config = {} :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The graph to export.',
            name: 'graph',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              'The name of the file to which the data will be exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to which the data was exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'A summary of the exported data.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the file is exported in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of exported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the export.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the export was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the export was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Whether the export ran successfully.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The data returned by the export.',
            name: 'data',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.export.json.query': {
        name: 'apoc.export.json.query',
        description:
          'Exports the results from the Cypher statement to the provided JSON file.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.json.query(statement :: STRING, file :: STRING, config = {} :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The query used to collect the data for export.',
            name: 'statement',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The name of the file to which the data will be exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to which the data was exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'A summary of the exported data.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the file is exported in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of exported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the export.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the export was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the export was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Whether the export ran successfully.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The data returned by the export.',
            name: 'data',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.graph.from': {
        name: 'apoc.graph.from',
        description:
          'Generates a virtual sub-graph by extracting all of the `NODE` and `RELATIONSHIP` values from the given data.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.graph.from(data :: ANY, name :: STRING, props :: MAP) :: (graph :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'An object to extract nodes and relationships from. It can be of type; NODE | RELATIONSHIP | PATH | LIST<ANY>.',
            name: 'data',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The name of the resulting graph.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The properties to be present in the resulting graph.',
            name: 'props',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The resulting graph.',
            name: 'graph',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.graph.fromCypher': {
        name: 'apoc.graph.fromCypher',
        description:
          'Generates a virtual sub-graph by extracting all of the `NODE` and `RELATIONSHIP` values from the data returned by the given Cypher statement.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.graph.fromCypher(statement :: STRING, params :: MAP, name :: STRING, props :: MAP) :: (graph :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The Cypher statement to create the graph from.',
            name: 'statement',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The parameters for the given Cypher statement.',
            name: 'params',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The name of the resulting graph.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The properties to include in the resulting graph.',
            name: 'props',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The resulting graph.',
            name: 'graph',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.graph.fromDB': {
        name: 'apoc.graph.fromDB',
        description:
          'Generates a virtual sub-graph by extracting all of the `NODE` and `RELATIONSHIP` values from the data returned by the given database.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.graph.fromDB(name :: STRING, props :: MAP) :: (graph :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the resulting graph.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The properties to be present in the resulting graph.',
            name: 'props',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The resulting graph.',
            name: 'graph',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.graph.fromData': {
        name: 'apoc.graph.fromData',
        description:
          'Generates a virtual sub-graph by extracting all of the `NODE` and `RELATIONSHIP` values from the given data.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.graph.fromData(nodes :: LIST<NODE>, rels :: LIST<RELATIONSHIP>, name :: STRING, props :: MAP) :: (graph :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The nodes to include in the resulting graph.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            description: 'The relationship to include in the resulting graph.',
            name: 'rels',
            type: 'LIST<RELATIONSHIP>',
          },
          {
            isDeprecated: false,
            description: 'The name of the resulting graph.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The properties to include in the resulting graph.',
            name: 'props',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The resulting graph.',
            name: 'graph',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.graph.fromDocument': {
        name: 'apoc.graph.fromDocument',
        description:
          'Generates a virtual sub-graph by extracting all of the `NODE` and `RELATIONSHIP` values from the data returned by the given JSON file.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.graph.fromDocument(json :: ANY, config = {} :: MAP) :: (graph :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A JSON object to generate a graph from.',
            name: 'json',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              "{\n        write = false :: BOOLEAN,\n        labelField = 'type' :: STRING.\n        idField = 'id' :: STRING,\n        generateID = true :: BOOLEAN,\n        defaultLabel = '' :: STRING,\n        skipValidation = false :: BOOLEAN,\n        mappings = {} :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The resulting graph.',
            name: 'graph',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.graph.fromPath': {
        name: 'apoc.graph.fromPath',
        description:
          'Generates a virtual sub-graph by extracting all of the `NODE` and `RELATIONSHIP` values from the data returned by the given `PATH`.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.graph.fromPath(path :: PATH, name :: STRING, props :: MAP) :: (graph :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A path to extract the nodes and relationships from.',
            name: 'path',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            description: 'The name to give the resulting graph.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The properties to include in the resulting graph.',
            name: 'props',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The resulting graph.',
            name: 'graph',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.graph.fromPaths': {
        name: 'apoc.graph.fromPaths',
        description:
          'Generates a virtual sub-graph by extracting all of the `NODE` and `RELATIONSHIP` values from the data returned by the given `PATH` values.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.graph.fromPaths(paths :: LIST<PATH>, name :: STRING, props :: MAP) :: (graph :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A list of paths to extract nodes and relationships from.',
            name: 'paths',
            type: 'LIST<PATH>',
          },
          {
            isDeprecated: false,
            description: 'The name of the resulting graph.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The properties to include in the resulting graph.',
            name: 'props',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The resulting graph.',
            name: 'graph',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.graph.validateDocument': {
        name: 'apoc.graph.validateDocument',
        description:
          'Validates the JSON file and returns the result of the validation.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'apoc.graph.validateDocument(json :: ANY, config = {} :: MAP) :: (row :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The JSON object to validate.',
            name: 'json',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              "{\n        write = false :: BOOLEAN,\n        labelField = 'type' :: STRING.\n        idField = 'id' :: STRING,\n        generateID = true :: BOOLEAN,\n        defaultLabel = '' :: STRING,\n        skipValidation = false :: BOOLEAN,\n        mappings = {} :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The result of the validation.',
            name: 'row',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.help': {
        name: 'apoc.help',
        description:
          'Returns descriptions of the available APOC procedures and functions. If a keyword is provided, it will return only those procedures and functions that have the keyword in their name.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.help(proc :: STRING) :: (type :: STRING, name :: STRING, text :: STRING, signature :: STRING, roles :: LIST<STRING>, writes :: BOOLEAN, core :: BOOLEAN, isDeprecated :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A keyword to filter the results by.',
            name: 'proc',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'Whether it is a function or a procedure.',
            name: 'type',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the function or procedure.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The description of the function or procedure.',
            name: 'text',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The signature of the function or procedure.',
            name: 'signature',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'This value is always null.',
            name: 'roles',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'This value is always null.',
            name: 'writes',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'If the function or procedure belongs to APOC Core.',
            name: 'core',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'If the function or procedure is deprecated.',
            name: 'isDeprecated',
            type: 'BOOLEAN',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.import.csv': {
        name: 'apoc.import.csv',
        description:
          'Imports `NODE` and `RELATIONSHIP` values with the given labels and types from the provided CSV file.',
        mode: 'SCHEMA',
        worksOnSystem: false,
        signature:
          'apoc.import.csv(nodes :: LIST<MAP>, rels :: LIST<MAP>, config :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'List of map values of where to import the node values from; { fileName :: STRING, data :: BYTEARRAY, labels :: LIST<STRING> }.',
            name: 'nodes',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description:
              'List of map values specifying where to import relationship values from: { fileName :: STRING, data :: BYTEARRAY, type :: STRING }.',
            name: 'rels',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description:
              '{\n    delimiter = "," :: STRING,\n    arrayDelimiter = ";" :: STRING,\n    ignoreDuplicateNodes = false :: BOOLEAN,\n    quotationCharacter = """ :: STRING,\n    stringIds = true :: BOOLEAN,\n    skipLines = 1 :: INTEGER,\n    ignoreBlankString = false :: BOOLEAN,\n    ignoreEmptyCellArray = false :: BOOLEAN,\n    compression = "NONE" :: ["NONE", "BYTES", "GZIP", "BZIP2", "DEFLATE", "BLOCK_LZ4", "FRAMED_SNAPPY"],\n    charset = "UTF-8" :: STRING,\n    batchSize = 2000 :: INTEGER\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'The name of the file from which the data was imported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The source of the imported data: "file", "binary" or "file/binary".',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format of the file: ["csv", "graphml", "json"].',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of imported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of imported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of imported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the import.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the import was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the import was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Whether the import ran successfully.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The data returned by the import.',
            name: 'data',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.import.graphml': {
        name: 'apoc.import.graphml',
        description: 'Imports a graph from the provided GraphML file.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.import.graphml(urlOrBinaryFile :: ANY, config :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The name of the file or binary data to import the data from.',
            name: 'urlOrBinaryFile',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              '{\n    readLabels = false :: BOOLEAN,\n    defaultRelationshipType = "RELATED" :: STRING,\n    storeNodeIds = false :: BOOLEAN,\n    batchSize = 20000 :: INTEGER,\n    compression = "NONE" :: ["NONE", "BYTES", "GZIP", "BZIP2", "DEFLATE", "BLOCK_LZ4", "FRAMED_SNAPPY"],\n    source = {} :: MAP,\n    target = {} :: MAP\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'The name of the file from which the data was imported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The source of the imported data: "file", "binary" or "file/binary".',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format of the file: ["csv", "graphml", "json"].',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of imported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of imported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of imported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the import.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the import was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the import was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Whether the import ran successfully.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The data returned by the import.',
            name: 'data',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.import.json': {
        name: 'apoc.import.json',
        description: 'Imports a graph from the provided JSON file.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.import.json(urlOrBinaryFile :: ANY, config = {} :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The name of the file or binary data to import the data from.',
            name: 'urlOrBinaryFile',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    unwindBatchSize = 5000 :: INTEGER,\n    txBatchSize = 5000 :: INTEGER,\n    importIdName = "neo4jImportId" :: STRING,\n    nodePropertyMappings = {} :: MAP,\n    relPropertyMappings = {} :: MAP,\n    compression = "NONE" :: ["NONE", "BYTES", "GZIP", "BZIP2", "DEFLATE", "BLOCK_LZ4", "FRAMED_SNAPPY"],\n    cleanup = false :: BOOLEAN,\n    nodePropFilter = {} :: MAP,\n    relPropFilter = {} :: MAP\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'The name of the file from which the data was imported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The source of the imported data: "file", "binary" or "file/binary".',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format of the file: ["csv", "graphml", "json"].',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of imported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of imported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of imported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the import.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the import was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the import was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Whether the import ran successfully.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The data returned by the import.',
            name: 'data',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.import.xml': {
        name: 'apoc.import.xml',
        description: 'Imports a graph from the provided XML file.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.import.xml(urlOrBinary :: ANY, config = {} :: MAP) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The name of the file or binary data to import the data from.',
            name: 'urlOrBinary',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    connectCharacters = false :: BOOLEAN,\n    filterLeadingWhitespace = false :: BOOLEAN,\n    delimiter = " " :: STRING,\n    label :: STRING,\n    relType :: STRING,\n    charactersForTag :: MAP\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'An imported node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.load.arrow': {
        name: 'apoc.load.arrow',
        description:
          'Imports `NODE` and `RELATIONSHIP` values from the provided arrow file.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.load.arrow(file :: STRING, config = {} :: MAP) :: (value :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to import data from.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'This value is never used.',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A map of data loaded from the given file.',
            name: 'value',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy: 'This procedure is being moved to APOC Extended.',
        option: {
          deprecated: true,
        },
      },
      'apoc.load.arrow.stream': {
        name: 'apoc.load.arrow.stream',
        description:
          'Imports `NODE` and `RELATIONSHIP` values from the provided arrow byte array.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.load.arrow.stream(source :: BYTEARRAY, config = {} :: MAP) :: (value :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The data to load.',
            name: 'source',
            type: 'BYTEARRAY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'This value is never used.',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A map of data loaded from the given file.',
            name: 'value',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy: 'This procedure is being moved to APOC Extended.',
        option: {
          deprecated: true,
        },
      },
      'apoc.load.json': {
        name: 'apoc.load.json',
        description:
          'Imports JSON file as a stream of values if the given JSON file is a `LIST<ANY>`.\nIf the given JSON file is a `MAP`, this procedure imports a single value instead.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.load.json(urlOrKeyOrBinary :: ANY, path =  :: STRING, config = {} :: MAP) :: (value :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The name of the file or binary data to import the data from.',
            name: 'urlOrKeyOrBinary',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              'A JSON path expression used to extract a certain part from the list.',
            name: 'path',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    failOnError = true :: BOOLEAN,\n    pathOptions :: LIST<STRING>,\n    compression = "NONE" :: ["NONE", "BYTES", "GZIP", "BZIP2", "DEFLATE", "BLOCK_LZ4", "FRAMED_SNAPPY"]\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A map of data loaded from the given file.',
            name: 'value',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.load.jsonArray': {
        name: 'apoc.load.jsonArray',
        description:
          'Loads array from a JSON URL (e.g. web-API) to then import the given JSON file as a stream of values.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.load.jsonArray(url :: STRING, path =  :: STRING, config = {} :: MAP) :: (value :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The path to the JSON file.',
            name: 'url',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              'A JSON path expression used to extract a certain part from the list.',
            name: 'path',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    failOnError = true :: BOOLEAN,\n    pathOptions :: LIST<STRING>,\n    compression = "NONE" :: ["NONE", "BYTES", "GZIP", "BZIP2"", "DEFLATE", "BLOCK_LZ4", "FRAMED_SNAPPY"]\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'Data loaded from the given file.',
            name: 'value',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.load.jsonParams': {
        name: 'apoc.load.jsonParams',
        description:
          'Loads parameters from a JSON URL (e.g. web-API) as a stream of values if the given JSON file is a `LIST<ANY>`.\nIf the given JSON file is a `MAP`, this procedure imports a single value instead.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.load.jsonParams(urlOrKeyOrBinary :: ANY, headers :: MAP, payload :: STRING, path =  :: STRING, config = {} :: MAP) :: (value :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The name of the file or binary data to import the data from.',
            name: 'urlOrKeyOrBinary',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'Headers to be used when connecting to the given URL.',
            name: 'headers',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              'The payload to send when connecting to the given URL.',
            name: 'payload',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              'A JSON path expression used to extract a certain part from the list.',
            name: 'path',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    failOnError = true :: BOOLEAN,\n    pathOptions :: LIST<STRING>,\n    compression = ""NONE"" :: [""NONE"", ""BYTES"", ""GZIP"", ""BZIP2"", ""DEFLATE"", ""BLOCK_LZ4"", ""FRAMED_SNAPPY”]\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A map of data loaded from the given file.',
            name: 'value',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy: 'This procedure is being moved to APOC Extended.',
        option: {
          deprecated: true,
        },
      },
      'apoc.load.xml': {
        name: 'apoc.load.xml',
        description:
          'Loads a single nested `MAP` from an XML URL (e.g. web-API).',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.load.xml(urlOrBinary :: ANY, path = / :: STRING, config = {} :: MAP, simple = false :: BOOLEAN) :: (value :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The name of the file or binary data to import the data from.',
            name: 'urlOrBinary',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=/, type=STRING}',
            description:
              'An xPath expression to select nodes from the given XML document.',
            name: 'path',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    failOnError = true :: BOOLEAN,\n    headers = {} :: MAP,\n    compression = "NONE" :: ["NONE", "BYTES", "GZIP", "BZIP2", "DEFLATE", "BLOCK_LZ4", "FRAMED_SNAPPY"]\n}\n',
            name: 'config',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=false, type=BOOLEAN}',
            description:
              'Whether or not to parse the given XML in simple mode.',
            name: 'simple',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A map of data loaded from the given file.',
            name: 'value',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.lock.all': {
        name: 'apoc.lock.all',
        description:
          'Acquires a write lock on the given `NODE` and `RELATIONSHIP` values.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.lock.all(nodes :: LIST<NODE>, rels :: LIST<RELATIONSHIP>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list of nodes to acquire a write lock on.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            description:
              'The list of relationships to acquire a write lock on.',
            name: 'rels',
            type: 'LIST<RELATIONSHIP>',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.lock.nodes': {
        name: 'apoc.lock.nodes',
        description: 'Acquires a write lock on the given `NODE` values.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature: 'apoc.lock.nodes(nodes :: LIST<NODE>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list of nodes to acquire a write lock on.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.lock.read.nodes': {
        name: 'apoc.lock.read.nodes',
        description: 'Acquires a read lock on the given `NODE` values.',
        mode: 'READ',
        worksOnSystem: false,
        signature: 'apoc.lock.read.nodes(nodes :: LIST<NODE>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list of nodes to acquire a read lock on.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.lock.read.rels': {
        name: 'apoc.lock.read.rels',
        description: 'Acquires a read lock on the given `RELATIONSHIP` values.',
        mode: 'READ',
        worksOnSystem: false,
        signature: 'apoc.lock.read.rels(rels :: LIST<RELATIONSHIP>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list of relationships to acquire a read lock on.',
            name: 'rels',
            type: 'LIST<RELATIONSHIP>',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.lock.rels': {
        name: 'apoc.lock.rels',
        description:
          'Acquires a write lock on the given `RELATIONSHIP` values.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature: 'apoc.lock.rels(rels :: LIST<RELATIONSHIP>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list of relationships to acquire a write lock on.',
            name: 'rels',
            type: 'LIST<RELATIONSHIP>',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.log.stream': {
        name: 'apoc.log.stream',
        description:
          'Returns the file contents from the given log, optionally returning only the last n lines.\nThis procedure requires users to have an admin role.',
        mode: 'DBMS',
        worksOnSystem: false,
        signature:
          'apoc.log.stream(path :: STRING, config = {} :: MAP) :: (lineNo :: INTEGER, line :: STRING, path :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the log file to read.',
            name: 'path',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: '{ last :: INTEGER }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The line number.',
            name: 'lineNo',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The content of the line.',
            name: 'line',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The path to the log file.',
            name: 'path',
            type: 'STRING',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy: 'This procedure is being moved to APOC Extended.',
        option: {
          deprecated: true,
        },
      },
      'apoc.math.regr': {
        name: 'apoc.math.regr',
        description:
          'Returns the coefficient of determination (R-squared) for the values of propertyY and propertyX in the given label.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'apoc.math.regr(label :: STRING, propertyY :: STRING, propertyX :: STRING) :: (r2 :: FLOAT, avgX :: FLOAT, avgY :: FLOAT, slope :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The label of the nodes to perform the regression on.',
            name: 'label',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the y property.',
            name: 'propertyY',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the x property.',
            name: 'propertyX',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The coefficient of determination.',
            name: 'r2',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'The average of the x values.',
            name: 'avgX',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'The average of the y values.',
            name: 'avgY',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'The calculated slope.',
            name: 'slope',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.merge.node': {
        name: 'apoc.merge.node',
        description:
          'Merges the given `NODE` values with the given dynamic labels.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.merge.node(labels :: LIST<STRING>, identProps :: MAP, onCreateProps = {} :: MAP, onMatchProps = {} :: MAP) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list of labels used for the generated MERGE statement.',
            name: 'labels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'Properties on the node that are always merged.',
            name: 'identProps',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'Properties that are merged when a node is created.',
            name: 'onCreateProps',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'Properties that are merged when a node is matched.',
            name: 'onMatchProps',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.merge.node.eager': {
        name: 'apoc.merge.node.eager',
        description:
          'Merges the given `NODE` values with the given dynamic labels eagerly.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.merge.node.eager(labels :: LIST<STRING>, identProps :: MAP, onCreateProps = {} :: MAP, onMatchProps = {} :: MAP) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list of labels used for the generated MERGE statement.',
            name: 'labels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'Properties on the node that are always merged.',
            name: 'identProps',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'Properties that are merged when a node is created.',
            name: 'onCreateProps',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'Properties that are merged when a node is matched.',
            name: 'onMatchProps',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.merge.nodeWithStats': {
        name: 'apoc.merge.nodeWithStats',
        description:
          'Merges the given `NODE` values with the given dynamic labels. Provides queryStatistics in the result.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.merge.nodeWithStats(labels :: LIST<STRING>, identProps :: MAP, onCreateProps = {} :: MAP, onMatchProps = {} :: MAP) :: (stats :: MAP, node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list of labels used for the generated MERGE statement.',
            name: 'labels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'Properties on the node that are always merged.',
            name: 'identProps',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'Properties that are merged when a node is created.',
            name: 'onCreateProps',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'Properties that are merged when a node is matched.',
            name: 'onMatchProps',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The returned query statistics.',
            name: 'stats',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The updated node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.merge.nodeWithStats.eager': {
        name: 'apoc.merge.nodeWithStats.eager',
        description:
          'Merges the given `NODE` values with the given dynamic labels eagerly. Provides queryStatistics in the result.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.merge.nodeWithStats.eager(labels :: LIST<STRING>, identProps :: MAP, onCreateProps = {} :: MAP, onMatchProps = {} :: MAP) :: (stats :: MAP, node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list of labels used for the generated MERGE statement.',
            name: 'labels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'Properties on the node that are always merged.',
            name: 'identProps',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'Properties that are merged when a node is created.',
            name: 'onCreateProps',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'Properties that are merged when a node is matched.',
            name: 'onMatchProps',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The returned query statistics.',
            name: 'stats',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The updated node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.merge.relationship': {
        name: 'apoc.merge.relationship',
        description:
          'Merges the given `RELATIONSHIP` values with the given dynamic types/properties.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.merge.relationship(startNode :: NODE, relType :: STRING, identProps :: MAP, onCreateProps :: MAP, endNode :: NODE, onMatchProps = {} :: MAP) :: (rel :: RELATIONSHIP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The start node of the relationship.',
            name: 'startNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The type of the relationship.',
            name: 'relType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'Properties on the relationship that are always merged.',
            name: 'identProps',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              'Properties that are merged when a relationship is created.',
            name: 'onCreateProps',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The end node of the relationship.',
            name: 'endNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              'Properties that are merged when a relationship is matched.',
            name: 'onMatchProps',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated relationship.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.merge.relationship.eager': {
        name: 'apoc.merge.relationship.eager',
        description:
          'Merges the given `RELATIONSHIP` values with the given dynamic types/properties eagerly.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.merge.relationship.eager(startNode :: NODE, relType :: STRING, identProps :: MAP, onCreateProps :: MAP, endNode :: NODE, onMatchProps = {} :: MAP) :: (rel :: RELATIONSHIP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The start node of the relationship.',
            name: 'startNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The type of the relationship.',
            name: 'relType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'Properties on the relationship that are always merged.',
            name: 'identProps',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              'Properties that are merged when a relationship is created.',
            name: 'onCreateProps',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The end node of the relationship.',
            name: 'endNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              'Properties that are merged when a relationship is matched.',
            name: 'onMatchProps',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated relationship.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.merge.relationshipWithStats': {
        name: 'apoc.merge.relationshipWithStats',
        description:
          'Merges the given `RELATIONSHIP` values with the given dynamic types/properties. Provides queryStatistics in the result.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.merge.relationshipWithStats(startNode :: NODE, relType :: STRING, identProps :: MAP, onCreateProps :: MAP, endNode :: NODE, onMatchProps = {} :: MAP) :: (stats :: MAP, rel :: RELATIONSHIP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The start node of the relationship.',
            name: 'startNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The type of the relationship.',
            name: 'relType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'Properties on the relationship that are always merged.',
            name: 'identProps',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              'Properties that are merged when a relationship is created.',
            name: 'onCreateProps',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The end node of the relationship.',
            name: 'endNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              'Properties that are merged when a relationship is matched.',
            name: 'onMatchProps',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The returned query statistics.',
            name: 'stats',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The updated relationship.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.merge.relationshipWithStats.eager': {
        name: 'apoc.merge.relationshipWithStats.eager',
        description:
          'Merges the given `RELATIONSHIP` values with the given dynamic types/properties eagerly. Provides queryStatistics in the result.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.merge.relationshipWithStats.eager(startNode :: NODE, relType :: STRING, identProps :: MAP, onCreateProps :: MAP, endNode :: NODE, onMatchProps = {} :: MAP) :: (stats :: MAP, rel :: RELATIONSHIP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The start node of the relationship.',
            name: 'startNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The type of the relationship.',
            name: 'relType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'Properties on the relationship that are always merged.',
            name: 'identProps',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              'Properties that are merged when a relationship is created.',
            name: 'onCreateProps',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The end node of the relationship.',
            name: 'endNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              'Properties that are merged when a relationship is matched.',
            name: 'onMatchProps',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The returned query statistics.',
            name: 'stats',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The updated relationship.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.meta.data': {
        name: 'apoc.meta.data',
        description: 'Examines the full graph and returns a table of metadata.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.meta.data(config = {} :: MAP) :: (label :: STRING, property :: STRING, count :: INTEGER, unique :: BOOLEAN, index :: BOOLEAN, existence :: BOOLEAN, type :: STRING, array :: BOOLEAN, sample :: LIST<ANY>, left :: INTEGER, right :: INTEGER, other :: LIST<STRING>, otherLabels :: LIST<STRING>, elementType :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              'Number of nodes to sample, setting sample to `-1` will remove sampling; { sample = 1000 :: INTEGER }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The label or type name.',
            name: 'label',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The property name.',
            name: 'property',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The count of seen values.',
            name: 'count',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'If all seen values are unique.',
            name: 'unique',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'If an index exists for this property.',
            name: 'index',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'If an existence constraint exists for this property.',
            name: 'existence',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The type represented by this row.',
            name: 'type',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'Indicates whether the property is an array. If the type column is "RELATIONSHIP," this will be true if there is at least one node with two outgoing relationships of the type specified by the label or property column.',
            name: 'array',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'This is always null.',
            name: 'sample',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description:
              'The ratio (rounded down) of the count of outgoing relationships for a specific label and relationship type relative to the total count of those patterns.',
            name: 'left',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'The ratio (rounded down) of the count of incoming relationships for a specific label and relationship type relative to the total count of those patterns.',
            name: 'right',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The labels of connect nodes.',
            name: 'other',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description:
              'For uniqueness constraints, this field shows other labels present on nodes that also contain the uniqueness constraint.',
            name: 'otherLabels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'Whether this refers to a node or a relationship.',
            name: 'elementType',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.meta.data.of': {
        name: 'apoc.meta.data.of',
        description:
          'Examines the given sub-graph and returns a table of metadata.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.meta.data.of(graph :: ANY, config = {} :: MAP) :: (label :: STRING, property :: STRING, count :: INTEGER, unique :: BOOLEAN, index :: BOOLEAN, existence :: BOOLEAN, type :: STRING, array :: BOOLEAN, sample :: LIST<ANY>, left :: INTEGER, right :: INTEGER, other :: LIST<STRING>, otherLabels :: LIST<STRING>, elementType :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The graph to extract metadata from.',
            name: 'graph',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              'Number of nodes to sample, setting sample to `-1` will remove sampling; { sample = 1000 :: INTEGER }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The label or type name.',
            name: 'label',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The property name.',
            name: 'property',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The count of seen values.',
            name: 'count',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'If all seen values are unique.',
            name: 'unique',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'If an index exists for this property.',
            name: 'index',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'If an existence constraint exists for this property.',
            name: 'existence',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The type represented by this row.',
            name: 'type',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'Indicates whether the property is an array. If the type column is "RELATIONSHIP," this will be true if there is at least one node with two outgoing relationships of the type specified by the label or property column.',
            name: 'array',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'This is always null.',
            name: 'sample',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description:
              'The ratio (rounded down) of the count of outgoing relationships for a specific label and relationship type relative to the total count of those patterns.',
            name: 'left',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'The ratio (rounded down) of the count of incoming relationships for a specific label and relationship type relative to the total count of those patterns.',
            name: 'right',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The labels of connect nodes.',
            name: 'other',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description:
              'For uniqueness constraints, this field shows other labels present on nodes that also contain the uniqueness constraint.',
            name: 'otherLabels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'Whether this refers to a node or a relationship.',
            name: 'elementType',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.meta.graph': {
        name: 'apoc.meta.graph',
        description: 'Examines the full graph and returns a meta-graph.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.meta.graph(config = {} :: MAP) :: (nodes :: LIST<NODE>, relationships :: LIST<RELATIONSHIP>)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              'The number of nodes whose relationships are checked to remove false positives and the number of relationships to read per sampled node. A value of -1 will read all; { sample = 1 :: INTEGER, maxRels = -1 :: INTEGER }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'Nodes representing the meta data.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            description: 'Relationships representing the meta data.',
            name: 'relationships',
            type: 'LIST<RELATIONSHIP>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.meta.graph.of': {
        name: 'apoc.meta.graph.of',
        description: 'Examines the given sub-graph and returns a meta-graph.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.meta.graph.of(graph = {} :: ANY, config = {} :: MAP) :: (nodes :: LIST<NODE>, relationships :: LIST<RELATIONSHIP>)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=ANY}',
            description: 'The graph to extract metadata from.',
            name: 'graph',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              'The number of nodes whose relationships are checked to remove false positives and the number of relationships to read per sampled node. A value of -1 will read all; { sample = 1 :: INTEGER, maxRels = -1 :: INTEGER, addRelationshipsBetweenNodes = true :: BOOLEAN }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'Nodes representing the meta data.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            description: 'Relationships representing the meta data.',
            name: 'relationships',
            type: 'LIST<RELATIONSHIP>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.meta.graphSample': {
        name: 'apoc.meta.graphSample',
        description:
          'Examines the full graph and returns a meta-graph.\nUnlike `apoc.meta.graph`, this procedure does not filter away non-existing paths.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.meta.graphSample(config = {} :: MAP) :: (nodes :: LIST<NODE>, relationships :: LIST<RELATIONSHIP>)',
        argumentDescription: [
          {
            isDeprecated: true,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'Empty map (deprecated).',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'Nodes representing the meta data.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            description: 'Relationships representing the meta data.',
            name: 'relationships',
            type: 'LIST<RELATIONSHIP>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.meta.nodeTypeProperties': {
        name: 'apoc.meta.nodeTypeProperties',
        description:
          'Examines the full graph and returns a table of metadata with information about the `NODE` values therein.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.meta.nodeTypeProperties(config = {} :: MAP) :: (nodeType :: STRING, nodeLabels :: LIST<STRING>, propertyName :: STRING, propertyTypes :: LIST<STRING>, mandatory :: BOOLEAN, propertyObservations :: INTEGER, totalObservations :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n        includeLabels = [] :: LIST<STRING>,\n        includeRels = [] :: LIST<STRING>,\n        excludeLabels = [] :: LIST<STRING>,\n        excludeRels = [] :: LIST<STRING>,\n        sample = 1000 :: INTEGER,\n        maxRels = 100 :: INTEGER\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The type of the node.',
            name: 'nodeType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The labels on the node.',
            name: 'nodeLabels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The name of the property.',
            name: 'propertyName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The types this property has.',
            name: 'propertyTypes',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description:
              'Whether or not this property exists on all nodes of the given type.',
            name: 'mandatory',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The number of times this property was observed.',
            name: 'propertyObservations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of times the label was seen.',
            name: 'totalObservations',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.meta.relTypeProperties': {
        name: 'apoc.meta.relTypeProperties',
        description:
          'Examines the full graph and returns a table of metadata with information about the `RELATIONSHIP` values therein.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.meta.relTypeProperties(config = {} :: MAP) :: (relType :: STRING, sourceNodeLabels :: LIST<STRING>, targetNodeLabels :: LIST<STRING>, propertyName :: STRING, propertyTypes :: LIST<STRING>, mandatory :: BOOLEAN, propertyObservations :: INTEGER, totalObservations :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n        includeLabels = [] :: LIST<STRING>,\n        includeRels = [] :: LIST<STRING>,\n        excludeLabels = [] :: LIST<STRING>,\n        excludeRels = [] :: LIST<STRING>,\n        sample = 1000 :: INTEGER,\n        maxRels = 100 :: INTEGER\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The type of the relationship.',
            name: 'relType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The labels belonging to the start node.',
            name: 'sourceNodeLabels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The labels belonging to the end node.',
            name: 'targetNodeLabels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The name of the property.',
            name: 'propertyName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The types this property has.',
            name: 'propertyTypes',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description:
              'Whether or not this property exists on all nodes of the given type.',
            name: 'mandatory',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The number of times this property was observed.',
            name: 'propertyObservations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of times the label was seen.',
            name: 'totalObservations',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.meta.schema': {
        name: 'apoc.meta.schema',
        description:
          'Examines the given sub-graph and returns metadata as a `MAP`.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature: 'apoc.meta.schema(config = {} :: MAP) :: (value :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              'Number of nodes to sample, setting sample to `-1` will remove sampling; { sample = 1000 :: INTEGER }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'Meta information represented as a map.',
            name: 'value',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.meta.stats': {
        name: 'apoc.meta.stats',
        description:
          'Returns the metadata stored in the transactional database statistics.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.meta.stats() :: (labelCount :: INTEGER, relTypeCount :: INTEGER, propertyKeyCount :: INTEGER, nodeCount :: INTEGER, relCount :: INTEGER, labels :: MAP, relTypes :: MAP, relTypesCount :: MAP, stats :: MAP)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The total number of distinct node labels.',
            name: 'labelCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of distinct relationship types.',
            name: 'relTypeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The count of property keys.',
            name: 'propertyKeyCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of nodes.',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of relationships.',
            name: 'relCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'A map of labels to their count.',
            name: 'labels',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              'A map of relationship types per start or end node label.',
            name: 'relTypes',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'A map of relationship types to their count.',
            name: 'relTypesCount',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              'A map containing all the given return fields from this procedure.',
            name: 'stats',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.meta.subGraph': {
        name: 'apoc.meta.subGraph',
        description: 'Examines the given sub-graph and returns a meta-graph.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.meta.subGraph(config :: MAP) :: (nodes :: LIST<NODE>, relationships :: LIST<RELATIONSHIP>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              '{\n    excludeLabels :: LIST<STRING>,\n    includeLabels :: LIST<STRING>,\n    includeRels :: LIST<STRING>,\n    maxRels = -1 :: INTEGER,\n    sample = 1 :: INTEGER\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'Nodes representing the meta data.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            description: 'Relationships representing the meta data.',
            name: 'relationships',
            type: 'LIST<RELATIONSHIP>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.neighbors.athop': {
        name: 'apoc.neighbors.athop',
        description:
          'Returns all `NODE` values connected by the given `RELATIONSHIP` types at the specified distance.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.neighbors.athop(node :: NODE, relTypes =  :: STRING, distance = 1 :: INTEGER) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The starting node for the algorithm.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              "A list of relationship types to follow. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
            name: 'relTypes',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=1, type=INTEGER}',
            description: 'The number of hops to take.',
            name: 'distance',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A neighboring node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.neighbors.athop.count': {
        name: 'apoc.neighbors.athop.count',
        description:
          'Returns the count of all `NODE` values connected by the given `RELATIONSHIP` types at the specified distance.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.neighbors.athop.count(node :: NODE, relTypes =  :: STRING, distance = 1 :: INTEGER) :: (value :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The starting node for the algorithm.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              "A list of relationship types to follow. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
            name: 'relTypes',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=1, type=INTEGER}',
            description: 'The number of hops to take.',
            name: 'distance',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'The total count of neighboring nodes at the given hop distance.',
            name: 'value',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.neighbors.byhop': {
        name: 'apoc.neighbors.byhop',
        description:
          'Returns all `NODE` values connected by the given `RELATIONSHIP` types within the specified distance. Returns `LIST<NODE>` values, where each `PATH` of `NODE` values represents one row of the `LIST<NODE>` values.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.neighbors.byhop(node :: NODE, relTypes =  :: STRING, distance = 1 :: INTEGER) :: (nodes :: LIST<NODE>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The starting node for the algorithm.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              "A list of relationship types to follow. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
            name: 'relTypes',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=1, type=INTEGER}',
            description: 'The max number of hops to take.',
            name: 'distance',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'A list of neighboring nodes at a distinct hop distance.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.neighbors.byhop.count': {
        name: 'apoc.neighbors.byhop.count',
        description:
          'Returns the count of all `NODE` values connected by the given `RELATIONSHIP` types within the specified distance.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.neighbors.byhop.count(node :: NODE, relTypes =  :: STRING, distance = 1 :: INTEGER) :: (value :: LIST<ANY>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The starting node for the algorithm.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              "A list of relationship types to follow. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
            name: 'relTypes',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=1, type=INTEGER}',
            description: 'The max number of hops to take.',
            name: 'distance',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'A list of neighbor counts for each distinct hop distance.',
            name: 'value',
            type: 'LIST<ANY>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.neighbors.tohop': {
        name: 'apoc.neighbors.tohop',
        description:
          'Returns all `NODE` values connected by the given `RELATIONSHIP` types within the specified distance.\n`NODE` values are returned individually for each row.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.neighbors.tohop(node :: NODE, relTypes =  :: STRING, distance = 1 :: INTEGER) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The starting node for the algorithm.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              "A list of relationship types to follow. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
            name: 'relTypes',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=1, type=INTEGER}',
            description: 'The max number of hops to take.',
            name: 'distance',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A neighboring node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.neighbors.tohop.count': {
        name: 'apoc.neighbors.tohop.count',
        description:
          'Returns the count of all `NODE` values connected by the given `RELATIONSHIP` values in the pattern within the specified distance.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.neighbors.tohop.count(node :: NODE, relTypes =  :: STRING, distance = 1 :: INTEGER) :: (value :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The starting node for the algorithm.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              "A list of relationship types to follow. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
            name: 'relTypes',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=1, type=INTEGER}',
            description: 'The max number of hops to take.',
            name: 'distance',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'The total count of neighboring nodes within the given hop distance.',
            name: 'value',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.nodes.collapse': {
        name: 'apoc.nodes.collapse',
        description:
          'Merges `NODE` values together in the given `LIST<NODE>`.\nThe `NODE` values are then combined to become one `NODE`, with all labels of the previous `NODE` values attached to it, and all `RELATIONSHIP` values pointing to it.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.nodes.collapse(nodes :: LIST<NODE>, config = {} :: MAP) :: (from :: NODE, rel :: RELATIONSHIP, to :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list of node values to merge.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    mergeRels :: BOOLEAN,\n    selfRef :: BOOLEAN,\n    produceSelfRef = true :: BOOLEAN,\n    preserveExistingSelfRels = true :: BOOLEAN,\n    countMerge = true :: BOOLEAN,\n    collapsedLabel :: BOOLEAN,\n    singleElementAsArray = false :: BOOLEAN,\n    avoidDuplicates = false :: BOOLEAN,\n    relationshipSelectionStrategy = "incoming" :: ["incoming", "outgoing", "merge"]\n    properties :: ["overwrite", "discard", "combine"]\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The recently collapsed virtual node.',
            name: 'from',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'A relationship connected to the collapsed node.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description:
              'A node connected to the other end of the relationship.',
            name: 'to',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.nodes.cycles': {
        name: 'apoc.nodes.cycles',
        description:
          'Detects all `PATH` cycles in the given `LIST<NODE>`.\nThis procedure can be limited on `RELATIONSHIP` values as well.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.nodes.cycles(nodes :: LIST<NODE>, config = {} :: MAP) :: (path :: PATH)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list of nodes to check for path cycles.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    maxDepth :: INTEGER,\n    relTypes = [] :: LIST<STRING>\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A path containing a found cycle.',
            name: 'path',
            type: 'PATH',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.nodes.delete': {
        name: 'apoc.nodes.delete',
        description: 'Deletes all `NODE` values with the given ids.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.nodes.delete(nodes :: ANY, batchSize :: INTEGER) :: (value :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The nodes to be deleted. Nodes can be of type `STRING` (elementId()), `INTEGER` (id()), `NODE`, or `LIST<STRING | INTEGER | NODE>`.',
            name: 'nodes',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'The number of node values to delete in a single batch.',
            name: 'batchSize',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The number of deleted nodes.',
            name: 'value',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.nodes.get': {
        name: 'apoc.nodes.get',
        description: 'Returns all `NODE` values with the given ids.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature: 'apoc.nodes.get(nodes :: ANY) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The nodes to be returned. Nodes can be of type `STRING` (elementId()), `INTEGER` (id()), `NODE`, or `LIST<STRING | INTEGER | NODE>`.',
            name: 'nodes',
            type: 'ANY',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.nodes.group': {
        name: 'apoc.nodes.group',
        description:
          'Allows for the aggregation of `NODE` values based on the given properties.\nThis procedure returns virtual `NODE` values.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.nodes.group(labels :: LIST<STRING>, groupByProperties :: LIST<STRING>, aggregations = [{*=count}, {*=count}] :: LIST<MAP>, config = {} :: MAP) :: (nodes :: LIST<NODE>, relationships :: LIST<RELATIONSHIP>, node :: NODE, relationship :: RELATIONSHIP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              "The list of node labels to aggregate over. Use `['*']` to indicate all node labels should be looked at.",
            name: 'labels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The property keys to group the nodes by.',
            name: 'groupByProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=[{*=count}, {*=count}], type=LIST<MAP>}',
            description:
              'The first map specifies the node properties to aggregate with their corresponding aggregation functions, while the second map specifies the relationship properties for aggregation.',
            name: 'aggregations',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    includeRels :: STRING | LIST<STRING>\n    excludeRels :: STRING | LIST<STRING>,\n    orphans = true :: BOOLEAN,\n    selfRels = true :: BOOLEAN,\n    limitNodes = -1 :: INTEGER,\n    limitRels = -1 :: INTEGER,\n    relsPerNode = -1 :: INTEGER,\n    filter :: MAP\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'A list of grouped nodes represented as virtual nodes.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            description:
              'A list of grouped relationships represented as virtual relationships.',
            name: 'relationships',
            type: 'LIST<RELATIONSHIP>',
          },
          {
            isDeprecated: false,
            description: 'The grouping node.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The grouping relationship.',
            name: 'relationship',
            type: 'RELATIONSHIP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.nodes.link': {
        name: 'apoc.nodes.link',
        description:
          'Creates a linked list of the given `NODE` values connected by the given `RELATIONSHIP` type.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.nodes.link(nodes :: LIST<NODE>, type :: STRING, config = {} :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list of nodes to be linked.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            description: 'The relationship type name to link the nodes with.',
            name: 'type',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: '{ avoidDuplicates = false :: BOOLEAN }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.nodes.rels': {
        name: 'apoc.nodes.rels',
        description: 'Returns all `RELATIONSHIP` values with the given ids.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature: 'apoc.nodes.rels(rels :: ANY) :: (rel :: RELATIONSHIP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The relationships to be returned. Relationships can be of type `STRING` (elementId()), `INTEGER` (id()), `RELATIONSHIP`, or `LIST<STRING | INTEGER | RELATIONSHIP>',
            name: 'rels',
            type: 'ANY',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A relationship.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.path.expand': {
        name: 'apoc.path.expand',
        description:
          'Returns `PATH` values expanded from the start `NODE` following the given `RELATIONSHIP` types from min-depth to max-depth.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.path.expand(startNode :: ANY, relFilter :: STRING, labelFilter :: STRING, minDepth :: INTEGER, maxDepth :: INTEGER) :: (path :: PATH)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node to start the algorithm from. `startNode` can be of type `STRING` (elementId()), `INTEGER` (id()), `NODE`, or `LIST<STRING | INTEGER | NODE>`.',
            name: 'startNode',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'An allow list of types allowed on the returned relationships.',
            name: 'relFilter',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'An allow list of labels allowed on the returned nodes.',
            name: 'labelFilter',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The minimum number of hops allowed in the returned paths.',
            name: 'minDepth',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'The maximum number of hops allowed in the returned paths.',
            name: 'maxDepth',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The expanded path.',
            name: 'path',
            type: 'PATH',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.path.expandConfig': {
        name: 'apoc.path.expandConfig',
        description:
          'Returns `PATH` values expanded from the start `NODE` with the given `RELATIONSHIP` types from min-depth to max-depth.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.path.expandConfig(startNode :: ANY, config :: MAP) :: (path :: PATH)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node to start the algorithm from. `startNode` can be of type `STRING` (elementId()), `INTEGER` (id()), `NODE`, or `LIST<STRING | INTEGER | NODE>.',
            name: 'startNode',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              '{\n    minLevel = -1 :: INTEGER,\n    maxLevel = -1 :: INTEGER,\n    relationshipFilter :: STRING,\n    labelFilter :: STRING,\n    beginSequenceAtStart = true :: BOOLEAN,\n    uniqueness = "RELATIONSHIP_PATH" :: STRING,\n    bfs = true :: BOOLEAN,\n    filterStartNode = false :: BOOLEAN,\n    limit = -1 :: INTEGER,\n    optional = false :: BOOLEAN,\n    endNodes :: LIST<NODES>,\n    terminatorNodes:: LIST<NODES>,\n    allowlistNodes:: LIST<NODES>,\n    denylistNodes:: LIST<NODES>\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The expanded path.',
            name: 'path',
            type: 'PATH',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.path.spanningTree': {
        name: 'apoc.path.spanningTree',
        description:
          'Returns spanning tree `PATH` values expanded from the start `NODE` following the given `RELATIONSHIP` types to max-depth.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.path.spanningTree(startNode :: ANY, config :: MAP) :: (path :: PATH)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node to start the algorithm from. `startNode` can be of type `STRING` (elementId()), `INTEGER` (id()), `NODE`, or `LIST<STRING | INTEGER | NODE>.',
            name: 'startNode',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              '{\n    minLevel = -1 :: INTEGER,\n    maxLevel = -1 :: INTEGER,\n    relationshipFilter :: STRING,\n    labelFilter :: STRING,\n    beginSequenceAtStart = true :: BOOLEAN,\n    uniqueness = "RELATIONSHIP_PATH" :: STRING,\n    bfs = true :: BOOLEAN,\n    filterStartNode = false :: BOOLEAN,\n    limit = -1 :: INTEGER,\n    optional = false :: BOOLEAN,\n    endNodes :: LIST<NODES>,\n    terminatorNodes:: LIST<NODES>,\n    allowlistNodes:: LIST<NODES>,\n    denylistNodes:: LIST<NODES>\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A spanning tree path.',
            name: 'path',
            type: 'PATH',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.path.subgraphAll': {
        name: 'apoc.path.subgraphAll',
        description:
          'Returns the sub-graph reachable from the start `NODE` following the given `RELATIONSHIP` types to max-depth.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.path.subgraphAll(startNode :: ANY, config :: MAP) :: (nodes :: LIST<NODE>, relationships :: LIST<RELATIONSHIP>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node to start the algorithm from. `startNode` can be of type `STRING` (elementId()), `INTEGER` (id()), `NODE`, or `LIST<STRING | INTEGER | NODE>.',
            name: 'startNode',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              '{\n    minLevel = -1 :: INTEGER,\n    maxLevel = -1 :: INTEGER,\n    relationshipFilter :: STRING,\n    labelFilter :: STRING,\n    beginSequenceAtStart = true :: BOOLEAN,\n    uniqueness = "RELATIONSHIP_PATH" :: STRING,\n    bfs = true :: BOOLEAN,\n    filterStartNode = false :: BOOLEAN,\n    limit = -1 :: INTEGER,\n    optional = false :: BOOLEAN,\n    endNodes :: LIST<NODES>,\n    terminatorNodes:: LIST<NODES>,\n    allowlistNodes:: LIST<NODES>,\n    denylistNodes:: LIST<NODES>\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'Nodes part of the returned subgraph.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            description: 'Relationships part of the returned subgraph.',
            name: 'relationships',
            type: 'LIST<RELATIONSHIP>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.path.subgraphNodes': {
        name: 'apoc.path.subgraphNodes',
        description:
          'Returns the `NODE` values in the sub-graph reachable from the start `NODE` following the given `RELATIONSHIP` types to max-depth.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.path.subgraphNodes(startNode :: ANY, config :: MAP) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node to start the algorithm from. `startNode` can be of type `STRING` (elementId()), `INTEGER` (id()), `NODE`, or `LIST<STRING | INTEGER | NODE>`.',
            name: 'startNode',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              '{\n    minLevel = -1 :: INTEGER,\n    maxLevel = -1 :: INTEGER,\n    relationshipFilter :: STRING,\n    labelFilter :: STRING,\n    beginSequenceAtStart = true :: BOOLEAN,\n    uniqueness = "RELATIONSHIP_PATH" :: STRING,\n    bfs = true :: BOOLEAN,\n    filterStartNode = false :: BOOLEAN,\n    limit = -1 :: INTEGER,\n    optional = false :: BOOLEAN,\n    endNodes :: LIST<NODES>,\n    terminatorNodes:: LIST<NODES>,\n    allowlistNodes:: LIST<NODES>,\n    denylistNodes:: LIST<NODES>\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'Nodes part of the returned subgraph.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.paths.toJsonTree': {
        name: 'apoc.paths.toJsonTree',
        description:
          'Creates a stream of nested documents representing the graph as a tree by traversing outgoing relationships.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.paths.toJsonTree(paths :: LIST<PATH>, lowerCaseRels = true :: BOOLEAN, config = {} :: MAP) :: (value :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A list of paths to convert into a tree.',
            name: 'paths',
            type: 'LIST<PATH>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=true, type=BOOLEAN}',
            description:
              'Whether or not to convert relationship types to lower case.',
            name: 'lowerCaseRels',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{ nodes = {} :: MAP, rels = {} :: MAP, sortPaths = true :: BOOLEAN }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The resulting tree.',
            name: 'value',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.periodic.cancel': {
        name: 'apoc.periodic.cancel',
        description: 'Cancels the given background job.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.periodic.cancel(name :: STRING) :: (name :: STRING, delay :: INTEGER, rate :: INTEGER, done :: BOOLEAN, cancelled :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the job to cancel.',
            name: 'name',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the job.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The delay on the job.',
            name: 'delay',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The rate of the job.',
            name: 'rate',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'If the job has completed.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'If the job has been cancelled.',
            name: 'cancelled',
            type: 'BOOLEAN',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.periodic.commit': {
        name: 'apoc.periodic.commit',
        description:
          'Runs the given statement in separate batched transactions.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.periodic.commit(statement :: STRING, params = {} :: MAP) :: (updates :: INTEGER, executions :: INTEGER, runtime :: INTEGER, batches :: INTEGER, failedBatches :: INTEGER, batchErrors :: MAP, failedCommits :: INTEGER, commitErrors :: MAP, wasTerminated :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The Cypher statement to run.',
            name: 'statement',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'The parameters for the given Cypher statement.',
            name: 'params',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The total number of updates.',
            name: 'updates',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of executions.',
            name: 'executions',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total time taken in nanoseconds.',
            name: 'runtime',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of run batches.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of failed batches.',
            name: 'failedBatches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Errors returned from the failed batches.',
            name: 'batchErrors',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The number of failed commits.',
            name: 'failedCommits',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Errors returned from the failed commits.',
            name: 'commitErrors',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'If the job was terminated.',
            name: 'wasTerminated',
            type: 'BOOLEAN',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.periodic.countdown': {
        name: 'apoc.periodic.countdown',
        description:
          'Runs a repeatedly called background statement until it returns 0.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.periodic.countdown(name :: STRING, statement :: STRING, delay :: INTEGER) :: (name :: STRING, delay :: INTEGER, rate :: INTEGER, done :: BOOLEAN, cancelled :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the job.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The Cypher statement to run, returning a count on each run indicating the remaining iterations.',
            name: 'statement',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The delay in seconds to wait between each job execution.',
            name: 'delay',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the job.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The delay on the job.',
            name: 'delay',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The rate of the job.',
            name: 'rate',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'If the job has completed.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'If the job has been cancelled.',
            name: 'cancelled',
            type: 'BOOLEAN',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.periodic.iterate': {
        name: 'apoc.periodic.iterate',
        description:
          'Runs the second statement for each item returned by the first statement.\nThis procedure returns the number of batches and the total number of processed rows.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.periodic.iterate(cypherIterate :: STRING, cypherAction :: STRING, config :: MAP) :: (batches :: INTEGER, total :: INTEGER, timeTaken :: INTEGER, committedOperations :: INTEGER, failedOperations :: INTEGER, failedBatches :: INTEGER, retries :: INTEGER, errorMessages :: MAP, batch :: MAP, operations :: MAP, wasTerminated :: BOOLEAN, failedParams :: MAP, updateStatistics :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The first Cypher statement to be run.',
            name: 'cypherIterate',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The Cypher statement to run for each item returned by the initial Cypher statement.',
            name: 'cypherAction',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              '{\n    batchSize = 10000 :: INTEGER,\n    parallel = false :: BOOLEAN,\n    retries = 0 :: INTEGER,\n    batchMode = "BATCH" :: STRING,\n    params = {} :: MAP,\n    concurrency :: INTEGER,\n    failedParams = -1 :: INTEGER,\n    planner = "DEFAULT" :: ["DEFAULT", "COST", "IDP", "DP"]\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The total number of batches.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of processed input rows.',
            name: 'total',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration taken in seconds.',
            name: 'timeTaken',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of successful inner queries (actions).',
            name: 'committedOperations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of failed inner queries (actions).',
            name: 'failedOperations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of failed batches.',
            name: 'failedBatches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of retries.',
            name: 'retries',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'A map of batch error messages paired with their corresponding error counts.',
            name: 'errorMessages',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              '{\n     total :: INTEGER,\n     failed :: INTEGER,\n     committed :: INTEGER,\n     errors :: MAP\n}\n',
            name: 'batch',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              '{\n     total :: INTEGER,\n     failed :: INTEGER,\n     committed :: INTEGER,\n     errors :: MAP\n}\n',
            name: 'operations',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'If the transaction was terminated before completion.',
            name: 'wasTerminated',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description:
              'Parameters of failed batches. The key is the batch number as a STRING and the value is a list of batch parameters.',
            name: 'failedParams',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              '{\n    nodesCreated :: INTEGER,\n    nodesDeleted :: INTEGER,\n    relationshipsCreated :: INTEGER,\n    relationshipsDeleted :: INTEGER,\n    propertiesSet :: INTEGER,\n    labelsAdded :: INTEGER,\n    labelsRemoved :: INTEGER\n}\n',
            name: 'updateStatistics',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.periodic.list': {
        name: 'apoc.periodic.list',
        description: 'Returns a `LIST<ANY>` of all background jobs.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.periodic.list() :: (name :: STRING, delay :: INTEGER, rate :: INTEGER, done :: BOOLEAN, cancelled :: BOOLEAN)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the job.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The delay on the job.',
            name: 'delay',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The rate of the job.',
            name: 'rate',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'If the job has completed.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'If the job has been cancelled.',
            name: 'cancelled',
            type: 'BOOLEAN',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.periodic.repeat': {
        name: 'apoc.periodic.repeat',
        description:
          'Runs a repeatedly called background job.\nTo stop this procedure, use `apoc.periodic.cancel`.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.periodic.repeat(name :: STRING, statement :: STRING, rate :: INTEGER, config = {} :: MAP) :: (name :: STRING, delay :: INTEGER, rate :: INTEGER, done :: BOOLEAN, cancelled :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the job.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The Cypher statement to run.',
            name: 'statement',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The delay in seconds to wait between each job execution.',
            name: 'rate',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: '{ params = {} :: MAP }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the job.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The delay on the job.',
            name: 'delay',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The rate of the job.',
            name: 'rate',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'If the job has completed.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'If the job has been cancelled.',
            name: 'cancelled',
            type: 'BOOLEAN',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.periodic.submit': {
        name: 'apoc.periodic.submit',
        description:
          'Creates a background job which runs the given Cypher statement once.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.periodic.submit(name :: STRING, statement :: STRING, params = {} :: MAP) :: (name :: STRING, delay :: INTEGER, rate :: INTEGER, done :: BOOLEAN, cancelled :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the job.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The Cypher statement to run.',
            name: 'statement',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: '{ params = {} :: MAP }',
            name: 'params',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the job.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The delay on the job.',
            name: 'delay',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The rate of the job.',
            name: 'rate',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'If the job has completed.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'If the job has been cancelled.',
            name: 'cancelled',
            type: 'BOOLEAN',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.periodic.truncate': {
        name: 'apoc.periodic.truncate',
        description:
          'Removes all entities (and optionally indexes and constraints) from the database using the `apoc.periodic.iterate` procedure.',
        mode: 'SCHEMA',
        worksOnSystem: false,
        signature: 'apoc.periodic.truncate(config = {} :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    dropSchema = true :: BOOLEAN,\n    batchSize = 10000 :: INTEGER,\n    parallel = false :: BOOLEAN,\n    retries = 0 :: INTEGER,\n    batchMode = "BATCH" :: STRING,\n    params = {} :: MAP,\n    concurrency :: INTEGER,\n    failedParams = -1 :: INTEGER,\n    planner = "DEFAULT" :: ["DEFAULT", "COST", "IDP", "DP"]\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.refactor.categorize': {
        name: 'apoc.refactor.categorize',
        description:
          'Creates new category `NODE` values from `NODE` values in the graph with the specified `sourceKey` as one of its property keys.\nThe new category `NODE` values are then connected to the original `NODE` values with a `RELATIONSHIP` of the given type.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.refactor.categorize(sourceKey :: STRING, type :: STRING, outgoing :: BOOLEAN, label :: STRING, targetKey :: STRING, copiedKeys :: LIST<STRING>, batchSize :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The property key to add to the on the new node.',
            name: 'sourceKey',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The relationship type to connect to the new node.',
            name: 'type',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Whether the relationship should be outgoing or not.',
            name: 'outgoing',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The label of the new node.',
            name: 'label',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The name by which the source key value will be referenced on the new node.',
            name: 'targetKey',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'A list of additional property keys to be copied to the new node.',
            name: 'copiedKeys',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The max size of each batch.',
            name: 'batchSize',
            type: 'INTEGER',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.refactor.cloneNodes': {
        name: 'apoc.refactor.cloneNodes',
        description:
          'Clones the given `NODE` values with their labels and properties.\nIt is possible to skip any `NODE` properties using skipProperties (note: this only skips properties on `NODE` values and not their `RELATIONSHIP` values).',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.refactor.cloneNodes(nodes :: LIST<NODE>, withRelationships = false :: BOOLEAN, skipProperties = [] :: LIST<STRING>) :: (input :: INTEGER, output :: NODE, error :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The nodes to be cloned.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=false, type=BOOLEAN}',
            description:
              'Whether or not the connected relationships should also be cloned.',
            name: 'withRelationships',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[], type=LIST<STRING>}',
            description:
              'Whether or not to skip the node properties when cloning.',
            name: 'skipProperties',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The internal id of the original entity.',
            name: 'input',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The copied entity.',
            name: 'output',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'Any error that occurred during the copy process.',
            name: 'error',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.refactor.cloneSubgraph': {
        name: 'apoc.refactor.cloneSubgraph',
        description:
          'Clones the given `NODE` values with their labels and properties (optionally skipping any properties in the `skipProperties` `LIST<STRING>` via the config `MAP`), and clones the given `RELATIONSHIP` values.\nIf no `RELATIONSHIP` values are provided, all existing `RELATIONSHIP` values between the given `NODE` values will be cloned.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.refactor.cloneSubgraph(nodes :: LIST<NODE>, rels = [] :: LIST<RELATIONSHIP>, config = {} :: MAP) :: (input :: INTEGER, output :: NODE, error :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The nodes to be cloned.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[], type=LIST<RELATIONSHIP>}',
            description:
              'The relationships to be cloned. If left empty all relationships between the given nodes will be cloned.',
            name: 'rels',
            type: 'LIST<RELATIONSHIP>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    standinNodes :: LIST<LIST<NODE>>,\n    skipProperties :: LIST<STRING>,\n    createNodesInNewTransactions = false :: BOOLEAN\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The internal id of the original entity.',
            name: 'input',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The copied entity.',
            name: 'output',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'Any error that occurred during the copy process.',
            name: 'error',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.refactor.cloneSubgraphFromPaths': {
        name: 'apoc.refactor.cloneSubgraphFromPaths',
        description:
          'Clones a sub-graph defined by the given `LIST<PATH>` values.\nIt is possible to skip any `NODE` properties using the `skipProperties` `LIST<STRING>` via the config `MAP`.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.refactor.cloneSubgraphFromPaths(paths :: LIST<PATH>, config = {} :: MAP) :: (input :: INTEGER, output :: NODE, error :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The paths to be cloned.',
            name: 'paths',
            type: 'LIST<PATH>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    standinNodes :: LIST<LIST<NODE>>,\n    skipProperties :: LIST<STRING>\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The internal id of the original entity.',
            name: 'input',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The copied entity.',
            name: 'output',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'Any error that occurred during the copy process.',
            name: 'error',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.refactor.collapseNode': {
        name: 'apoc.refactor.collapseNode',
        description:
          'Collapses the given `NODE` and replaces it with a `RELATIONSHIP` of the given type.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.refactor.collapseNode(nodes :: ANY, relType :: STRING) :: (input :: INTEGER, output :: RELATIONSHIP, error :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The nodes to collapse. Nodes can be of type `STRING` (elementId()), `INTEGER` (id()), `NODE`, or `LIST<STRING | INTEGER | NODE>`.',
            name: 'nodes',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The name of the resulting relationship type.',
            name: 'relType',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The id of the given relationship.',
            name: 'input',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'The id of the new relationship with the updated type.',
            name: 'output',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description: 'The message if an error occurred.',
            name: 'error',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.refactor.deleteAndReconnect': {
        name: 'apoc.refactor.deleteAndReconnect',
        description:
          'Removes the given `NODE` values from the `PATH` and reconnects the remaining `NODE` values.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.refactor.deleteAndReconnect(path :: PATH, nodes :: LIST<NODE>, config = {} :: MAP) :: (nodes :: LIST<NODE>, relationships :: LIST<RELATIONSHIP>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The path containing the nodes to delete and the remaining nodes to reconnect.',
            name: 'path',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            description: 'The nodes to delete.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    relationshipSelectionStrategy = "incoming" :: ["incoming", "outgoing", "merge"]\n    properties :: ["overwrite", "discard", "combine"]\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The remaining nodes.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            description: 'The new connecting relationships.',
            name: 'relationships',
            type: 'LIST<RELATIONSHIP>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.refactor.extractNode': {
        name: 'apoc.refactor.extractNode',
        description:
          'Expands the given `RELATIONSHIP` VALUES into intermediate `NODE` VALUES.\nThe intermediate `NODE` values are connected by the given `outType` and `inType`.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.refactor.extractNode(rels :: ANY, labels :: LIST<STRING>, outType :: STRING, inType :: STRING) :: (input :: INTEGER, output :: NODE, error :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The relationships to turn into new nodes. Relationships can be of type `STRING` (elementId()), `INTEGER` (id()), `RELATIONSHIP`, or `LIST<STRING | INTEGER | RELATIONSHIP>`.',
            name: 'rels',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The labels to be added to the new nodes.',
            name: 'labels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The type of the outgoing relationship.',
            name: 'outType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The type of the ingoing relationship.',
            name: 'inType',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The internal id of the original entity.',
            name: 'input',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The copied entity.',
            name: 'output',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'Any error that occurred during the copy process.',
            name: 'error',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.refactor.from': {
        name: 'apoc.refactor.from',
        description:
          'Redirects the given `RELATIONSHIP` to the given start `NODE`.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.refactor.from(rel :: RELATIONSHIP, newNode :: NODE) :: (input :: INTEGER, output :: RELATIONSHIP, error :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The relationship to redirect.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description: 'The node to redirect the given relationship to.',
            name: 'newNode',
            type: 'NODE',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The internal id of the original entity.',
            name: 'input',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The copied entity.',
            name: 'output',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description: 'Any error that occurred during the copy process.',
            name: 'error',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.refactor.invert': {
        name: 'apoc.refactor.invert',
        description: 'Inverts the direction of the given `RELATIONSHIP`.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.refactor.invert(rel :: RELATIONSHIP) :: (input :: INTEGER, output :: RELATIONSHIP, error :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The relationship to reverse.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The internal id of the original entity.',
            name: 'input',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The copied entity.',
            name: 'output',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description: 'Any error that occurred during the copy process.',
            name: 'error',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.refactor.mergeNodes': {
        name: 'apoc.refactor.mergeNodes',
        description:
          'Merges the given `LIST<NODE>` onto the first `NODE` in the `LIST<NODE>`.\nAll `RELATIONSHIP` values are merged onto that `NODE` as well.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.refactor.mergeNodes(nodes :: LIST<NODE>, config = {} :: MAP) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The nodes to be merged onto the first node.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    mergeRels :: BOOLEAN,\n    selfRef :: BOOLEAN,\n    produceSelfRef = true :: BOOLEAN,\n    preserveExistingSelfRels = true :: BOOLEAN,\n    countMerge = true :: BOOLEAN,\n    collapsedLabel :: BOOLEAN,\n    singleElementAsArray = false :: BOOLEAN,\n    avoidDuplicates = false :: BOOLEAN,\n    relationshipSelectionStrategy = "incoming" :: ["incoming", "outgoing", "merge"]\n    properties :: ["overwrite", ""discard", "combine"]\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The merged node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.refactor.mergeRelationships': {
        name: 'apoc.refactor.mergeRelationships',
        description:
          'Merges the given `LIST<RELATIONSHIP>` onto the first `RELATIONSHIP` in the `LIST<RELATIONSHIP>`.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.refactor.mergeRelationships(rels :: LIST<RELATIONSHIP>, config = {} :: MAP) :: (rel :: RELATIONSHIP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The relationships to be merged onto the first relationship.',
            name: 'rels',
            type: 'LIST<RELATIONSHIP>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    mergeRels :: BOOLEAN,\n    selfRef :: BOOLEAN,\n    produceSelfRef = true :: BOOLEAN,\n    preserveExistingSelfRels = true :: BOOLEAN,\n    countMerge = true :: BOOLEAN,\n    collapsedLabel :: BOOLEAN,\n    singleElementAsArray = false :: BOOLEAN,\n    avoidDuplicates = false :: BOOLEAN,\n    relationshipSelectionStrategy = "incoming" :: ["incoming", "outgoing", "merge"]\n    properties :: ["overwrite", "discard", "combine"]\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The merged relationship.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.refactor.normalizeAsBoolean': {
        name: 'apoc.refactor.normalizeAsBoolean',
        description: 'Refactors the given property to a `BOOLEAN`.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.refactor.normalizeAsBoolean(entity :: ANY, propertyKey :: STRING, trueValues :: LIST<ANY>, falseValues :: LIST<ANY>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node or relationship whose properties will be normalized to booleans.',
            name: 'entity',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The name of the property key to normalize.',
            name: 'propertyKey',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The possible representations of true values.',
            name: 'trueValues',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The possible representations of false values.',
            name: 'falseValues',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.refactor.rename.label': {
        name: 'apoc.refactor.rename.label',
        description:
          'Renames the given label from `oldLabel` to `newLabel` for all `NODE` values.\nIf a `LIST<NODE>` is provided, the renaming is applied to the `NODE` values within this `LIST<NODE>` only.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.refactor.rename.label(oldLabel :: STRING, newLabel :: STRING, nodes = [] :: LIST<NODE>) :: (batches :: INTEGER, total :: INTEGER, timeTaken :: INTEGER, committedOperations :: INTEGER, failedOperations :: INTEGER, failedBatches :: INTEGER, retries :: INTEGER, errorMessages :: MAP, batch :: MAP, operations :: MAP, constraints :: LIST<STRING>, indexes :: LIST<STRING>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The label to rename.',
            name: 'oldLabel',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The new name to give the label.',
            name: 'newLabel',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[], type=LIST<NODE>}',
            description:
              'The nodes to apply the new name to. If this list is empty, all nodes with the old label will be renamed.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The number of batches the operation was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of renamings performed.',
            name: 'total',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The time taken to complete the operation.',
            name: 'timeTaken',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of committed operations.',
            name: 'committedOperations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of failed operations.',
            name: 'failedOperations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of failed batches.',
            name: 'failedBatches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of retries.',
            name: 'retries',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The collected error messages.',
            name: 'errorMessages',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              '{\n     total :: INTEGER,\n     failed :: INTEGER,\n     committed :: INTEGER,\n     errors :: MAP\n}\n',
            name: 'batch',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              '{\n     total :: INTEGER,\n     failed :: INTEGER,\n     committed :: INTEGER,\n     errors :: MAP\n}\n',
            name: 'operations',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'Constraints associated with the given label or type.',
            name: 'constraints',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'Indexes associated with the given label or type.',
            name: 'indexes',
            type: 'LIST<STRING>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.refactor.rename.nodeProperty': {
        name: 'apoc.refactor.rename.nodeProperty',
        description:
          'Renames the given property from `oldName` to `newName` for all `NODE` values.\nIf a `LIST<NODE>` is provided, the renaming is applied to the `NODE` values within this `LIST<NODE>` only.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.refactor.rename.nodeProperty(oldName :: STRING, newName :: STRING, nodes = [] :: LIST<NODE>, config = {} :: MAP) :: (batches :: INTEGER, total :: INTEGER, timeTaken :: INTEGER, committedOperations :: INTEGER, failedOperations :: INTEGER, failedBatches :: INTEGER, retries :: INTEGER, errorMessages :: MAP, batch :: MAP, operations :: MAP, constraints :: LIST<STRING>, indexes :: LIST<STRING>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The property to rename.',
            name: 'oldName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The new name to give the property.',
            name: 'newName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[], type=LIST<NODE>}',
            description:
              'The nodes to apply the new name to. If this list is empty, all nodes with the old property name will be renamed.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    batchSize = 100000 :: INTEGER,\n    concurrency :: INTEGER,\n    retries = 0 :: INTEGER,\n    parallel = true :: BOOLEAN,\n    batchMode = "BATCH" :: STRING\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The number of batches the operation was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of renamings performed.',
            name: 'total',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The time taken to complete the operation.',
            name: 'timeTaken',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of committed operations.',
            name: 'committedOperations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of failed operations.',
            name: 'failedOperations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of failed batches.',
            name: 'failedBatches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of retries.',
            name: 'retries',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The collected error messages.',
            name: 'errorMessages',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              '{\n     total :: INTEGER,\n     failed :: INTEGER,\n     committed :: INTEGER,\n     errors :: MAP\n}\n',
            name: 'batch',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              '{\n     total :: INTEGER,\n     failed :: INTEGER,\n     committed :: INTEGER,\n     errors :: MAP\n}\n',
            name: 'operations',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'Constraints associated with the given label or type.',
            name: 'constraints',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'Indexes associated with the given label or type.',
            name: 'indexes',
            type: 'LIST<STRING>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.refactor.rename.type': {
        name: 'apoc.refactor.rename.type',
        description:
          'Renames all `RELATIONSHIP` values with type `oldType` to `newType`.\nIf a `LIST<RELATIONSHIP>` is provided, the renaming is applied to the `RELATIONSHIP` values within this `LIST<RELATIONSHIP>` only.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.refactor.rename.type(oldType :: STRING, newType :: STRING, rels = [] :: LIST<RELATIONSHIP>, config = {} :: MAP) :: (batches :: INTEGER, total :: INTEGER, timeTaken :: INTEGER, committedOperations :: INTEGER, failedOperations :: INTEGER, failedBatches :: INTEGER, retries :: INTEGER, errorMessages :: MAP, batch :: MAP, operations :: MAP, constraints :: LIST<STRING>, indexes :: LIST<STRING>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The type to rename.',
            name: 'oldType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The new type for the relationship.',
            name: 'newType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[], type=LIST<RELATIONSHIP>}',
            description:
              'The relationships to apply the new name to. If this list is empty, all relationships with the old type will be renamed.',
            name: 'rels',
            type: 'LIST<RELATIONSHIP>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    batchSize = 100000 :: INTEGER,\n    concurrency :: INTEGER,\n    retries = 0 :: INTEGER,\n    parallel = true :: BOOLEAN,\n    batchMode = "BATCH" :: STRING\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The number of batches the operation was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of renamings performed.',
            name: 'total',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The time taken to complete the operation.',
            name: 'timeTaken',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of committed operations.',
            name: 'committedOperations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of failed operations.',
            name: 'failedOperations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of failed batches.',
            name: 'failedBatches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of retries.',
            name: 'retries',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The collected error messages.',
            name: 'errorMessages',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              '{\n     total :: INTEGER,\n     failed :: INTEGER,\n     committed :: INTEGER,\n     errors :: MAP\n}\n',
            name: 'batch',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              '{\n     total :: INTEGER,\n     failed :: INTEGER,\n     committed :: INTEGER,\n     errors :: MAP\n}\n',
            name: 'operations',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'Constraints associated with the given label or type.',
            name: 'constraints',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'Indexes associated with the given label or type.',
            name: 'indexes',
            type: 'LIST<STRING>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.refactor.rename.typeProperty': {
        name: 'apoc.refactor.rename.typeProperty',
        description:
          'Renames the given property from `oldName` to `newName` for all `RELATIONSHIP` values.\nIf a `LIST<RELATIONSHIP>` is provided, the renaming is applied to the `RELATIONSHIP` values within this `LIST<RELATIONSHIP>` only.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.refactor.rename.typeProperty(oldName :: STRING, newName :: STRING, rels = [] :: LIST<RELATIONSHIP>, config = {} :: MAP) :: (batches :: INTEGER, total :: INTEGER, timeTaken :: INTEGER, committedOperations :: INTEGER, failedOperations :: INTEGER, failedBatches :: INTEGER, retries :: INTEGER, errorMessages :: MAP, batch :: MAP, operations :: MAP, constraints :: LIST<STRING>, indexes :: LIST<STRING>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The property to rename.',
            name: 'oldName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The new name to give the property.',
            name: 'newName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[], type=LIST<RELATIONSHIP>}',
            description:
              'The relationships to apply the new name to. If this list is empty, all relationships with the old properties name will be renamed.',
            name: 'rels',
            type: 'LIST<RELATIONSHIP>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    batchSize = 100000 :: INTEGER,\n    concurrency :: INTEGER,\n    retries = 0 :: INTEGER,\n    parallel = true :: BOOLEAN,\n    batchMode = "BATCH" :: STRING\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The number of batches the operation was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of renamings performed.',
            name: 'total',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The time taken to complete the operation.',
            name: 'timeTaken',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of committed operations.',
            name: 'committedOperations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of failed operations.',
            name: 'failedOperations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of failed batches.',
            name: 'failedBatches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of retries.',
            name: 'retries',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The collected error messages.',
            name: 'errorMessages',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              '{\n     total :: INTEGER,\n     failed :: INTEGER,\n     committed :: INTEGER,\n     errors :: MAP\n}\n',
            name: 'batch',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              '{\n     total :: INTEGER,\n     failed :: INTEGER,\n     committed :: INTEGER,\n     errors :: MAP\n}\n',
            name: 'operations',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'Constraints associated with the given label or type.',
            name: 'constraints',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'Indexes associated with the given label or type.',
            name: 'indexes',
            type: 'LIST<STRING>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.refactor.setType': {
        name: 'apoc.refactor.setType',
        description: 'Changes the type of the given `RELATIONSHIP`.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.refactor.setType(rel :: RELATIONSHIP, newType :: STRING) :: (input :: INTEGER, output :: RELATIONSHIP, error :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The relationship to change the type of.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description: 'The new type for the relationship.',
            name: 'newType',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The id of the given relationship.',
            name: 'input',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'The id of the new relationship with the updated type.',
            name: 'output',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description: 'The message if an error occurred.',
            name: 'error',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.refactor.to': {
        name: 'apoc.refactor.to',
        description:
          'Redirects the given `RELATIONSHIP` to the given end `NODE`.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.refactor.to(rel :: RELATIONSHIP, endNode :: NODE) :: (input :: INTEGER, output :: RELATIONSHIP, error :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The relationship to redirect.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description: 'The new end node the relationship should point to.',
            name: 'endNode',
            type: 'NODE',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The id of the given relationship.',
            name: 'input',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'The id of the new relationship with the updated type.',
            name: 'output',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description: 'The message if an error occurred.',
            name: 'error',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.schema.assert': {
        name: 'apoc.schema.assert',
        description:
          'Drops all other existing indexes and constraints when `dropExisting` is `true` (default is `true`).\nAsserts at the end of the operation that the given indexes and unique constraints are there.',
        mode: 'SCHEMA',
        worksOnSystem: false,
        signature:
          'apoc.schema.assert(indexes :: MAP, constraints :: MAP, dropExisting = true :: BOOLEAN) :: (label :: ANY, key :: STRING, keys :: LIST<STRING>, unique :: BOOLEAN, action :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A map that pairs labels with lists of properties to create indexes from.',
            name: 'indexes',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              'A map that pairs labels with lists of properties to create constraints from.',
            name: 'constraints',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=true, type=BOOLEAN}',
            description:
              'Whether or not to drop all other existing indexes and constraints.',
            name: 'dropExisting',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The label associated with the constraint or index.',
            name: 'label',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'The property key associated with the constraint or index.',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The property keys associated with the constraint or index.',
            name: 'keys',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'Whether or not this is a uniqueness constraint.',
            name: 'unique',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description:
              'The action applied to this constraint or index; can be ["KEPT", "CREATED", "DROPPED"]',
            name: 'action',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.schema.nodes': {
        name: 'apoc.schema.nodes',
        description:
          'Returns all indexes and constraints information for all `NODE` labels in the database.\nIt is possible to define a set of labels to include or exclude in the config parameters.',
        mode: 'SCHEMA',
        worksOnSystem: false,
        signature:
          'apoc.schema.nodes(config = {} :: MAP) :: (name :: STRING, label :: ANY, properties :: LIST<STRING>, status :: STRING, type :: STRING, failure :: STRING, populationProgress :: FLOAT, size :: INTEGER, valuesSelectivity :: FLOAT, userDescription :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    labels :: LIST<STRING>,\n    excludeLabels :: LIST<STRING>,\n    relationships :: LIST<STRING>,\n    excludeRelationships :: LIST<STRING>\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A generated name for the index or constraint.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The label associated with the constraint or index.',
            name: 'label',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'The property keys associated with the constraint or index.',
            name: 'properties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The status of the constraint or index.',
            name: 'status',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The type of the index or constraint.',
            name: 'type',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'If a failure has occurred.',
            name: 'failure',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The percentage of the constraint or index population. ',
            name: 'populationProgress',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description:
              'The number of entries in the given constraint or index.',
            name: 'size',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'A ratio between 0.0 and 1.0, representing how many unique values were seen from the sampling.',
            name: 'valuesSelectivity',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'A descriptor of the constraint or index.',
            name: 'userDescription',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.schema.properties.distinct': {
        name: 'apoc.schema.properties.distinct',
        description:
          'Returns all distinct `NODE` property values for the given key.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.schema.properties.distinct(label :: STRING, key :: STRING) :: (value :: LIST<ANY>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The node label to find distinct properties on.',
            name: 'label',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the property to find distinct values of.',
            name: 'key',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The list of distinct values for the given property.',
            name: 'value',
            type: 'LIST<ANY>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.schema.properties.distinctCount': {
        name: 'apoc.schema.properties.distinctCount',
        description:
          'Returns all distinct property values and counts for the given key.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.schema.properties.distinctCount(label =  :: STRING, key =  :: STRING) :: (label :: STRING, key :: STRING, value :: ANY, count :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'The node label to count distinct properties on.',
            name: 'label',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              'The name of the property to count distinct values of.',
            name: 'key',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The label of the node.',
            name: 'label',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the property key.',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The distinct value.',
            name: 'value',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The number of occurrences of the value.',
            name: 'count',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.schema.relationships': {
        name: 'apoc.schema.relationships',
        description:
          'Returns the indexes and constraints information for all the relationship types in the database.\nIt is possible to define a set of relationship types to include or exclude in the config parameters.',
        mode: 'SCHEMA',
        worksOnSystem: false,
        signature:
          'apoc.schema.relationships(config = {} :: MAP) :: (name :: STRING, type :: STRING, properties :: LIST<STRING>, status :: STRING, relationshipType :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    labels :: LIST<STRING>,\n    excludeLabels :: LIST<STRING>,\n    relationships :: LIST<STRING>,\n    excludeRelationships :: LIST<STRING>\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A generated name for the index or constraint.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The type of the index or constraint.',
            name: 'type',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The property keys associated with the constraint or index.',
            name: 'properties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The status of the constraint or index.',
            name: 'status',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The relationship type associated with the constraint or index.',
            name: 'relationshipType',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.search.multiSearchReduced': {
        name: 'apoc.search.multiSearchReduced',
        description:
          'Returns a reduced representation of the `NODE` values found after a parallel search over multiple indexes.\nThe reduced `NODE` values representation includes: node id, node labels, and the searched properties.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.search.multiSearchReduced(labelPropertyMap :: ANY, operator :: STRING, value :: STRING) :: (id :: INTEGER, labels :: LIST<STRING>, values :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A map that pairs labels with lists of properties. This can also be represented as a JSON string.',
            name: 'labelPropertyMap',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'The search operator, can be one of: ["exact", "starts with", "ends with", "contains", "<", ">", "=", "<>", "<=", ">=", "=~"].',
            name: 'operator',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The search value.',
            name: 'value',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The id of the found node.',
            name: 'id',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The labels of the found node.',
            name: 'labels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The matched values of the found node.',
            name: 'values',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.search.node': {
        name: 'apoc.search.node',
        description:
          'Returns all the distinct `NODE` values found after a parallel search over multiple indexes.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.search.node(labelPropertyMap :: ANY, operator :: STRING, value :: STRING) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A map that pairs labels with lists of properties. This can also be represented as a JSON string.',
            name: 'labelPropertyMap',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'The search operator, can be one of: ["exact", "starts with", "ends with", "contains", "<", ">", "=", "<>", "<=", ">=", "=~"].',
            name: 'operator',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The search value.',
            name: 'value',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The found node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.search.nodeAll': {
        name: 'apoc.search.nodeAll',
        description:
          'Returns all the `NODE` values found after a parallel search over multiple indexes.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.search.nodeAll(labelPropertyMap :: ANY, operator :: STRING, value :: STRING) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A map that pairs labels with lists of properties. This can also be represented as a JSON string.',
            name: 'labelPropertyMap',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'The search operator, can be one of: ["exact", "starts with", "ends with", "contains", "<", ">", "=", "<>", "<=", ">=", "=~"].',
            name: 'operator',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The search value.',
            name: 'value',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The found node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.search.nodeAllReduced': {
        name: 'apoc.search.nodeAllReduced',
        description:
          'Returns a reduced representation of the `NODE` values found after a parallel search over multiple indexes.\nThe reduced `NODE` values representation includes: node id, node labels, and the searched properties.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.search.nodeAllReduced(labelPropertyMap :: ANY, operator :: STRING, value :: ANY) :: (id :: INTEGER, labels :: LIST<STRING>, values :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A map that pairs labels with lists of properties. This can also be represented as a JSON string.',
            name: 'labelPropertyMap',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'The search operator, can be one of: ["exact", "starts with", "ends with", "contains", "<", ">", "=", "<>", "<=", ">=", "=~"].',
            name: 'operator',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The search value.',
            name: 'value',
            type: 'ANY',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The id of the found node.',
            name: 'id',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The labels of the found node.',
            name: 'labels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The matched values of the found node.',
            name: 'values',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.search.nodeReduced': {
        name: 'apoc.search.nodeReduced',
        description:
          'Returns a reduced representation of the distinct `NODE` values found after a parallel search over multiple indexes.\nThe reduced `NODE` values representation includes: node id, node labels, and the searched properties.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.search.nodeReduced(labelPropertyMap :: ANY, operator :: STRING, value :: STRING) :: (id :: INTEGER, labels :: LIST<STRING>, values :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A map that pairs labels with lists of properties. This can also be represented as a JSON string.',
            name: 'labelPropertyMap',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'The search operator, can be one of: ["exact", "starts with", "ends with", "contains", "<", ">", "=", "<>", "<=", ">=", "=~"].',
            name: 'operator',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The search value.',
            name: 'value',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The id of the found node.',
            name: 'id',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The labels of the found node.',
            name: 'labels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The matched values of the found node.',
            name: 'values',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.spatial.geocode': {
        name: 'apoc.spatial.geocode',
        description:
          'Returns the geographic location (latitude, longitude, and description) of the given address using a geocoding service (default: OpenStreetMap).',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.spatial.geocode(location :: STRING, maxResults = 100 :: INTEGER, quotaException = false :: BOOLEAN, config = {} :: MAP) :: (location :: MAP, data :: MAP, latitude :: FLOAT, longitude :: FLOAT, description :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The location to search for.',
            name: 'location',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=100, type=INTEGER}',
            description: 'The maximum number of returned results.',
            name: 'maxResults',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=false, type=BOOLEAN}',
            description:
              'Whether or not to throw an exception when the maximum request quota is reached.',
            name: 'quotaException',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              "{\n        provider = 'osm' :: STRING,\n        url :: STRING,\n        reverseUrl: :: STRING,\n        key :: STRING\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A detailed map of information on the found location.',
            name: 'location',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'A map of returned data from the given provider.',
            name: 'data',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The latitude of the found location.',
            name: 'latitude',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'The longitude of the found location.',
            name: 'longitude',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'A description of the found location.',
            name: 'description',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.spatial.geocodeOnce': {
        name: 'apoc.spatial.geocodeOnce',
        description:
          'Returns the geographic location (latitude, longitude, and description) of the given address using a geocoding service (default: OpenStreetMap).\nThis procedure returns at most one result.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.spatial.geocodeOnce(location :: STRING, config = {} :: MAP) :: (location :: MAP, data :: MAP, latitude :: FLOAT, longitude :: FLOAT, description :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The location to search for.',
            name: 'location',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              "{\n        provider = 'osm' :: STRING,\n        url :: STRING,\n        reverseUrl: :: STRING,\n        key :: STRING\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A detailed map of information on the found location.',
            name: 'location',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'A map of returned data from the given provider.',
            name: 'data',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The latitude of the found location.',
            name: 'latitude',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'The longitude of the found location.',
            name: 'longitude',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'A description of the found location.',
            name: 'description',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.spatial.reverseGeocode': {
        name: 'apoc.spatial.reverseGeocode',
        description:
          'Returns a textual address from the given geographic location (latitude, longitude) using a geocoding service (default: OpenStreetMap).\nThis procedure returns at most one result.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.spatial.reverseGeocode(latitude :: FLOAT, longitude :: FLOAT, quotaException = false :: BOOLEAN, config = {} :: MAP) :: (location :: MAP, data :: MAP, latitude :: FLOAT, longitude :: FLOAT, description :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The latitude of the location.',
            name: 'latitude',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'The longitude of the location.',
            name: 'longitude',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=false, type=BOOLEAN}',
            description:
              'Whether or not to throw an exception when the maximum request quota is reached.',
            name: 'quotaException',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              "{\n        provider = 'osm' :: STRING,\n        url :: STRING,\n        reverseUrl: :: STRING,\n        key :: STRING\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A detailed map of information on the found location.',
            name: 'location',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'A map of returned data from the given provider.',
            name: 'data',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The latitude of the found location.',
            name: 'latitude',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'The longitude of the found location.',
            name: 'longitude',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'A description of the found location.',
            name: 'description',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.spatial.sortByDistance': {
        name: 'apoc.spatial.sortByDistance',
        description:
          'Sorts the given collection of `PATH` values by the sum of their distance based on the latitude/longitude values in the `NODE` values.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.spatial.sortByDistance(paths :: LIST<PATH>) :: (path :: PATH, distance :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A list of paths to be sorted by the sum of distances, calculated based on the latitude/longitude values in the nodes.',
            name: 'paths',
            type: 'LIST<PATH>',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The sorted path result.',
            name: 'path',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            description: 'The distance between the nodes.',
            name: 'distance',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.stats.degrees': {
        name: 'apoc.stats.degrees',
        description:
          'Returns the percentile groupings of the degrees on the `NODE` values connected by the given `RELATIONSHIP` types.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.stats.degrees(relTypes =  :: STRING) :: (type :: STRING, direction :: STRING, total :: INTEGER, p50 :: INTEGER, p75 :: INTEGER, p90 :: INTEGER, p95 :: INTEGER, p99 :: INTEGER, p999 :: INTEGER, max :: INTEGER, min :: INTEGER, mean :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              'The relationship types to calculate the percentile grouping over. If this is empty or omitted, all relationships are used.',
            name: 'relTypes',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The type of the relationship.',
            name: 'type',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The direction of the relationship.',
            name: 'direction',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The total observed relationships.',
            name: 'total',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The 50th percentile grouping.',
            name: 'p50',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The 75th percentile grouping.',
            name: 'p75',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The 90th percentile grouping.',
            name: 'p90',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The 95th percentile grouping.',
            name: 'p95',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The 99th percentile grouping.',
            name: 'p99',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The 99.9th percentile grouping.',
            name: 'p999',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The max value.',
            name: 'max',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The min value.',
            name: 'min',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The mean value.',
            name: 'mean',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.text.phoneticDelta': {
        name: 'apoc.text.phoneticDelta',
        description:
          'Returns the US_ENGLISH soundex character difference between the two given `STRING` values.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.text.phoneticDelta(text1 :: STRING, text2 :: STRING) :: (phonetic1 :: STRING, phonetic2 :: STRING, delta :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The first string to be compared against the second.',
            name: 'text1',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The second string to be compared against the first.',
            name: 'text2',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The phonetic representation of the first string.',
            name: 'phonetic1',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The phonetic representation of the second string.',
            name: 'phonetic2',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The soundex character difference between the two given strings.',
            name: 'delta',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.trigger.add': {
        name: 'apoc.trigger.add',
        description:
          "Adds a trigger to the given Cypher statement.\nThe selector for this procedure is {phase:'before/after/rollback/afterAsync'}.",
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.trigger.add(name :: STRING, statement :: STRING, selector :: MAP, config = {} :: MAP) :: (name :: STRING, query :: STRING, selector :: MAP, params :: MAP, installed :: BOOLEAN, paused :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the trigger to add.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The query to run when triggered.',
            name: 'statement',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              '{ phase = "before" :: ["before", "rollback", "after", "afterAsync"] }',
            name: 'selector',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'The parameters for the given Cypher statement.',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the trigger.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The query belonging to the trigger.',
            name: 'query',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              '{ phase = "before" :: ["before", "rollback", "after", "afterAsync"] }',
            name: 'selector',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The parameters for the given Cypher statement.',
            name: 'params',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was installed.',
            name: 'installed',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was paused.',
            name: 'paused',
            type: 'BOOLEAN',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy: 'apoc.trigger.install',
        option: {
          deprecated: true,
        },
      },
      'apoc.trigger.drop': {
        name: 'apoc.trigger.drop',
        description: 'Eventually removes the given trigger.',
        mode: 'WRITE',
        worksOnSystem: true,
        signature:
          'apoc.trigger.drop(databaseName :: STRING, name :: STRING) :: (name :: STRING, query :: STRING, selector :: MAP, params :: MAP, installed :: BOOLEAN, paused :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the database to drop the trigger from.',
            name: 'databaseName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the trigger to drop.',
            name: 'name',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the trigger.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The query belonging to the trigger.',
            name: 'query',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              '{ phase = "before" :: ["before", "rollback", "after", "afterAsync"] }',
            name: 'selector',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The parameters for the given Cypher statement.',
            name: 'params',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was installed.',
            name: 'installed',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was paused.',
            name: 'paused',
            type: 'BOOLEAN',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.trigger.dropAll': {
        name: 'apoc.trigger.dropAll',
        description: 'Eventually removes all triggers from the given database.',
        mode: 'WRITE',
        worksOnSystem: true,
        signature:
          'apoc.trigger.dropAll(databaseName :: STRING) :: (name :: STRING, query :: STRING, selector :: MAP, params :: MAP, installed :: BOOLEAN, paused :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the database to drop the triggers from.',
            name: 'databaseName',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the trigger.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The query belonging to the trigger.',
            name: 'query',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              '{ phase = "before" :: ["before", "rollback", "after", "afterAsync"] }',
            name: 'selector',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The parameters for the given Cypher statement.',
            name: 'params',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was installed.',
            name: 'installed',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was paused.',
            name: 'paused',
            type: 'BOOLEAN',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.trigger.install': {
        name: 'apoc.trigger.install',
        description:
          'Eventually adds a trigger for a given database which is invoked when a successful transaction occurs.',
        mode: 'WRITE',
        worksOnSystem: true,
        signature:
          'apoc.trigger.install(databaseName :: STRING, name :: STRING, statement :: STRING, selector :: MAP, config = {} :: MAP) :: (name :: STRING, query :: STRING, selector :: MAP, params :: MAP, installed :: BOOLEAN, paused :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the database to add the trigger to.',
            name: 'databaseName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the trigger to add.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The query to run when triggered.',
            name: 'statement',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              '{ phase = "before" :: ["before", "rollback", "after", "afterAsync"] }',
            name: 'selector',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'The parameters for the given Cypher statement.',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the trigger.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The query belonging to the trigger.',
            name: 'query',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              '{ phase = "before" :: ["before", "rollback", "after", "afterAsync"] }',
            name: 'selector',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The parameters for the given Cypher statement.',
            name: 'params',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was installed.',
            name: 'installed',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was paused.',
            name: 'paused',
            type: 'BOOLEAN',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.trigger.list': {
        name: 'apoc.trigger.list',
        description:
          'Lists all currently installed triggers for the session database.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'apoc.trigger.list() :: (name :: STRING, query :: STRING, selector :: MAP, params :: MAP, installed :: BOOLEAN, paused :: BOOLEAN)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the trigger.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The query belonging to the trigger.',
            name: 'query',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              '{ phase = "before" :: ["before", "rollback", "after", "afterAsync"] }',
            name: 'selector',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The parameters for the given Cypher statement.',
            name: 'params',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was installed.',
            name: 'installed',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was paused.',
            name: 'paused',
            type: 'BOOLEAN',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.trigger.pause': {
        name: 'apoc.trigger.pause',
        description: 'Pauses the given trigger.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.trigger.pause(name :: STRING) :: (name :: STRING, query :: STRING, selector :: MAP, params :: MAP, installed :: BOOLEAN, paused :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the trigger to pause.',
            name: 'name',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the trigger.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The query belonging to the trigger.',
            name: 'query',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              '{ phase = "before" :: ["before", "rollback", "after", "afterAsync"] }',
            name: 'selector',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The parameters for the given Cypher statement.',
            name: 'params',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was installed.',
            name: 'installed',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was paused.',
            name: 'paused',
            type: 'BOOLEAN',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy: 'apoc.trigger.stop',
        option: {
          deprecated: true,
        },
      },
      'apoc.trigger.remove': {
        name: 'apoc.trigger.remove',
        description: 'Removes the given trigger.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.trigger.remove(name :: STRING) :: (name :: STRING, query :: STRING, selector :: MAP, params :: MAP, installed :: BOOLEAN, paused :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the trigger to drop.',
            name: 'name',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the trigger.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The query belonging to the trigger.',
            name: 'query',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              '{ phase = "before" :: ["before", "rollback", "after", "afterAsync"] }',
            name: 'selector',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The parameters for the given Cypher statement.',
            name: 'params',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was installed.',
            name: 'installed',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was paused.',
            name: 'paused',
            type: 'BOOLEAN',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy: 'apoc.trigger.drop',
        option: {
          deprecated: true,
        },
      },
      'apoc.trigger.removeAll': {
        name: 'apoc.trigger.removeAll',
        description: 'Removes all previously added triggers.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.trigger.removeAll() :: (name :: STRING, query :: STRING, selector :: MAP, params :: MAP, installed :: BOOLEAN, paused :: BOOLEAN)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the trigger.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The query belonging to the trigger.',
            name: 'query',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              '{ phase = "before" :: ["before", "rollback", "after", "afterAsync"] }',
            name: 'selector',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The parameters for the given Cypher statement.',
            name: 'params',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was installed.',
            name: 'installed',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was paused.',
            name: 'paused',
            type: 'BOOLEAN',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy: 'apoc.trigger.dropAll',
        option: {
          deprecated: true,
        },
      },
      'apoc.trigger.resume': {
        name: 'apoc.trigger.resume',
        description: 'Resumes the given paused trigger.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.trigger.resume(name :: STRING) :: (name :: STRING, query :: STRING, selector :: MAP, params :: MAP, installed :: BOOLEAN, paused :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the trigger to resume.',
            name: 'name',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the trigger.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The query belonging to the trigger.',
            name: 'query',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              '{ phase = "before" :: ["before", "rollback", "after", "afterAsync"] }',
            name: 'selector',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The parameters for the given Cypher statement.',
            name: 'params',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was installed.',
            name: 'installed',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was paused.',
            name: 'paused',
            type: 'BOOLEAN',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy: 'apoc.trigger.start',
        option: {
          deprecated: true,
        },
      },
      'apoc.trigger.show': {
        name: 'apoc.trigger.show',
        description: 'Lists all eventually installed triggers for a database.',
        mode: 'READ',
        worksOnSystem: true,
        signature:
          'apoc.trigger.show(databaseName :: STRING) :: (name :: STRING, query :: STRING, selector :: MAP, params :: MAP, installed :: BOOLEAN, paused :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the database to show triggers on.',
            name: 'databaseName',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the trigger.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The query belonging to the trigger.',
            name: 'query',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              '{ phase = "before" :: ["before", "rollback", "after", "afterAsync"] }',
            name: 'selector',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The parameters for the given Cypher statement.',
            name: 'params',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was installed.',
            name: 'installed',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was paused.',
            name: 'paused',
            type: 'BOOLEAN',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.trigger.start': {
        name: 'apoc.trigger.start',
        description: 'Eventually restarts the given paused trigger.',
        mode: 'WRITE',
        worksOnSystem: true,
        signature:
          'apoc.trigger.start(databaseName :: STRING, name :: STRING) :: (name :: STRING, query :: STRING, selector :: MAP, params :: MAP, installed :: BOOLEAN, paused :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the database the trigger is on.',
            name: 'databaseName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the trigger to resume.',
            name: 'name',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the trigger.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The query belonging to the trigger.',
            name: 'query',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              '{ phase = "before" :: ["before", "rollback", "after", "afterAsync"] }',
            name: 'selector',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The parameters for the given Cypher statement.',
            name: 'params',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was installed.',
            name: 'installed',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was paused.',
            name: 'paused',
            type: 'BOOLEAN',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.trigger.stop': {
        name: 'apoc.trigger.stop',
        description: 'Eventually stops the given trigger.',
        mode: 'WRITE',
        worksOnSystem: true,
        signature:
          'apoc.trigger.stop(databaseName :: STRING, name :: STRING) :: (name :: STRING, query :: STRING, selector :: MAP, params :: MAP, installed :: BOOLEAN, paused :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the database the trigger is on.',
            name: 'databaseName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the trigger to drop.',
            name: 'name',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the trigger.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The query belonging to the trigger.',
            name: 'query',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              '{ phase = "before" :: ["before", "rollback", "after", "afterAsync"] }',
            name: 'selector',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The parameters for the given Cypher statement.',
            name: 'params',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was installed.',
            name: 'installed',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was paused.',
            name: 'paused',
            type: 'BOOLEAN',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.util.sleep': {
        name: 'apoc.util.sleep',
        description:
          'Causes the currently running Cypher to sleep for the given duration of milliseconds (the transaction termination is honored).',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature: 'apoc.util.sleep(duration :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The milliseconds to sleep.',
            name: 'duration',
            type: 'INTEGER',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.util.validate': {
        name: 'apoc.util.validate',
        description: 'If the given predicate is true an exception is thrown.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.util.validate(predicate :: BOOLEAN, message :: STRING, params :: LIST<ANY>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The predicate to check against.',
            name: 'predicate',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description:
              'The error message to throw if the given predicate evaluates to true.',
            name: 'message',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The parameters for the given error message.',
            name: 'params',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.warmup.run': {
        name: 'apoc.warmup.run',
        description:
          'Loads all `NODE` and `RELATIONSHIP` values in the database into memory.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.warmup.run(loadProperties = false :: BOOLEAN, loadDynamicProperties = false :: BOOLEAN, loadIndexes = false :: BOOLEAN) :: (pageSize :: INTEGER, totalTime :: INTEGER, transactionWasTerminated :: BOOLEAN, nodesPerPage :: INTEGER, nodesTotal :: INTEGER, nodePages :: INTEGER, nodesTime :: INTEGER, relsPerPage :: INTEGER, relsTotal :: INTEGER, relPages :: INTEGER, relsTime :: INTEGER, relGroupsPerPage :: INTEGER, relGroupsTotal :: INTEGER, relGroupPages :: INTEGER, relGroupsTime :: INTEGER, propertiesLoaded :: BOOLEAN, dynamicPropertiesLoaded :: BOOLEAN, propsPerPage :: INTEGER, propRecordsTotal :: INTEGER, propPages :: INTEGER, propsTime :: INTEGER, stringPropsPerPage :: INTEGER, stringPropRecordsTotal :: INTEGER, stringPropPages :: INTEGER, stringPropsTime :: INTEGER, arrayPropsPerPage :: INTEGER, arrayPropRecordsTotal :: INTEGER, arrayPropPages :: INTEGER, arrayPropsTime :: INTEGER, indexesLoaded :: BOOLEAN, indexPages :: INTEGER, indexTime :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=false, type=BOOLEAN}',
            description: 'loadProperties = false :: BOOLEAN',
            name: 'loadProperties',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=false, type=BOOLEAN}',
            description: 'loadDynamicProperties = false :: BOOLEAN',
            name: 'loadDynamicProperties',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=false, type=BOOLEAN}',
            description: 'loadIndexes = false :: BOOLEAN',
            name: 'loadIndexes',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'pageSize :: INTEGER',
            name: 'pageSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'totalTime :: INTEGER',
            name: 'totalTime',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'transactionWasTerminated :: BOOLEAN',
            name: 'transactionWasTerminated',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'nodesPerPage :: INTEGER',
            name: 'nodesPerPage',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodesTotal :: INTEGER',
            name: 'nodesTotal',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePages :: INTEGER',
            name: 'nodePages',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodesTime :: INTEGER',
            name: 'nodesTime',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relsPerPage :: INTEGER',
            name: 'relsPerPage',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relsTotal :: INTEGER',
            name: 'relsTotal',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relPages :: INTEGER',
            name: 'relPages',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relsTime :: INTEGER',
            name: 'relsTime',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relGroupsPerPage :: INTEGER',
            name: 'relGroupsPerPage',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relGroupsTotal :: INTEGER',
            name: 'relGroupsTotal',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relGroupPages :: INTEGER',
            name: 'relGroupPages',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relGroupsTime :: INTEGER',
            name: 'relGroupsTime',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'propertiesLoaded :: BOOLEAN',
            name: 'propertiesLoaded',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'dynamicPropertiesLoaded :: BOOLEAN',
            name: 'dynamicPropertiesLoaded',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'propsPerPage :: INTEGER',
            name: 'propsPerPage',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'propRecordsTotal :: INTEGER',
            name: 'propRecordsTotal',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'propPages :: INTEGER',
            name: 'propPages',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'propsTime :: INTEGER',
            name: 'propsTime',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'stringPropsPerPage :: INTEGER',
            name: 'stringPropsPerPage',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'stringPropRecordsTotal :: INTEGER',
            name: 'stringPropRecordsTotal',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'stringPropPages :: INTEGER',
            name: 'stringPropPages',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'stringPropsTime :: INTEGER',
            name: 'stringPropsTime',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'arrayPropsPerPage :: INTEGER',
            name: 'arrayPropsPerPage',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'arrayPropRecordsTotal :: INTEGER',
            name: 'arrayPropRecordsTotal',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'arrayPropPages :: INTEGER',
            name: 'arrayPropPages',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'arrayPropsTime :: INTEGER',
            name: 'arrayPropsTime',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'indexesLoaded :: BOOLEAN',
            name: 'indexesLoaded',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'indexPages :: INTEGER',
            name: 'indexPages',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'indexTime :: INTEGER',
            name: 'indexTime',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy:
          'Firstly, the procedure duplicates functionality of page cache warm up which is a part of the DBMS. Secondly, the API of this procedure is very specific to Record storage engine.',
        option: {
          deprecated: true,
        },
      },
      'apoc.when': {
        name: 'apoc.when',
        description:
          'This procedure will run the read-only `ifQuery` if the conditional has evaluated to true, otherwise the `elseQuery` will run.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.when(condition :: BOOLEAN, ifQuery :: STRING, elseQuery =  :: STRING, params = {} :: MAP) :: (value :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The predicate deciding if to run the `ifQuery`or not.',
            name: 'condition',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description:
              'The Cypher statement to run if the condition is true.',
            name: 'ifQuery',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              'The Cypher statement to run if the condition is false.',
            name: 'elseQuery',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'The parameters for the given Cypher statement.',
            name: 'params',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The result returned from the evaluated Cypher query.',
            name: 'value',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'cdc.current': {
        name: 'cdc.current',
        description:
          'Returns the current change identifier that can be used to stream changes from.',
        mode: 'READ',
        worksOnSystem: false,
        signature: 'cdc.current() :: (id :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The change identifier.',
            name: 'id',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy: 'db.cdc.current',
        option: {
          deprecated: true,
        },
      },
      'cdc.earliest': {
        name: 'cdc.earliest',
        description:
          'Returns the earliest change identifier that can be used to stream changes from.',
        mode: 'READ',
        worksOnSystem: false,
        signature: 'cdc.earliest() :: (id :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The change identifier.',
            name: 'id',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy: 'db.cdc.earliest',
        option: {
          deprecated: true,
        },
      },
      'cdc.query': {
        name: 'cdc.query',
        description:
          'Query changes happened from the provided change identifier.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'cdc.query(from =  :: STRING, selectors = [] :: LIST<MAP>) :: (id :: STRING, txId :: INTEGER, seq :: INTEGER, metadata :: MAP, event :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'The change identifier to query changes from.',
            name: 'from',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[], type=LIST<MAP>}',
            description: 'An optional list of selectors to filter out changes.',
            name: 'selectors',
            type: 'LIST<MAP>',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'The change identifier for this change event. Used to continue querying from this change event.',
            name: 'id',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'A number identifying which transaction the change happened in, unique in combination with seq.',
            name: 'txId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'A number used for ordering changes that happened in the same transaction.',
            name: 'seq',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'Metadata from the transaction that caused this change event.',
            name: 'metadata',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The retrieved changes on the affected entity.',
            name: 'event',
            type: 'MAP',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy: 'db.cdc.query',
        option: {
          deprecated: true,
        },
      },
      'db.awaitIndex': {
        name: 'db.awaitIndex',
        description:
          'Wait for an index to come online (for example: CALL db.awaitIndex("MyIndex", 300)).',
        mode: 'READ',
        worksOnSystem: true,
        signature:
          'db.awaitIndex(indexName :: STRING, timeOutSeconds = 300 :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the awaited index.',
            name: 'indexName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=300, type=INTEGER}',
            description: 'The maximum time to wait in seconds.',
            name: 'timeOutSeconds',
            type: 'INTEGER',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.awaitIndexes': {
        name: 'db.awaitIndexes',
        description:
          'Wait for all indexes to come online (for example: CALL db.awaitIndexes(300)).',
        mode: 'READ',
        worksOnSystem: true,
        signature: 'db.awaitIndexes(timeOutSeconds = 300 :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=300, type=INTEGER}',
            description: 'The maximum time to wait in seconds.',
            name: 'timeOutSeconds',
            type: 'INTEGER',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.cdc.current': {
        name: 'db.cdc.current',
        description:
          'Returns the current change identifier that can be used to stream changes from.',
        mode: 'READ',
        worksOnSystem: false,
        signature: 'db.cdc.current() :: (id :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The change identifier.',
            name: 'id',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.cdc.earliest': {
        name: 'db.cdc.earliest',
        description:
          'Returns the earliest change identifier that can be used to stream changes from.',
        mode: 'READ',
        worksOnSystem: false,
        signature: 'db.cdc.earliest() :: (id :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The change identifier.',
            name: 'id',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.cdc.query': {
        name: 'db.cdc.query',
        description:
          'Query changes happened from the provided change identifier.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'db.cdc.query(from =  :: STRING, selectors = [] :: LIST<MAP>) :: (id :: STRING, txId :: INTEGER, seq :: INTEGER, metadata :: MAP, event :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'The change identifier to query changes from.',
            name: 'from',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[], type=LIST<MAP>}',
            description: 'An optional list of selectors to filter out changes.',
            name: 'selectors',
            type: 'LIST<MAP>',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'The change identifier for this change event. Used to continue querying from this change event.',
            name: 'id',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'A number identifying which transaction the change happened in, unique in combination with seq.',
            name: 'txId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'A number used for ordering changes that happened in the same transaction.',
            name: 'seq',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'Metadata from the transaction that caused this change event.',
            name: 'metadata',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The retrieved changes on the affected entity.',
            name: 'event',
            type: 'MAP',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.checkpoint': {
        name: 'db.checkpoint',
        description:
          'Initiate and wait for a new check point, or wait any already on-going check point to complete. Note that this temporarily disables the `db.checkpoint.iops.limit` setting in order to make the check point complete faster. This might cause transaction throughput to degrade slightly, due to increased IO load.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature: 'db.checkpoint() :: (success :: BOOLEAN, message :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'Whether the checkpoint has successfully completed.',
            name: 'success',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'Details about the outcome of the procedure.',
            name: 'message',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.clearQueryCaches': {
        name: 'db.clearQueryCaches',
        description: 'Clears all query caches.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature: 'db.clearQueryCaches() :: (value :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'Information about the number of cleared query caches.',
            name: 'value',
            type: 'STRING',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.create.setNodeVectorProperty': {
        name: 'db.create.setNodeVectorProperty',
        description:
          "Set a vector property on a given node in a more space efficient representation than Cypher's SET.",
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'db.create.setNodeVectorProperty(node :: NODE, key :: STRING, vector :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The node on which the new property will be stored.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The name of the new property.',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The object containing the embedding.',
            name: 'vector',
            type: 'ANY',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.create.setRelationshipVectorProperty': {
        name: 'db.create.setRelationshipVectorProperty',
        description:
          "Set a vector property on a given relationship in a more space efficient representation than Cypher's SET.",
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'db.create.setRelationshipVectorProperty(relationship :: RELATIONSHIP, key :: STRING, vector :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The relationship on which the new property will be stored.',
            name: 'relationship',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description: 'The name of the new property.',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The object containing the embedding.',
            name: 'vector',
            type: 'ANY',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.create.setVectorProperty': {
        name: 'db.create.setVectorProperty',
        description:
          "Set a vector property on a given node in a more space efficient representation than Cypher's SET.",
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'db.create.setVectorProperty(node :: NODE, key :: STRING, vector :: ANY) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The node on which the new property will be stored.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The name of the new property.',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The object containing the embedding.',
            name: 'vector',
            type: 'ANY',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The node on which the vector property was set.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy: 'db.create.setNodeVectorProperty',
        option: {
          deprecated: true,
        },
      },
      'db.createLabel': {
        name: 'db.createLabel',
        description: 'Create a label',
        mode: 'WRITE',
        worksOnSystem: false,
        signature: 'db.createLabel(newLabel :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'Label name.',
            name: 'newLabel',
            type: 'STRING',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.createProperty': {
        name: 'db.createProperty',
        description: 'Create a Property',
        mode: 'WRITE',
        worksOnSystem: false,
        signature: 'db.createProperty(newProperty :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'Property name.',
            name: 'newProperty',
            type: 'STRING',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.createRelationshipType': {
        name: 'db.createRelationshipType',
        description: 'Create a RelationshipType',
        mode: 'WRITE',
        worksOnSystem: false,
        signature: 'db.createRelationshipType(newRelationshipType :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'Relationship type name.',
            name: 'newRelationshipType',
            type: 'STRING',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.index.fulltext.awaitEventuallyConsistentIndexRefresh': {
        name: 'db.index.fulltext.awaitEventuallyConsistentIndexRefresh',
        description:
          'Wait for the updates from recently committed transactions to be applied to any eventually-consistent full-text indexes.',
        mode: 'READ',
        worksOnSystem: true,
        signature: 'db.index.fulltext.awaitEventuallyConsistentIndexRefresh()',
        argumentDescription: [],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.index.fulltext.listAvailableAnalyzers': {
        name: 'db.index.fulltext.listAvailableAnalyzers',
        description:
          'List the available analyzers that the full-text indexes can be configured with.',
        mode: 'READ',
        worksOnSystem: true,
        signature:
          'db.index.fulltext.listAvailableAnalyzers() :: (analyzer :: STRING, description :: STRING, stopwords :: LIST<STRING>)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the analyzer.',
            name: 'analyzer',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The  description of the analyzer.',
            name: 'description',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The stopwords used by the analyzer to tokenize strings.',
            name: 'stopwords',
            type: 'LIST<STRING>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.index.fulltext.queryNodes': {
        name: 'db.index.fulltext.queryNodes',
        description:
          "Query the given full-text index. Returns the matching nodes and their Lucene query score, ordered by score.\nValid _key: value_ pairs for the `options` map are:\n\n* 'skip' -- to skip the top N results.\n* 'limit' -- to limit the number of results returned.\n* 'analyzer' -- to use the specified analyzer as a search analyzer for this query.\n\nThe `options` map and any of the keys are optional.\nAn example of the `options` map: `{skip: 30, limit: 10, analyzer: 'whitespace'}`\n",
        mode: 'READ',
        worksOnSystem: true,
        signature:
          'db.index.fulltext.queryNodes(indexName :: STRING, queryString :: STRING, options = {} :: MAP) :: (node :: NODE, score :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the full-text index.',
            name: 'indexName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The string to find approximate matches for.',
            name: 'queryString',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{skip :: INTEGER, limit :: INTEGER, analyzer :: STRING}',
            name: 'options',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'A node which contains a property similar to the query string.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description:
              'The score measuring how similar the node property is to the query string.',
            name: 'score',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.index.fulltext.queryRelationships': {
        name: 'db.index.fulltext.queryRelationships',
        description:
          "Query the given full-text index. Returns the matching relationships and their Lucene query score, ordered by score.\nValid _key: value_ pairs for the `options` map are:\n\n* 'skip' -- to skip the top N results.\n* 'limit' -- to limit the number of results returned.\n* 'analyzer' -- to use the specified analyzer as a search analyzer for this query.\n\nThe `options` map and any of the keys are optional.\nAn example of the `options` map: `{skip: 30, limit: 10, analyzer: 'whitespace'}`\n",
        mode: 'READ',
        worksOnSystem: true,
        signature:
          'db.index.fulltext.queryRelationships(indexName :: STRING, queryString :: STRING, options = {} :: MAP) :: (relationship :: RELATIONSHIP, score :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the full-text index.',
            name: 'indexName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The string to find approximate matches for.',
            name: 'queryString',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{skip :: INTEGER, limit :: INTEGER, analyzer :: STRING}',
            name: 'options',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'A relationship which contains a property similar to the query string.',
            name: 'relationship',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description:
              'The score measuring how similar the relationship property is to the query string.',
            name: 'score',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.index.vector.createNodeIndex': {
        name: 'db.index.vector.createNodeIndex',
        description:
          'Create a named node vector index for the specified label and property with the given vector dimensionality using either the EUCLIDEAN or COSINE similarity function.\nBoth similarity functions are case-insensitive.\nUse the `db.index.vector.queryNodes` procedure to query the named index.\n',
        mode: 'SCHEMA',
        worksOnSystem: false,
        signature:
          'db.index.vector.createNodeIndex(indexName :: STRING, label :: STRING, propertyKey :: STRING, vectorDimension :: INTEGER, vectorSimilarityFunction :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'indexName :: STRING',
            name: 'indexName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'label :: STRING',
            name: 'label',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'propertyKey :: STRING',
            name: 'propertyKey',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'vectorDimension :: INTEGER',
            name: 'vectorDimension',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'vectorSimilarityFunction :: STRING',
            name: 'vectorSimilarityFunction',
            type: 'STRING',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy: 'CREATE VECTOR INDEX',
        option: {
          deprecated: true,
        },
      },
      'db.index.vector.queryNodes': {
        name: 'db.index.vector.queryNodes',
        description:
          'Query the given node vector index.\nReturns requested number of nearest neighbors to the provided query vector,\nand their similarity score to that query vector, based on the configured similarity function for the index.\nThe similarity score is a value between [0, 1]; where 0 indicates least similar, 1 most similar.\n',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'db.index.vector.queryNodes(indexName :: STRING, numberOfNearestNeighbours :: INTEGER, query :: ANY) :: (node :: NODE, score :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the vector index.',
            name: 'indexName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The size of the vector neighbourhood.',
            name: 'numberOfNearestNeighbours',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The object to find approximate matches for.',
            name: 'query',
            type: 'ANY',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'A node which contains a vector property similar to the query object.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description:
              'The score measuring how similar the node property is to the query object.',
            name: 'score',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.index.vector.queryRelationships': {
        name: 'db.index.vector.queryRelationships',
        description:
          'Query the given relationship vector index.\nReturns requested number of nearest neighbors to the provided query vector,\nand their similarity score to that query vector, based on the configured similarity function for the index.\nThe similarity score is a value between [0, 1]; where 0 indicates least similar, 1 most similar.\n',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'db.index.vector.queryRelationships(indexName :: STRING, numberOfNearestNeighbours :: INTEGER, query :: ANY) :: (relationship :: RELATIONSHIP, score :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the vector index.',
            name: 'indexName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The size of the vector neighbourhood.',
            name: 'numberOfNearestNeighbours',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The object to find approximate matches for.',
            name: 'query',
            type: 'ANY',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'A relationship which contains a vector property similar to the query object.',
            name: 'relationship',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description:
              'The score measuring how similar the relationship property is to the query object.',
            name: 'score',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.info': {
        name: 'db.info',
        description: 'Provides information regarding the database.',
        mode: 'READ',
        worksOnSystem: true,
        signature:
          'db.info() :: (id :: STRING, name :: STRING, creationDate :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The id of the database.',
            name: 'id',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the database.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The creation date of the database, formatted according to the ISO-8601 Standard.',
            name: 'creationDate',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.labels': {
        name: 'db.labels',
        description:
          "List all labels attached to nodes within a database according to the user's access rights. The procedure returns empty results if the user is not authorized to view those labels.",
        mode: 'READ',
        worksOnSystem: true,
        signature: 'db.labels() :: (label :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A label within the database.',
            name: 'label',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.listLocks': {
        name: 'db.listLocks',
        description: 'List all locks at this database.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'db.listLocks() :: (mode :: STRING, resourceType :: STRING, resourceId :: INTEGER, transactionId :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'The locking mode this lock is using, either "SHARED" or "EXCLUSIVE".',
            name: 'mode',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The type of resource (e.g. nodes, relationships, labels) this lock protects.',
            name: 'resourceType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The id of the resource this lock protects.',
            name: 'resourceId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The id of the transaction that owns this lock.',
            name: 'transactionId',
            type: 'STRING',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.ping': {
        name: 'db.ping',
        description:
          'This procedure can be used by client side tooling to test whether they are correctly connected to a database. The procedure is available in all databases and always returns true. A faulty connection can be detected by not being able to call this procedure.',
        mode: 'READ',
        worksOnSystem: true,
        signature: 'db.ping() :: (success :: BOOLEAN)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'Whether or not the connection call to the database has been successful.',
            name: 'success',
            type: 'BOOLEAN',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.prepareForReplanning': {
        name: 'db.prepareForReplanning',
        description:
          'Triggers an index resample and waits for it to complete, and after that clears query caches. After this procedure has finished queries will be planned using the latest database statistics.',
        mode: 'READ',
        worksOnSystem: true,
        signature: 'db.prepareForReplanning(timeOutSeconds = 300 :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=300, type=INTEGER}',
            description: 'The maximum time to wait in seconds.',
            name: 'timeOutSeconds',
            type: 'INTEGER',
          },
        ],
        returnDescription: [],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.propertyKeys': {
        name: 'db.propertyKeys',
        description: 'List all property keys in the database.',
        mode: 'READ',
        worksOnSystem: true,
        signature: 'db.propertyKeys() :: (propertyKey :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A property key in the database.',
            name: 'propertyKey',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.relationshipTypes': {
        name: 'db.relationshipTypes',
        description:
          "List all types attached to relationships within a database according to the user's access rights. The procedure returns empty results if the user is not authorized to view those relationship types.",
        mode: 'READ',
        worksOnSystem: true,
        signature: 'db.relationshipTypes() :: (relationshipType :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A relationship type in the database.',
            name: 'relationshipType',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.resampleIndex': {
        name: 'db.resampleIndex',
        description:
          'Schedule resampling of an index (for example: CALL db.resampleIndex("MyIndex")).',
        mode: 'READ',
        worksOnSystem: true,
        signature: 'db.resampleIndex(indexName :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the index.',
            name: 'indexName',
            type: 'STRING',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.resampleOutdatedIndexes': {
        name: 'db.resampleOutdatedIndexes',
        description: 'Schedule resampling of all outdated indexes.',
        mode: 'READ',
        worksOnSystem: true,
        signature: 'db.resampleOutdatedIndexes()',
        argumentDescription: [],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.schema.nodeTypeProperties': {
        name: 'db.schema.nodeTypeProperties',
        description:
          'Show the derived property schema of the nodes in tabular form.',
        mode: 'READ',
        worksOnSystem: true,
        signature:
          'db.schema.nodeTypeProperties() :: (nodeType :: STRING, nodeLabels :: LIST<STRING>, propertyName :: STRING, propertyTypes :: LIST<STRING>, mandatory :: BOOLEAN)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A name generated from the labels on the node.',
            name: 'nodeType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'A list containing the labels on a category of node.',
            name: 'nodeLabels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'A property key on a category of node.',
            name: 'propertyName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'All types of a property belonging to a node category.',
            name: 'propertyTypes',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description:
              'Whether or not the property is present on all nodes belonging to a node category.',
            name: 'mandatory',
            type: 'BOOLEAN',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.schema.relTypeProperties': {
        name: 'db.schema.relTypeProperties',
        description:
          'Show the derived property schema of the relationships in tabular form.',
        mode: 'READ',
        worksOnSystem: true,
        signature:
          'db.schema.relTypeProperties() :: (relType :: STRING, propertyName :: STRING, propertyTypes :: LIST<STRING>, mandatory :: BOOLEAN)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A name generated from the type on the relationship.',
            name: 'relType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'A property key on a category of relationship.',
            name: 'propertyName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'All types of a property belonging to a relationship category.',
            name: 'propertyTypes',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description:
              'Whether or not the property is present on all relationships belonging to a relationship category.',
            name: 'mandatory',
            type: 'BOOLEAN',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.schema.visualization': {
        name: 'db.schema.visualization',
        description:
          'Visualizes the schema of the data based on available statistics. A new node is returned for each label. The properties represented on the node include: `name` (label name), `indexes` (list of indexes), and `constraints` (list of constraints). A relationship of a given type is returned for all possible combinations of start and end nodes. The properties represented on the relationship include: `name` (type name). Note that this may include additional relationships that do not exist in the data due to the information available in the count store. ',
        mode: 'READ',
        worksOnSystem: true,
        signature:
          'db.schema.visualization() :: (nodes :: LIST<NODE>, relationships :: LIST<RELATIONSHIP>)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'A list of virtual nodes representing each label in the database.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            description:
              'A list of virtual relationships representing all combinations between start and end nodes in the database.',
            name: 'relationships',
            type: 'LIST<RELATIONSHIP>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.stats.clear': {
        name: 'db.stats.clear',
        description:
          "Clear collected data of a given data section. Valid sections are 'QUERIES'",
        mode: 'READ',
        worksOnSystem: true,
        signature:
          'db.stats.clear(section :: STRING) :: (section :: STRING, success :: BOOLEAN, message :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              "The section to clear. The only available section is: 'QUERIES'.",
            name: 'section',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The section cleared.',
            name: 'section',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Whether the section was successfully cleared.',
            name: 'success',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'Details about the outcome of the procedure.',
            name: 'message',
            type: 'STRING',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.stats.collect': {
        name: 'db.stats.collect',
        description:
          "Start data collection of a given data section. Valid sections are 'QUERIES'",
        mode: 'READ',
        worksOnSystem: true,
        signature:
          'db.stats.collect(section :: STRING, config = {} :: MAP) :: (section :: STRING, success :: BOOLEAN, message :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              "The section to collect. The only available section is: 'QUERIES'.",
            name: 'section',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: '{durationSeconds = -1 :: INTEGER}',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The section collected.',
            name: 'section',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Whether the section was successfully collected.',
            name: 'success',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'Details about the outcome of the procedure.',
            name: 'message',
            type: 'STRING',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.stats.retrieve': {
        name: 'db.stats.retrieve',
        description:
          "Retrieve statistical data about the current database. Valid sections are 'GRAPH COUNTS', 'TOKENS', 'QUERIES', 'META'",
        mode: 'READ',
        worksOnSystem: true,
        signature:
          'db.stats.retrieve(section :: STRING, config = {} :: MAP) :: (section :: STRING, data :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              "A section of stats to retrieve: ('GRAPH COUNTS', 'TOKENS', 'QUERIES', 'META').",
            name: 'section',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: '{maxInvocations = 100 :: INTEGER}',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The section retrieved.',
            name: 'section',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Data pertaining to the retrieved statistics.',
            name: 'data',
            type: 'MAP',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.stats.retrieveAllAnonymized': {
        name: 'db.stats.retrieveAllAnonymized',
        description:
          'Retrieve all available statistical data about the current database, in an anonymized form.',
        mode: 'READ',
        worksOnSystem: true,
        signature:
          'db.stats.retrieveAllAnonymized(graphToken :: STRING, config = {} :: MAP) :: (section :: STRING, data :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the graph token.',
            name: 'graphToken',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: '{maxInvocations = 100 :: INTEGER}',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The section retrieved.',
            name: 'section',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Data pertaining to the retrieved statistics.',
            name: 'data',
            type: 'MAP',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.stats.status': {
        name: 'db.stats.status',
        description:
          'Retrieve the status of all available collector daemons, for this database.',
        mode: 'READ',
        worksOnSystem: true,
        signature:
          'db.stats.status() :: (section :: STRING, status :: STRING, data :: MAP)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'String with the message "QUERIES".',
            name: 'section',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The status of the QueryCollector: "idle" or "collecting".',
            name: 'status',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'data :: MAP',
            name: 'data',
            type: 'MAP',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.stats.stop': {
        name: 'db.stats.stop',
        description:
          "Stop data collection of a given data section. Valid sections are 'QUERIES'",
        mode: 'READ',
        worksOnSystem: true,
        signature:
          'db.stats.stop(section :: STRING) :: (section :: STRING, success :: BOOLEAN, message :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              "The section to stop. The only available section is: 'QUERIES'.",
            name: 'section',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The stopped section.',
            name: 'section',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Whether the section was successfully stopped.',
            name: 'success',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'Details about the outcome of the procedure.',
            name: 'message',
            type: 'STRING',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.checkConfigValue': {
        name: 'dbms.checkConfigValue',
        description: 'Check if a potential config setting value is valid.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.checkConfigValue(setting :: STRING, value :: STRING) :: (valid :: BOOLEAN, message :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the setting.',
            name: 'setting',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The setting value to verify.',
            name: 'value',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'Whether or not the setting value is valid.',
            name: 'valid',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'Details about the outcome of the procedure.',
            name: 'message',
            type: 'STRING',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.cluster.checkConnectivity': {
        name: 'dbms.cluster.checkConnectivity',
        description:
          "Check the connectivity of this instance to other cluster members. Not all ports are relevant to all members. Valid values for 'port-name' are: [CLUSTER, INTRA_BOLT, RAFT]",
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.cluster.checkConnectivity(port-name = null :: STRING, server = null :: STRING) :: (serverId :: STRING, name :: STRING, address :: STRING, mode-constraint :: STRING, port-name :: STRING, port-address :: STRING, result :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=STRING}',
            description: "The name of the port: ('CLUSTER', 'RAFT').",
            name: 'port-name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=STRING}',
            description: 'The id of the server to check connectivity of.',
            name: 'server',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The id of the checked server.',
            name: 'serverId',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'address :: STRING',
            name: 'address',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The instance mode constraint of the server.',
            name: 'mode-constraint',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the checked port.',
            name: 'port-name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The address of the checked port.',
            name: 'port-address',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Whether the check was successful or not.',
            name: 'result',
            type: 'STRING',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.cluster.cordonServer': {
        name: 'dbms.cluster.cordonServer',
        description:
          'Mark a server in the topology as not suitable for new allocations. It will not force current allocations off the server. This is useful when deallocating databases when you have multiple unavailable servers.',
        mode: 'WRITE',
        worksOnSystem: true,
        signature: 'dbms.cluster.cordonServer(server :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name or id of the server to be cordoned.',
            name: 'server',
            type: 'STRING',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.cluster.deallocateDatabaseFromServer': {
        name: 'dbms.cluster.deallocateDatabaseFromServer',
        description:
          'Deallocate a specific user database from a specific server.',
        mode: 'WRITE',
        worksOnSystem: true,
        signature:
          'dbms.cluster.deallocateDatabaseFromServer(server :: STRING, database :: STRING, dryrun = false :: BOOLEAN) :: (database :: STRING, fromServerName :: STRING, fromServerId :: STRING, toServerName :: STRING, toServerId :: STRING, mode :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The id of the server to deallocate from.',
            name: 'server',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the database to deallocate.',
            name: 'database',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=false, type=BOOLEAN}',
            description: 'Set to `true` to dry run the procedure.',
            name: 'dryrun',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the database.',
            name: 'database',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the server.',
            name: 'fromServerName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The id of the server.',
            name: 'fromServerId',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the server.',
            name: 'toServerName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The id of the server.',
            name: 'toServerId',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The mode in which the database is hosted.',
            name: 'mode',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.cluster.deallocateDatabaseFromServers': {
        name: 'dbms.cluster.deallocateDatabaseFromServers',
        description:
          'Deallocate a specific user database from a list of servers.',
        mode: 'WRITE',
        worksOnSystem: true,
        signature:
          'dbms.cluster.deallocateDatabaseFromServers(servers :: LIST<STRING>, database :: STRING, dryrun = false :: BOOLEAN) :: (database :: STRING, fromServerName :: STRING, fromServerId :: STRING, toServerName :: STRING, toServerId :: STRING, mode :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The ids of the servers to deallocate from.',
            name: 'servers',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The id of the database to deallocate.',
            name: 'database',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=false, type=BOOLEAN}',
            description: 'Set to `true` to dry run the procedure.',
            name: 'dryrun',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the database.',
            name: 'database',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the server.',
            name: 'fromServerName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The id of the server.',
            name: 'fromServerId',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the server.',
            name: 'toServerName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The id of the server.',
            name: 'toServerId',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The mode in which the database is hosted.',
            name: 'mode',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.cluster.deallocateNumberOfDatabases': {
        name: 'dbms.cluster.deallocateNumberOfDatabases',
        description:
          'Deallocate a number of user databases from a specific server.',
        mode: 'WRITE',
        worksOnSystem: true,
        signature:
          'dbms.cluster.deallocateNumberOfDatabases(server :: STRING, number :: INTEGER, dryrun = false :: BOOLEAN) :: (database :: STRING, fromServerName :: STRING, fromServerId :: STRING, toServerName :: STRING, toServerId :: STRING, mode :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The id of the server to deallocate from.',
            name: 'server',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of databases to deallocate.',
            name: 'number',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=false, type=BOOLEAN}',
            description: 'Set to `true` to dry run the procedure.',
            name: 'dryrun',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the database.',
            name: 'database',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the server.',
            name: 'fromServerName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The id of the server.',
            name: 'fromServerId',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the server.',
            name: 'toServerName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The id of the server.',
            name: 'toServerId',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The mode in which the database is hosted.',
            name: 'mode',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.cluster.moveToNextDiscoveryVersion': {
        name: 'dbms.cluster.moveToNextDiscoveryVersion',
        description:
          "The procedure triggers a switch to the next discovery service version for all known members of the cluster (as listed in the system database and discovery). For example, if the current member's discovery version is V1_ONLY, it will switch all members to V1_OVER_V2. In case of failure, the user must manually resolve the issue.",
        mode: 'DBMS',
        worksOnSystem: true,
        signature: 'dbms.cluster.moveToNextDiscoveryVersion()',
        argumentDescription: [],
        returnDescription: [],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.cluster.protocols': {
        name: 'dbms.cluster.protocols',
        description: 'Overview of installed protocols',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.cluster.protocols() :: (orientation :: STRING, remoteAddress :: STRING, applicationProtocol :: STRING, applicationProtocolVersion :: INTEGER, modifierProtocols :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'Direction of the protocol (inbound or outbound).',
            name: 'orientation',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The socket address this protocol is available on.',
            name: 'remoteAddress',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the protocol.',
            name: 'applicationProtocol',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The version of the protocol.',
            name: 'applicationProtocolVersion',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'Installed modifier protocols, for example, compression.',
            name: 'modifierProtocols',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.cluster.readReplicaToggle': {
        name: 'dbms.cluster.readReplicaToggle',
        description:
          'The toggle can pause or resume read replica (deprecated in favor of dbms.cluster.secondaryReplicationDisable)',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.cluster.readReplicaToggle(databaseName :: STRING, pause :: BOOLEAN) :: (state :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The name of the database to toggle the secondary replication process for.',
            name: 'databaseName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'Whether or not to enable/disable the secondary replication process.',
            name: 'pause',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'The current state of the secondary replication process.',
            name: 'state',
            type: 'STRING',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy: 'dbms.cluster.secondaryReplicationDisable',
        option: {
          deprecated: true,
        },
      },
      'dbms.cluster.reallocateDatabase': {
        name: 'dbms.cluster.reallocateDatabase',
        description: 'Reallocate a specific database.',
        mode: 'WRITE',
        worksOnSystem: true,
        signature:
          'dbms.cluster.reallocateDatabase(database :: STRING, dryrun = false :: BOOLEAN) :: (database :: STRING, fromServerName :: STRING, fromServerId :: STRING, toServerName :: STRING, toServerId :: STRING, mode :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the database to reallocate.',
            name: 'database',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=false, type=BOOLEAN}',
            description: 'Set to `true` to dry run the procedure.',
            name: 'dryrun',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the database.',
            name: 'database',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the server.',
            name: 'fromServerName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The id of the server.',
            name: 'fromServerId',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the server.',
            name: 'toServerName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The id of the server.',
            name: 'toServerId',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The mode in which the database is hosted.',
            name: 'mode',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.cluster.reallocateNumberOfDatabases': {
        name: 'dbms.cluster.reallocateNumberOfDatabases',
        description: 'Reallocate a specified number of user databases.',
        mode: 'WRITE',
        worksOnSystem: true,
        signature:
          'dbms.cluster.reallocateNumberOfDatabases(number :: INTEGER, dryrun = false :: BOOLEAN) :: (database :: STRING, fromServerName :: STRING, fromServerId :: STRING, toServerName :: STRING, toServerId :: STRING, mode :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The number of databases to reallocate.',
            name: 'number',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=false, type=BOOLEAN}',
            description: 'Set to `true` to dry run the procedure.',
            name: 'dryrun',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the database.',
            name: 'database',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the server.',
            name: 'fromServerName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The id of the server.',
            name: 'fromServerId',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the server.',
            name: 'toServerName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The id of the server.',
            name: 'toServerId',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The mode in which the database is hosted.',
            name: 'mode',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.cluster.recreateDatabase': {
        name: 'dbms.cluster.recreateDatabase',
        description:
          'Recreates a database while keeping all RBAC settings. The procedure initiates a process, which when complete, will have synchronized and started all database instances within the cluster.',
        mode: 'WRITE',
        worksOnSystem: true,
        signature:
          'dbms.cluster.recreateDatabase(database :: STRING, options = {} :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'database :: STRING',
            name: 'database',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'options = {} :: MAP',
            name: 'options',
            type: 'MAP',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.cluster.routing.getRoutingTable': {
        name: 'dbms.cluster.routing.getRoutingTable',
        description:
          "Returns the advertised bolt capable endpoints for a given database, divided by each endpoint's capabilities. For example, an endpoint may serve read queries, write queries, and/or future `getRoutingTable` requests.",
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.cluster.routing.getRoutingTable(context :: MAP, database = null :: STRING) :: (ttl :: INTEGER, servers :: LIST<MAP>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'Routing context, for example, routing policies.',
            name: 'context',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=STRING}',
            description: 'The database to get a routing table for.',
            name: 'database',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'Time to live (in seconds) for the routing table.',
            name: 'ttl',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'Servers grouped by whether they are readers, writers, or routers.',
            name: 'servers',
            type: 'LIST<MAP>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy: 'dbms.routing.getRoutingTable',
        option: {
          deprecated: true,
        },
      },
      'dbms.cluster.secondaryReplicationDisable': {
        name: 'dbms.cluster.secondaryReplicationDisable',
        description:
          'The toggle can pause or resume the secondary replication process.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.cluster.secondaryReplicationDisable(databaseName :: STRING, pause :: BOOLEAN) :: (state :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The name of the database to toggle the secondary replication process for.',
            name: 'databaseName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'Whether or not to enable/disable the secondary replication process.',
            name: 'pause',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'The current state of the secondary replication process.',
            name: 'state',
            type: 'STRING',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.cluster.setAutomaticallyEnableFreeServers': {
        name: 'dbms.cluster.setAutomaticallyEnableFreeServers',
        description:
          'With this method you can set whether free servers are automatically enabled.',
        mode: 'WRITE',
        worksOnSystem: true,
        signature:
          'dbms.cluster.setAutomaticallyEnableFreeServers(autoEnable :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'Whether or not to automatically enable free servers.',
            name: 'autoEnable',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.cluster.showParallelDiscoveryState': {
        name: 'dbms.cluster.showParallelDiscoveryState',
        description:
          'Compare the states of Discovery service V1 and Discovery service V2.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.cluster.showParallelDiscoveryState() :: (mode :: STRING, stateComparison :: STRING, v1ServerCount :: STRING, v2ServerCount :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'mode :: STRING',
            name: 'mode',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'stateComparison :: STRING',
            name: 'stateComparison',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'v1ServerCount :: STRING',
            name: 'v1ServerCount',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'v2ServerCount :: STRING',
            name: 'v2ServerCount',
            type: 'STRING',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.cluster.statusCheck': {
        name: 'dbms.cluster.statusCheck',
        description: 'Performs a rafted status check.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.cluster.statusCheck(databases :: LIST<STRING>, timeoutMilliseconds = null :: INTEGER) :: (database :: STRING, serverId :: STRING, serverName :: STRING, address :: STRING, replicationSuccessful :: BOOLEAN, memberStatus :: STRING, recognisedLeader :: STRING, recognisedLeaderTerm :: INTEGER, requester :: BOOLEAN, error :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'databases :: LIST<STRING>',
            name: 'databases',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=INTEGER}',
            description: 'timeoutMilliseconds = null :: INTEGER',
            name: 'timeoutMilliseconds',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'database :: STRING',
            name: 'database',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'serverId :: STRING',
            name: 'serverId',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'serverName :: STRING',
            name: 'serverName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'address :: STRING',
            name: 'address',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'replicationSuccessful :: BOOLEAN',
            name: 'replicationSuccessful',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'memberStatus :: STRING',
            name: 'memberStatus',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'recognisedLeader :: STRING',
            name: 'recognisedLeader',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'recognisedLeaderTerm :: INTEGER',
            name: 'recognisedLeaderTerm',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'requester :: BOOLEAN',
            name: 'requester',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'error :: STRING',
            name: 'error',
            type: 'STRING',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.cluster.switchDiscoveryServiceVersion': {
        name: 'dbms.cluster.switchDiscoveryServiceVersion',
        description:
          'Allows you to select which discovery service should be started.\nPossible values are:\n\n* `V1_ONLY` -- it runs only discovery service v1.\n* `V1_OVER_V2` -- it runs both Discovery Service V1 and Discovery Service V2, where V1 is the main service and V2 runs in the background.\n* `V2_OVER_V1` -- it runs both Discovery Service V1 and Discovery Service V2, where V2 is the main service and V1 runs in the background.\n* `V2_ONLY` -- it runs only discovery service v2.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature: 'dbms.cluster.switchDiscoveryServiceVersion(mode :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'mode :: STRING',
            name: 'mode',
            type: 'STRING',
          },
        ],
        returnDescription: [],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.cluster.uncordonServer': {
        name: 'dbms.cluster.uncordonServer',
        description:
          "Remove the cordon on a server, returning it to 'enabled'.",
        mode: 'WRITE',
        worksOnSystem: true,
        signature: 'dbms.cluster.uncordonServer(server :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name or id of the server to be uncordoned.',
            name: 'server',
            type: 'STRING',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy: 'ENABLE SERVER',
        option: {
          deprecated: true,
        },
      },
      'dbms.components': {
        name: 'dbms.components',
        description: 'List DBMS components and their versions.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.components() :: (name :: STRING, versions :: LIST<STRING>, edition :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the component.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The installed versions of the component.',
            name: 'versions',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The Neo4j edition of the DBMS.',
            name: 'edition',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.info': {
        name: 'dbms.info',
        description: 'Provides information regarding the DBMS.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.info() :: (id :: STRING, name :: STRING, creationDate :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The id of the DBMS.',
            name: 'id',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the DBMS.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The creation date of the DBMS.',
            name: 'creationDate',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.killConnection': {
        name: 'dbms.killConnection',
        description: 'Kill network connection with the given connection id.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.killConnection(id :: STRING) :: (connectionId :: STRING, username :: STRING, message :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The id of the connection to kill.',
            name: 'id',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The id of the connection killed.',
            name: 'connectionId',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The username of the user of the killed connection.',
            name: 'username',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Details about the outcome of the procedure.',
            name: 'message',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.killConnections': {
        name: 'dbms.killConnections',
        description:
          'Kill all network connections with the given connection ids.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.killConnections(ids :: LIST<STRING>) :: (connectionId :: STRING, username :: STRING, message :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The ids of the connections to kill.',
            name: 'ids',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The id of the connection killed.',
            name: 'connectionId',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The username of the user of the killed connection.',
            name: 'username',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Details about the outcome of the procedure.',
            name: 'message',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.listActiveLocks': {
        name: 'dbms.listActiveLocks',
        description:
          'List the active lock requests granted for the transaction executing the query with the given query id.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.listActiveLocks(queryId :: STRING) :: (mode :: STRING, resourceType :: STRING, resourceId :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The id of the query to check for active locks on.',
            name: 'queryId',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: "The lock type: ('SHARED', 'EXCLUSIVE').",
            name: 'mode',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The locked resource.',
            name: 'resourceType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The id of the locked resource.',
            name: 'resourceId',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.listCapabilities': {
        name: 'dbms.listCapabilities',
        description: 'List capabilities.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.listCapabilities() :: (name :: STRING, description :: STRING, value :: ANY)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'The full name of the capability (e.g. "dbms.instance.version").',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The capability description (e.g. "Neo4j version this instance is running").',
            name: 'description',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The capability object if it is present in the system (e.g. "5.20.0").',
            name: 'value',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.listConfig': {
        name: 'dbms.listConfig',
        description:
          'List the currently active configuration settings of Neo4j.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.listConfig(searchString =  :: STRING) :: (name :: STRING, description :: STRING, value :: STRING, dynamic :: BOOLEAN, defaultValue :: STRING, startupValue :: STRING, explicitlySet :: BOOLEAN, validValues :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              'A string that filters on the name of config settings.',
            name: 'searchString',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the setting.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The description of the setting.',
            name: 'description',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The set value of the setting.',
            name: 'value',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'If the setting can be set dynamically or not.',
            name: 'dynamic',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The default value of the setting.',
            name: 'defaultValue',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The value of the setting when the database started.',
            name: 'startupValue',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the setting was explicitly set.',
            name: 'explicitlySet',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'A description of the valid values.',
            name: 'validValues',
            type: 'STRING',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.listConnections': {
        name: 'dbms.listConnections',
        description:
          'List all accepted network connections at this instance that are visible to the user.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.listConnections() :: (connectionId :: STRING, connectTime :: STRING, connector :: STRING, username :: STRING, userAgent :: STRING, serverAddress :: STRING, clientAddress :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The id of the connection.',
            name: 'connectionId',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The time the connection was established, formatted according to the ISO-8601 Standard.',
            name: 'connectTime',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The protocol of the connector.',
            name: 'connector',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The username of the connected user.',
            name: 'username',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The active agent.',
            name: 'userAgent',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The address of the connected server.',
            name: 'serverAddress',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The address of the connected client.',
            name: 'clientAddress',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.listPools': {
        name: 'dbms.listPools',
        description:
          'List all memory pools, including sub pools, currently registered at this instance that are visible to the user.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.listPools() :: (pool :: STRING, databaseName :: STRING, heapMemoryUsed :: STRING, heapMemoryUsedBytes :: STRING, nativeMemoryUsed :: STRING, nativeMemoryUsedBytes :: STRING, freeMemory :: STRING, freeMemoryBytes :: STRING, totalPoolMemory :: STRING, totalPoolMemoryBytes :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the memory pool.',
            name: 'pool',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the database.',
            name: 'databaseName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The amount of heap memory used.',
            name: 'heapMemoryUsed',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The amount of heap memory used in bytes.',
            name: 'heapMemoryUsedBytes',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The amount of native memory used.',
            name: 'nativeMemoryUsed',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The amount of native memory used in bytes.',
            name: 'nativeMemoryUsedBytes',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The amount of free memory.',
            name: 'freeMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The amount of free memory in bytes.',
            name: 'freeMemoryBytes',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The total pool memory.',
            name: 'totalPoolMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The total pool memory in bytes.',
            name: 'totalPoolMemoryBytes',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.quarantineDatabase': {
        name: 'dbms.quarantineDatabase',
        description: 'Place a database into quarantine or remove it from it.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.quarantineDatabase(databaseName :: STRING, setStatus :: BOOLEAN, reason = No reason given :: STRING) :: (databaseName :: STRING, quarantined :: BOOLEAN, result :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The name of the database to set the quarantine status of.',
            name: 'databaseName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Whether or not to quarantine the database.',
            name: 'setStatus',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=No reason given, type=STRING}',
            description: 'The reason to quarantine the database.',
            name: 'reason',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the database.',
            name: 'databaseName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the database is quarantined.',
            name: 'quarantined',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'Details about the outcome of the procedure.',
            name: 'result',
            type: 'STRING',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.queryJmx': {
        name: 'dbms.queryJmx',
        description:
          'Query JMX management data by domain and name. For instance, use `*:*` to find all JMX beans.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.queryJmx(query :: STRING) :: (name :: STRING, description :: STRING, attributes :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              "A query for MBeans on this MBeanServer (e.g. '*:*,name=*neo4j*' for all metrics in neo4j database).",
            name: 'query',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the metric.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The description of the metric.',
            name: 'description',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'A collection with the attributes (values) of that metric.',
            name: 'attributes',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.routing.getRoutingTable': {
        name: 'dbms.routing.getRoutingTable',
        description:
          "Returns the advertised bolt capable endpoints for a given database, divided by each endpoint's capabilities. For example, an endpoint may serve read queries, write queries, and/or future `getRoutingTable` requests.",
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.routing.getRoutingTable(context :: MAP, database = null :: STRING) :: (ttl :: INTEGER, servers :: LIST<MAP>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'Routing context, for example, routing policies.',
            name: 'context',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=STRING}',
            description: 'The database to get a routing table for.',
            name: 'database',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'Time to live (in seconds) for the routing table.',
            name: 'ttl',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'Servers grouped by whether they are readers, writers, or routers.',
            name: 'servers',
            type: 'LIST<MAP>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.scheduler.failedJobs': {
        name: 'dbms.scheduler.failedJobs',
        description:
          'List failed job runs. There is a limit for amount of historical data.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.scheduler.failedJobs() :: (jobId :: STRING, group :: STRING, database :: STRING, submitter :: STRING, description :: STRING, type :: STRING, submitted :: STRING, executionStart :: STRING, failureTime :: STRING, failureDescription :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The id of the failed job.',
            name: 'jobId',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The category of the failed job.',
            name: 'group',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the database the job failed in.',
            name: 'database',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The creator of the failed job.',
            name: 'submitter',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Information about the failed job.',
            name: 'description',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The interval of the failed job.',
            name: 'type',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The submission time of the failed job.',
            name: 'submitted',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The start time of the failed job.',
            name: 'executionStart',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The failure time of the failed job.',
            name: 'failureTime',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Information about the job failure.',
            name: 'failureDescription',
            type: 'STRING',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.scheduler.groups': {
        name: 'dbms.scheduler.groups',
        description:
          'List the job groups that are active in the database internal job scheduler.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.scheduler.groups() :: (group :: STRING, threads :: INTEGER)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the job group.',
            name: 'group',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of active threads in that job group.',
            name: 'threads',
            type: 'INTEGER',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.scheduler.jobs': {
        name: 'dbms.scheduler.jobs',
        description:
          'List all jobs that are active in the database internal job scheduler.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.scheduler.jobs() :: (jobId :: STRING, group :: STRING, submitted :: STRING, database :: STRING, submitter :: STRING, description :: STRING, type :: STRING, scheduledAt :: STRING, period :: STRING, state :: STRING, currentStateDescription :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The id of the job.',
            name: 'jobId',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The category of the job.',
            name: 'group',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The submission time of the job.',
            name: 'submitted',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the database the job is in.',
            name: 'database',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The creator of the job.',
            name: 'submitter',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Information about the job.',
            name: 'description',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The interval of the job.',
            name: 'type',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The start time of the job.',
            name: 'scheduledAt',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The interval for jobs run periodically.',
            name: 'period',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: "The state of the job: ('EXECUTING', 'SCHEDULED').",
            name: 'state',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'A description of the job state.',
            name: 'currentStateDescription',
            type: 'STRING',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.security.clearAuthCache': {
        name: 'dbms.security.clearAuthCache',
        description: 'Clears authentication and authorization cache.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature: 'dbms.security.clearAuthCache()',
        argumentDescription: [],
        returnDescription: [],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.setConfigValue': {
        name: 'dbms.setConfigValue',
        description:
          'Update a given setting value. Passing an empty value results in removing the configured value and falling back to the default value. Changes do not persist and are lost if the server is restarted. In a clustered environment, `dbms.setConfigValue` affects only the cluster member it is run against.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature: 'dbms.setConfigValue(setting :: STRING, value :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the setting.',
            name: 'setting',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The value to set.',
            name: 'value',
            type: 'STRING',
          },
        ],
        returnDescription: [],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.setDatabaseAllocator': {
        name: 'dbms.setDatabaseAllocator',
        description:
          'With this method you can set the allocator that is responsible for selecting servers for hosting databases.',
        mode: 'WRITE',
        worksOnSystem: true,
        signature: 'dbms.setDatabaseAllocator(allocator :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the allocator.',
            name: 'allocator',
            type: 'STRING',
          },
        ],
        returnDescription: [],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy: 'Functionality is removed',
        option: {
          deprecated: true,
        },
      },
      'dbms.setDefaultAllocationNumbers': {
        name: 'dbms.setDefaultAllocationNumbers',
        description:
          'With this method you can set the default number of primaries and secondaries.',
        mode: 'WRITE',
        worksOnSystem: true,
        signature:
          'dbms.setDefaultAllocationNumbers(primaries :: INTEGER, secondaries :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The default number of primaries.',
            name: 'primaries',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The default number of secondaries.',
            name: 'secondaries',
            type: 'INTEGER',
          },
        ],
        returnDescription: [],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.setDefaultDatabase': {
        name: 'dbms.setDefaultDatabase',
        description:
          'Change the default database to the provided value. The database must exist and the old default database must be stopped.',
        mode: 'WRITE',
        worksOnSystem: true,
        signature:
          'dbms.setDefaultDatabase(databaseName :: STRING) :: (result :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the database.',
            name: 'databaseName',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'Information about the default database.',
            name: 'result',
            type: 'STRING',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.showCurrentUser': {
        name: 'dbms.showCurrentUser',
        description: 'Show the current user.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.showCurrentUser() :: (username :: STRING, roles :: LIST<STRING>, flags :: LIST<STRING>)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the current user.',
            name: 'username',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The roles assigned to the current user.',
            name: 'roles',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The flags set on the current user.',
            name: 'flags',
            type: 'LIST<STRING>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.showTopologyGraphConfig': {
        name: 'dbms.showTopologyGraphConfig',
        description:
          'With this method the configuration of the Topology Graph can be displayed.',
        mode: 'READ',
        worksOnSystem: true,
        signature:
          'dbms.showTopologyGraphConfig() :: (allocator :: STRING, defaultPrimariesCount :: INTEGER, defaultSecondariesCount :: INTEGER, defaultDatabase :: STRING, autoEnableFreeServers :: BOOLEAN)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the allocator.',
            name: 'allocator',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The default number of primaries.',
            name: 'defaultPrimariesCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The default number of secondaries.',
            name: 'defaultSecondariesCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The name of the default database.',
            name: 'defaultDatabase',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Whether or not to automatically enable free servers.',
            name: 'autoEnableFreeServers',
            type: 'BOOLEAN',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.upgrade': {
        name: 'dbms.upgrade',
        description:
          'Upgrade the system database schema if it is not the current schema.',
        mode: 'WRITE',
        worksOnSystem: true,
        signature:
          'dbms.upgrade() :: (status :: STRING, upgradeResult :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The upgrade status of the system database.',
            name: 'status',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Information about the upgrade outcome.',
            name: 'upgradeResult',
            type: 'STRING',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy: 'Automatic upgrade',
        option: {
          deprecated: true,
        },
      },
      'dbms.upgradeStatus': {
        name: 'dbms.upgradeStatus',
        description:
          'Report the current status of the system database sub-graph schema.',
        mode: 'READ',
        worksOnSystem: true,
        signature:
          'dbms.upgradeStatus() :: (status :: STRING, description :: STRING, resolution :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The upgrade status of the system database.',
            name: 'status',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Information describing the upgrade status.',
            name: 'description',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Information about the steps necessary to upgrade.',
            name: 'resolution',
            type: 'STRING',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy: 'Automatic upgrade',
        option: {
          deprecated: true,
        },
      },
      'gds.allShortestPaths.delta.mutate': {
        name: 'gds.allShortestPaths.delta.mutate',
        description:
          'The Delta Stepping shortest path algorithm computes the shortest (weighted) path between one node and any other node in the graph. The computation is run multi-threaded',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.allShortestPaths.delta.mutate(graphName :: STRING, configuration = {} :: MAP) :: (relationshipsWritten :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.allShortestPaths.delta.mutate.estimate': {
        name: 'gds.allShortestPaths.delta.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.allShortestPaths.delta.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.allShortestPaths.delta.stats': {
        name: 'gds.allShortestPaths.delta.stats',
        description:
          'The Delta Stepping shortest path algorithm computes the shortest (weighted) path between one node and any other node in the graph. The computation is run multi-threaded',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.allShortestPaths.delta.stats(graphName :: STRING, configuration = {} :: MAP) :: (postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.allShortestPaths.delta.stats.estimate': {
        name: 'gds.allShortestPaths.delta.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.allShortestPaths.delta.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.allShortestPaths.delta.stream': {
        name: 'gds.allShortestPaths.delta.stream',
        description:
          'The Delta Stepping shortest path algorithm computes the shortest (weighted) path between one node and any other node in the graph. The computation is run multi-threaded',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.allShortestPaths.delta.stream(graphName :: STRING, configuration = {} :: MAP) :: (index :: INTEGER, sourceNode :: INTEGER, targetNode :: INTEGER, totalCost :: FLOAT, nodeIds :: LIST<INTEGER>, costs :: LIST<FLOAT>, path :: PATH)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'index :: INTEGER',
            name: 'index',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'sourceNode :: INTEGER',
            name: 'sourceNode',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'targetNode :: INTEGER',
            name: 'targetNode',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'totalCost :: FLOAT',
            name: 'totalCost',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'nodeIds :: LIST<INTEGER>',
            name: 'nodeIds',
            type: 'LIST<INTEGER>',
          },
          {
            isDeprecated: false,
            description: 'costs :: LIST<FLOAT>',
            name: 'costs',
            type: 'LIST<FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'path :: PATH',
            name: 'path',
            type: 'PATH',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.allShortestPaths.delta.stream.estimate': {
        name: 'gds.allShortestPaths.delta.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.allShortestPaths.delta.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.allShortestPaths.delta.write': {
        name: 'gds.allShortestPaths.delta.write',
        description:
          'The Delta Stepping shortest path algorithm computes the shortest (weighted) path between one node and any other node in the graph. The computation is run multi-threaded',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.allShortestPaths.delta.write(graphName :: STRING, configuration = {} :: MAP) :: (relationshipsWritten :: INTEGER, writeMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.allShortestPaths.delta.write.estimate': {
        name: 'gds.allShortestPaths.delta.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.allShortestPaths.delta.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.allShortestPaths.dijkstra.mutate': {
        name: 'gds.allShortestPaths.dijkstra.mutate',
        description:
          'The Dijkstra shortest path algorithm computes the shortest (weighted) path between one node and any other node in the graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.allShortestPaths.dijkstra.mutate(graphName :: STRING, configuration = {} :: MAP) :: (relationshipsWritten :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.allShortestPaths.dijkstra.mutate.estimate': {
        name: 'gds.allShortestPaths.dijkstra.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.allShortestPaths.dijkstra.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.allShortestPaths.dijkstra.stream': {
        name: 'gds.allShortestPaths.dijkstra.stream',
        description:
          'The Dijkstra shortest path algorithm computes the shortest (weighted) path between one node and any other node in the graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.allShortestPaths.dijkstra.stream(graphName :: STRING, configuration = {} :: MAP) :: (index :: INTEGER, sourceNode :: INTEGER, targetNode :: INTEGER, totalCost :: FLOAT, nodeIds :: LIST<INTEGER>, costs :: LIST<FLOAT>, path :: PATH)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'index :: INTEGER',
            name: 'index',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'sourceNode :: INTEGER',
            name: 'sourceNode',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'targetNode :: INTEGER',
            name: 'targetNode',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'totalCost :: FLOAT',
            name: 'totalCost',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'nodeIds :: LIST<INTEGER>',
            name: 'nodeIds',
            type: 'LIST<INTEGER>',
          },
          {
            isDeprecated: false,
            description: 'costs :: LIST<FLOAT>',
            name: 'costs',
            type: 'LIST<FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'path :: PATH',
            name: 'path',
            type: 'PATH',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.allShortestPaths.dijkstra.stream.estimate': {
        name: 'gds.allShortestPaths.dijkstra.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.allShortestPaths.dijkstra.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.allShortestPaths.dijkstra.write': {
        name: 'gds.allShortestPaths.dijkstra.write',
        description:
          'The Dijkstra shortest path algorithm computes the shortest (weighted) path between one node and any other node in the graph.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.allShortestPaths.dijkstra.write(graphName :: STRING, configuration = {} :: MAP) :: (relationshipsWritten :: INTEGER, writeMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.allShortestPaths.dijkstra.write.estimate': {
        name: 'gds.allShortestPaths.dijkstra.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.allShortestPaths.dijkstra.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.allShortestPaths.stream': {
        name: 'gds.allShortestPaths.stream',
        description:
          'The All Pairs Shortest Path (APSP) calculates the shortest (weighted) path between all pairs of nodes.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.allShortestPaths.stream(graphName :: STRING, configuration = {} :: MAP) :: (sourceNodeId :: INTEGER, targetNodeId :: INTEGER, distance :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'sourceNodeId :: INTEGER',
            name: 'sourceNodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'targetNodeId :: INTEGER',
            name: 'targetNodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'distance :: FLOAT',
            name: 'distance',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.alpha.ml.splitRelationships.mutate': {
        name: 'gds.alpha.ml.splitRelationships.mutate',
        description:
          'Splits a graph into holdout and remaining relationship types and adds them to the graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.alpha.ml.splitRelationships.mutate(graphName :: STRING, configuration = {} :: MAP) :: (preProcessingMillis :: INTEGER, computeMillis :: INTEGER, mutateMillis :: INTEGER, relationshipsWritten :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.alpha.pipeline.linkPrediction.addMLP': {
        name: 'gds.alpha.pipeline.linkPrediction.addMLP',
        description:
          'Add a multilayer perceptron configuration to the parameter space of the link prediction train pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.alpha.pipeline.linkPrediction.addMLP(pipelineName :: STRING, config = {} :: MAP) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureSteps :: LIST<MAP>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'config = {} :: MAP',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureSteps :: LIST<MAP>',
            name: 'featureSteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: ANY',
            name: 'parameterSpace',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.alpha.pipeline.linkPrediction.configureAutoTuning': {
        name: 'gds.alpha.pipeline.linkPrediction.configureAutoTuning',
        description:
          'Configures the auto-tuning of the link prediction pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.alpha.pipeline.linkPrediction.configureAutoTuning(pipelineName :: STRING, configuration :: MAP) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureSteps :: LIST<MAP>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureSteps :: LIST<MAP>',
            name: 'featureSteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: ANY',
            name: 'parameterSpace',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.alpha.pipeline.nodeClassification.addMLP': {
        name: 'gds.alpha.pipeline.nodeClassification.addMLP',
        description:
          'Add a multilayer perceptron configuration to the parameter space of the node classification train pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.alpha.pipeline.nodeClassification.addMLP(pipelineName :: STRING, config = {} :: MAP) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureProperties :: LIST<STRING>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'config = {} :: MAP',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureProperties :: LIST<STRING>',
            name: 'featureProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: MAP',
            name: 'parameterSpace',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.alpha.pipeline.nodeClassification.configureAutoTuning': {
        name: 'gds.alpha.pipeline.nodeClassification.configureAutoTuning',
        description:
          'Configures the auto-tuning of the node classification pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.alpha.pipeline.nodeClassification.configureAutoTuning(pipelineName :: STRING, configuration :: MAP) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureProperties :: LIST<STRING>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureProperties :: LIST<STRING>',
            name: 'featureProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: MAP',
            name: 'parameterSpace',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.alpha.pipeline.nodeRegression.addLinearRegression': {
        name: 'gds.alpha.pipeline.nodeRegression.addLinearRegression',
        description:
          'Add a linear regression model candidate to a node regression pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.alpha.pipeline.nodeRegression.addLinearRegression(pipelineName :: STRING, configuration = {} :: MAP) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureProperties :: LIST<STRING>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureProperties :: LIST<STRING>',
            name: 'featureProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: MAP',
            name: 'parameterSpace',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.alpha.pipeline.nodeRegression.addNodeProperty': {
        name: 'gds.alpha.pipeline.nodeRegression.addNodeProperty',
        description:
          'Add a node property step to an existing node regression training pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.alpha.pipeline.nodeRegression.addNodeProperty(pipelineName :: STRING, procedureName :: STRING, procedureConfiguration :: MAP) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureProperties :: LIST<STRING>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'procedureName :: STRING',
            name: 'procedureName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'procedureConfiguration :: MAP',
            name: 'procedureConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureProperties :: LIST<STRING>',
            name: 'featureProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: MAP',
            name: 'parameterSpace',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.alpha.pipeline.nodeRegression.addRandomForest': {
        name: 'gds.alpha.pipeline.nodeRegression.addRandomForest',
        description:
          'Add a random forest model candidate to a node regression pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.alpha.pipeline.nodeRegression.addRandomForest(pipelineName :: STRING, configuration :: MAP) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureProperties :: LIST<STRING>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureProperties :: LIST<STRING>',
            name: 'featureProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: MAP',
            name: 'parameterSpace',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.alpha.pipeline.nodeRegression.configureAutoTuning': {
        name: 'gds.alpha.pipeline.nodeRegression.configureAutoTuning',
        description:
          'Configures the auto-tuning of a node regression pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.alpha.pipeline.nodeRegression.configureAutoTuning(pipelineName :: STRING, configuration :: MAP) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureProperties :: LIST<STRING>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureProperties :: LIST<STRING>',
            name: 'featureProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: MAP',
            name: 'parameterSpace',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.alpha.pipeline.nodeRegression.configureSplit': {
        name: 'gds.alpha.pipeline.nodeRegression.configureSplit',
        description:
          'Configures the graph splitting of a node regression pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.alpha.pipeline.nodeRegression.configureSplit(pipelineName :: STRING, configuration :: MAP) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureProperties :: LIST<STRING>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureProperties :: LIST<STRING>',
            name: 'featureProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: MAP',
            name: 'parameterSpace',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.alpha.pipeline.nodeRegression.create': {
        name: 'gds.alpha.pipeline.nodeRegression.create',
        description:
          'Creates a node regression training pipeline in the pipeline catalog.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.alpha.pipeline.nodeRegression.create(pipelineName :: STRING) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureProperties :: LIST<STRING>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureProperties :: LIST<STRING>',
            name: 'featureProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: MAP',
            name: 'parameterSpace',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.alpha.pipeline.nodeRegression.predict.mutate': {
        name: 'gds.alpha.pipeline.nodeRegression.predict.mutate',
        description:
          'Predicts target node property using a previously trained `NodeRegression` model',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.alpha.pipeline.nodeRegression.predict.mutate(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.alpha.pipeline.nodeRegression.predict.stream': {
        name: 'gds.alpha.pipeline.nodeRegression.predict.stream',
        description:
          'Predicts target node property using a previously trained `NodeRegression` model',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.alpha.pipeline.nodeRegression.predict.stream(graphName :: STRING, configuration :: MAP) :: (nodeId :: INTEGER, predictedValue :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'predictedValue :: FLOAT',
            name: 'predictedValue',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.alpha.pipeline.nodeRegression.selectFeatures': {
        name: 'gds.alpha.pipeline.nodeRegression.selectFeatures',
        description:
          'Add one or several features to an existing node regression training pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.alpha.pipeline.nodeRegression.selectFeatures(pipelineName :: STRING, featureProperties :: ANY) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureProperties :: LIST<STRING>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'featureProperties :: ANY',
            name: 'featureProperties',
            type: 'ANY',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureProperties :: LIST<STRING>',
            name: 'featureProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: MAP',
            name: 'parameterSpace',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.alpha.pipeline.nodeRegression.train': {
        name: 'gds.alpha.pipeline.nodeRegression.train',
        description: 'Trains a node classification model based on a pipeline',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.alpha.pipeline.nodeRegression.train(graphName :: STRING, configuration = {} :: MAP) :: (modelSelectionStats :: MAP, trainMillis :: INTEGER, modelInfo :: MAP, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'modelSelectionStats :: MAP',
            name: 'modelSelectionStats',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'trainMillis :: INTEGER',
            name: 'trainMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'modelInfo :: MAP',
            name: 'modelInfo',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.articleRank.mutate': {
        name: 'gds.articleRank.mutate',
        description:
          'Article Rank is a variant of the Page Rank algorithm, which measures the transitive influence or connectivity of nodes.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.articleRank.mutate(graphName :: STRING, configuration = {} :: MAP) :: (mutateMillis :: INTEGER, nodePropertiesWritten :: INTEGER, ranIterations :: INTEGER, didConverge :: BOOLEAN, centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.articleRank.mutate.estimate': {
        name: 'gds.articleRank.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.articleRank.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.articleRank.stats': {
        name: 'gds.articleRank.stats',
        description:
          'Article Rank is a variant of the Page Rank algorithm, which measures the transitive influence or connectivity of nodes.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.articleRank.stats(graphName :: STRING, configuration = {} :: MAP) :: (ranIterations :: INTEGER, didConverge :: BOOLEAN, centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.articleRank.stats.estimate': {
        name: 'gds.articleRank.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.articleRank.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.articleRank.stream': {
        name: 'gds.articleRank.stream',
        description:
          'Article Rank is a variant of the Page Rank algorithm, which measures the transitive influence or connectivity of nodes.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.articleRank.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, score :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'score :: FLOAT',
            name: 'score',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.articleRank.stream.estimate': {
        name: 'gds.articleRank.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.articleRank.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.articleRank.write': {
        name: 'gds.articleRank.write',
        description:
          'Article Rank is a variant of the Page Rank algorithm, which measures the transitive influence or connectivity of nodes.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.articleRank.write(graphName :: STRING, configuration = {} :: MAP) :: (writeMillis :: INTEGER, nodePropertiesWritten :: INTEGER, ranIterations :: INTEGER, didConverge :: BOOLEAN, centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.articleRank.write.estimate': {
        name: 'gds.articleRank.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.articleRank.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.articulationPoints.mutate': {
        name: 'gds.articulationPoints.mutate',
        description:
          'Algorithm that finds nodes that disconnect components if removed',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.articulationPoints.mutate(graphName :: STRING, configuration = {} :: MAP) :: (articulationPointCount :: INTEGER, nodePropertiesWritten :: INTEGER, mutateMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'articulationPointCount :: INTEGER',
            name: 'articulationPointCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.articulationPoints.mutate.estimate': {
        name: 'gds.articulationPoints.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.articulationPoints.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.articulationPoints.stats': {
        name: 'gds.articulationPoints.stats',
        description:
          'Algorithm that finds nodes that disconnect components if removed',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.articulationPoints.stats(graphName :: STRING, configuration = {} :: MAP) :: (articulationPointCount :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'articulationPointCount :: INTEGER',
            name: 'articulationPointCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.articulationPoints.stats.estimate': {
        name: 'gds.articulationPoints.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.articulationPoints.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.articulationPoints.stream': {
        name: 'gds.articulationPoints.stream',
        description:
          'Algorithm that finds nodes that disconnect components if removed',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.articulationPoints.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.articulationPoints.stream.estimate': {
        name: 'gds.articulationPoints.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.articulationPoints.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.articulationPoints.write': {
        name: 'gds.articulationPoints.write',
        description:
          'Algorithm that finds nodes that disconnect components if removed',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.articulationPoints.write(graphName :: STRING, configuration = {} :: MAP) :: (articulationPointCount :: INTEGER, nodePropertiesWritten :: INTEGER, writeMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'articulationPointCount :: INTEGER',
            name: 'articulationPointCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.articulationPoints.write.estimate': {
        name: 'gds.articulationPoints.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.articulationPoints.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.backup': {
        name: 'gds.backup',
        description: 'The back-up procedure persists graphs and models to disk',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.backup(configuration = {} :: MAP) :: (graphName :: STRING, modelName :: STRING, backupTime :: ZONED DATETIME, exportPath :: STRING, exportMillis :: INTEGER, status :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'modelName :: STRING',
            name: 'modelName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'backupTime :: ZONED DATETIME',
            name: 'backupTime',
            type: 'ZONED DATETIME',
          },
          {
            isDeprecated: false,
            description: 'exportPath :: STRING',
            name: 'exportPath',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'exportMillis :: INTEGER',
            name: 'exportMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'status :: STRING',
            name: 'status',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.bellmanFord.mutate': {
        name: 'gds.bellmanFord.mutate',
        description:
          'The Bellman-Ford shortest path algorithm computes the shortest (weighted) path between one node and any other node in the graph without negative cycles.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.bellmanFord.mutate(graphName :: STRING, configuration = {} :: MAP) :: (containsNegativeCycle :: BOOLEAN, relationshipsWritten :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'containsNegativeCycle :: BOOLEAN',
            name: 'containsNegativeCycle',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.bellmanFord.mutate.estimate': {
        name: 'gds.bellmanFord.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.bellmanFord.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.bellmanFord.stats': {
        name: 'gds.bellmanFord.stats',
        description:
          'The Bellman-Ford shortest path algorithm computes the shortest (weighted) path between one node and any other node in the graph without negative cycles.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.bellmanFord.stats(graphName :: STRING, configuration = {} :: MAP) :: (containsNegativeCycle :: BOOLEAN, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'containsNegativeCycle :: BOOLEAN',
            name: 'containsNegativeCycle',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.bellmanFord.stats.estimate': {
        name: 'gds.bellmanFord.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.bellmanFord.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.bellmanFord.stream': {
        name: 'gds.bellmanFord.stream',
        description:
          'The Bellman-Ford shortest path algorithm computes the shortest (weighted) path between one node and any other node in the graph without negative cycles.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.bellmanFord.stream(graphName :: STRING, configuration = {} :: MAP) :: (index :: INTEGER, sourceNode :: INTEGER, targetNode :: INTEGER, totalCost :: FLOAT, nodeIds :: LIST<INTEGER>, costs :: LIST<FLOAT>, route :: PATH, isNegativeCycle :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'index :: INTEGER',
            name: 'index',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'sourceNode :: INTEGER',
            name: 'sourceNode',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'targetNode :: INTEGER',
            name: 'targetNode',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'totalCost :: FLOAT',
            name: 'totalCost',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'nodeIds :: LIST<INTEGER>',
            name: 'nodeIds',
            type: 'LIST<INTEGER>',
          },
          {
            isDeprecated: false,
            description: 'costs :: LIST<FLOAT>',
            name: 'costs',
            type: 'LIST<FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'route :: PATH',
            name: 'route',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            description: 'isNegativeCycle :: BOOLEAN',
            name: 'isNegativeCycle',
            type: 'BOOLEAN',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.bellmanFord.stream.estimate': {
        name: 'gds.bellmanFord.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.bellmanFord.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.bellmanFord.write': {
        name: 'gds.bellmanFord.write',
        description:
          'The Bellman-Ford shortest path algorithm computes the shortest (weighted) path between one node and any other node in the graph without negative cycles.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.bellmanFord.write(graphName :: STRING, configuration = {} :: MAP) :: (relationshipsWritten :: INTEGER, containsNegativeCycle :: BOOLEAN, writeMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'containsNegativeCycle :: BOOLEAN',
            name: 'containsNegativeCycle',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.bellmanFord.write.estimate': {
        name: 'gds.bellmanFord.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.bellmanFord.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.graphSage.mutate': {
        name: 'gds.beta.graphSage.mutate',
        description:
          'The GraphSage algorithm inductively computes embeddings for nodes based on a their features and neighborhoods.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.graphSage.mutate(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, mutateMillis :: INTEGER, nodeCount :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.graphSage.mutate.estimate': {
        name: 'gds.beta.graphSage.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.graphSage.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.graphSage.stream': {
        name: 'gds.beta.graphSage.stream',
        description:
          'The GraphSage algorithm inductively computes embeddings for nodes based on a their features and neighborhoods.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.graphSage.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, embedding :: LIST<FLOAT>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'embedding :: LIST<FLOAT>',
            name: 'embedding',
            type: 'LIST<FLOAT>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.graphSage.stream.estimate': {
        name: 'gds.beta.graphSage.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.graphSage.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.graphSage.train': {
        name: 'gds.beta.graphSage.train',
        description:
          'The GraphSage algorithm inductively computes embeddings for nodes based on a their features and neighborhoods.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.graphSage.train(graphName :: STRING, configuration = {} :: MAP) :: (modelInfo :: MAP, configuration :: MAP, trainMillis :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'modelInfo :: MAP',
            name: 'modelInfo',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'trainMillis :: INTEGER',
            name: 'trainMillis',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.graphSage.train.estimate': {
        name: 'gds.beta.graphSage.train.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.graphSage.train.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.graphSage.write': {
        name: 'gds.beta.graphSage.write',
        description:
          'The GraphSage algorithm inductively computes embeddings for nodes based on a their features and neighborhoods.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.beta.graphSage.write(graphName :: STRING, configuration = {} :: MAP) :: (nodeCount :: INTEGER, nodePropertiesWritten :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, writeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.graphSage.write.estimate': {
        name: 'gds.beta.graphSage.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.graphSage.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.linkPrediction.addFeature': {
        name: 'gds.beta.pipeline.linkPrediction.addFeature',
        description:
          'Add a feature step to an existing link prediction pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.linkPrediction.addFeature(pipelineName :: STRING, featureType :: STRING, configuration :: MAP) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureSteps :: LIST<MAP>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'featureType :: STRING',
            name: 'featureType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureSteps :: LIST<MAP>',
            name: 'featureSteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: ANY',
            name: 'parameterSpace',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.linkPrediction.addLogisticRegression': {
        name: 'gds.beta.pipeline.linkPrediction.addLogisticRegression',
        description:
          'Add a logistic regression configuration to the parameter space of the link prediction train pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.linkPrediction.addLogisticRegression(pipelineName :: STRING, config = {} :: MAP) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureSteps :: LIST<MAP>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'config = {} :: MAP',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureSteps :: LIST<MAP>',
            name: 'featureSteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: ANY',
            name: 'parameterSpace',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.linkPrediction.addNodeProperty': {
        name: 'gds.beta.pipeline.linkPrediction.addNodeProperty',
        description:
          'Add a node property step to an existing link prediction pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.linkPrediction.addNodeProperty(pipelineName :: STRING, procedureName :: STRING, procedureConfiguration :: MAP) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureSteps :: LIST<MAP>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'procedureName :: STRING',
            name: 'procedureName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'procedureConfiguration :: MAP',
            name: 'procedureConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureSteps :: LIST<MAP>',
            name: 'featureSteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: ANY',
            name: 'parameterSpace',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.linkPrediction.addRandomForest': {
        name: 'gds.beta.pipeline.linkPrediction.addRandomForest',
        description:
          'Add a random forest configuration to the parameter space of the link prediction train pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.linkPrediction.addRandomForest(pipelineName :: STRING, config :: MAP) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureSteps :: LIST<MAP>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'config :: MAP',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureSteps :: LIST<MAP>',
            name: 'featureSteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: ANY',
            name: 'parameterSpace',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.linkPrediction.configureSplit': {
        name: 'gds.beta.pipeline.linkPrediction.configureSplit',
        description: 'Configures the split of the link prediction pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.linkPrediction.configureSplit(pipelineName :: STRING, configuration :: MAP) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureSteps :: LIST<MAP>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureSteps :: LIST<MAP>',
            name: 'featureSteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: ANY',
            name: 'parameterSpace',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.linkPrediction.create': {
        name: 'gds.beta.pipeline.linkPrediction.create',
        description:
          'Creates a link prediction pipeline in the pipeline catalog.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.linkPrediction.create(pipelineName :: STRING) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureSteps :: LIST<MAP>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureSteps :: LIST<MAP>',
            name: 'featureSteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: ANY',
            name: 'parameterSpace',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.linkPrediction.predict.mutate': {
        name: 'gds.beta.pipeline.linkPrediction.predict.mutate',
        description:
          'Predicts relationships for all non-connected node pairs based on a previously trained LinkPrediction model.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.linkPrediction.predict.mutate(graphName :: STRING, configuration = {} :: MAP) :: (relationshipsWritten :: INTEGER, probabilityDistribution :: MAP, samplingStats :: MAP, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'probabilityDistribution :: MAP',
            name: 'probabilityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'samplingStats :: MAP',
            name: 'samplingStats',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.linkPrediction.predict.mutate.estimate': {
        name: 'gds.beta.pipeline.linkPrediction.predict.mutate.estimate',
        description:
          'Estimates memory for predicting relationships for all non-connected node pairs based on a previously trained LinkPrediction model',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.linkPrediction.predict.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.linkPrediction.predict.stream': {
        name: 'gds.beta.pipeline.linkPrediction.predict.stream',
        description:
          'Predicts relationships for all non-connected node pairs based on a previously trained LinkPrediction model.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.linkPrediction.predict.stream(graphName :: STRING, configuration = {} :: MAP) :: (node1 :: INTEGER, node2 :: INTEGER, probability :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'node1 :: INTEGER',
            name: 'node1',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'node2 :: INTEGER',
            name: 'node2',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'probability :: FLOAT',
            name: 'probability',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.linkPrediction.predict.stream.estimate': {
        name: 'gds.beta.pipeline.linkPrediction.predict.stream.estimate',
        description:
          'Estimates memory for predicting relationships for all non-connected node pairs based on a previously trained LinkPrediction model',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.linkPrediction.predict.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.linkPrediction.train': {
        name: 'gds.beta.pipeline.linkPrediction.train',
        description: 'Trains a link prediction model based on a pipeline',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.linkPrediction.train(graphName :: STRING, configuration = {} :: MAP) :: (modelSelectionStats :: MAP, trainMillis :: INTEGER, modelInfo :: MAP, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'modelSelectionStats :: MAP',
            name: 'modelSelectionStats',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'trainMillis :: INTEGER',
            name: 'trainMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'modelInfo :: MAP',
            name: 'modelInfo',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.linkPrediction.train.estimate': {
        name: 'gds.beta.pipeline.linkPrediction.train.estimate',
        description: 'Estimates memory for applying a linkPrediction model',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.linkPrediction.train.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.nodeClassification.addLogisticRegression': {
        name: 'gds.beta.pipeline.nodeClassification.addLogisticRegression',
        description:
          'Add a logistic regression configuration to the parameter space of the node classification train pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.nodeClassification.addLogisticRegression(pipelineName :: STRING, config = {} :: MAP) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureProperties :: LIST<STRING>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'config = {} :: MAP',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureProperties :: LIST<STRING>',
            name: 'featureProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: MAP',
            name: 'parameterSpace',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.nodeClassification.addNodeProperty': {
        name: 'gds.beta.pipeline.nodeClassification.addNodeProperty',
        description:
          'Add a node property step to an existing node classification training pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.nodeClassification.addNodeProperty(pipelineName :: STRING, procedureName :: STRING, procedureConfiguration :: MAP) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureProperties :: LIST<STRING>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'procedureName :: STRING',
            name: 'procedureName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'procedureConfiguration :: MAP',
            name: 'procedureConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureProperties :: LIST<STRING>',
            name: 'featureProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: MAP',
            name: 'parameterSpace',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.nodeClassification.addRandomForest': {
        name: 'gds.beta.pipeline.nodeClassification.addRandomForest',
        description:
          'Add a random forest configuration to the parameter space of the node classification train pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.nodeClassification.addRandomForest(pipelineName :: STRING, config :: MAP) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureProperties :: LIST<STRING>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'config :: MAP',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureProperties :: LIST<STRING>',
            name: 'featureProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: MAP',
            name: 'parameterSpace',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.nodeClassification.configureSplit': {
        name: 'gds.beta.pipeline.nodeClassification.configureSplit',
        description:
          'Configures the split of the node classification training pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.nodeClassification.configureSplit(pipelineName :: STRING, configuration :: MAP) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureProperties :: LIST<STRING>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureProperties :: LIST<STRING>',
            name: 'featureProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: MAP',
            name: 'parameterSpace',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.nodeClassification.create': {
        name: 'gds.beta.pipeline.nodeClassification.create',
        description:
          'Creates a node classification training pipeline in the pipeline catalog.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.nodeClassification.create(pipelineName :: STRING) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureProperties :: LIST<STRING>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureProperties :: LIST<STRING>',
            name: 'featureProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: MAP',
            name: 'parameterSpace',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.nodeClassification.predict.mutate': {
        name: 'gds.beta.pipeline.nodeClassification.predict.mutate',
        description:
          'Predicts classes for all nodes based on a previously trained pipeline model',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.nodeClassification.predict.mutate(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.nodeClassification.predict.mutate.estimate': {
        name: 'gds.beta.pipeline.nodeClassification.predict.mutate.estimate',
        description:
          'Estimates memory for predicting classes for all nodes based on a previously trained pipeline model',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.nodeClassification.predict.mutate.estimate(graphName :: ANY, configuration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: ANY',
            name: 'graphName',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.nodeClassification.predict.stream': {
        name: 'gds.beta.pipeline.nodeClassification.predict.stream',
        description:
          'Predicts classes for all nodes based on a previously trained pipeline model',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.nodeClassification.predict.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, predictedClass :: INTEGER, predictedProbabilities :: LIST<FLOAT>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'predictedClass :: INTEGER',
            name: 'predictedClass',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'predictedProbabilities :: LIST<FLOAT>',
            name: 'predictedProbabilities',
            type: 'LIST<FLOAT>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.nodeClassification.predict.stream.estimate': {
        name: 'gds.beta.pipeline.nodeClassification.predict.stream.estimate',
        description:
          'Estimates memory for predicting classes for all nodes based on a previously trained pipeline model',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.nodeClassification.predict.stream.estimate(graphName :: ANY, configuration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: ANY',
            name: 'graphName',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.nodeClassification.predict.write': {
        name: 'gds.beta.pipeline.nodeClassification.predict.write',
        description:
          'Predicts classes for all nodes based on a previously trained pipeline model',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.nodeClassification.predict.write(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, writeMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.nodeClassification.predict.write.estimate': {
        name: 'gds.beta.pipeline.nodeClassification.predict.write.estimate',
        description:
          'Estimates memory for predicting classes for all nodes based on a previously trained pipeline model',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.nodeClassification.predict.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.nodeClassification.selectFeatures': {
        name: 'gds.beta.pipeline.nodeClassification.selectFeatures',
        description:
          'Add one or several features to an existing node classification training pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.nodeClassification.selectFeatures(pipelineName :: STRING, nodeProperties :: ANY) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureProperties :: LIST<STRING>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeProperties :: ANY',
            name: 'nodeProperties',
            type: 'ANY',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureProperties :: LIST<STRING>',
            name: 'featureProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: MAP',
            name: 'parameterSpace',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.nodeClassification.train': {
        name: 'gds.beta.pipeline.nodeClassification.train',
        description: 'Trains a node classification model based on a pipeline',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.nodeClassification.train(graphName :: STRING, configuration = {} :: MAP) :: (modelSelectionStats :: MAP, trainMillis :: INTEGER, modelInfo :: MAP, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'modelSelectionStats :: MAP',
            name: 'modelSelectionStats',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'trainMillis :: INTEGER',
            name: 'trainMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'modelInfo :: MAP',
            name: 'modelInfo',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.nodeClassification.train.estimate': {
        name: 'gds.beta.pipeline.nodeClassification.train.estimate',
        description:
          'Estimates memory for training a node classification model based on a pipeline',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.nodeClassification.train.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.betweenness.mutate': {
        name: 'gds.betweenness.mutate',
        description:
          'Betweenness centrality measures the relative information flow that passes through a node.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.betweenness.mutate(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, mutateMillis :: INTEGER, centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.betweenness.mutate.estimate': {
        name: 'gds.betweenness.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.betweenness.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.betweenness.stats': {
        name: 'gds.betweenness.stats',
        description:
          'Betweenness centrality measures the relative information flow that passes through a node.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.betweenness.stats(graphName :: STRING, configuration = {} :: MAP) :: (centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.betweenness.stats.estimate': {
        name: 'gds.betweenness.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.betweenness.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.betweenness.stream': {
        name: 'gds.betweenness.stream',
        description:
          'Betweenness centrality measures the relative information flow that passes through a node.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.betweenness.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, score :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'score :: FLOAT',
            name: 'score',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.betweenness.stream.estimate': {
        name: 'gds.betweenness.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.betweenness.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.betweenness.write': {
        name: 'gds.betweenness.write',
        description:
          'Betweenness centrality measures the relative information flow that passes through a node.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.betweenness.write(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, writeMillis :: INTEGER, centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.betweenness.write.estimate': {
        name: 'gds.betweenness.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.betweenness.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.bfs.mutate': {
        name: 'gds.bfs.mutate',
        description:
          'BFS is a traversal algorithm, which explores all of the neighbor nodes at the present depth prior to moving on to the nodes at the next depth level.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.bfs.mutate(graphName :: STRING, configuration = {} :: MAP) :: (relationshipsWritten :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.bfs.mutate.estimate': {
        name: 'gds.bfs.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.bfs.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.bfs.stats': {
        name: 'gds.bfs.stats',
        description:
          'BFS is a traversal algorithm, which explores all of the neighbor nodes at the present depth prior to moving on to the nodes at the next depth level.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.bfs.stats(graphName :: STRING, configuration = {} :: MAP) :: (postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.bfs.stats.estimate': {
        name: 'gds.bfs.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.bfs.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.bfs.stream': {
        name: 'gds.bfs.stream',
        description:
          'BFS is a traversal algorithm, which explores all of the neighbor nodes at the present depth prior to moving on to the nodes at the next depth level.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.bfs.stream(graphName :: STRING, configuration = {} :: MAP) :: (sourceNode :: INTEGER, nodeIds :: LIST<INTEGER>, path :: PATH)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'sourceNode :: INTEGER',
            name: 'sourceNode',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeIds :: LIST<INTEGER>',
            name: 'nodeIds',
            type: 'LIST<INTEGER>',
          },
          {
            isDeprecated: false,
            description: 'path :: PATH',
            name: 'path',
            type: 'PATH',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.bfs.stream.estimate': {
        name: 'gds.bfs.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.bfs.stream.estimate(graphName :: ANY, configuration = {} :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: ANY',
            name: 'graphName',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.bridges.stream': {
        name: 'gds.bridges.stream',
        description:
          'Bridges find relationships that disconnect  components if removed',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.bridges.stream(graphName :: STRING, configuration = {} :: MAP) :: (from :: INTEGER, to :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'from :: INTEGER',
            name: 'from',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'to :: INTEGER',
            name: 'to',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.bridges.stream.estimate': {
        name: 'gds.bridges.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.bridges.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.closeness.harmonic.mutate': {
        name: 'gds.closeness.harmonic.mutate',
        description:
          'Harmonic centrality is a way of detecting nodes that are able to spread information very efficiently through a graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.closeness.harmonic.mutate(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, mutateMillis :: INTEGER, centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.closeness.harmonic.stats': {
        name: 'gds.closeness.harmonic.stats',
        description:
          'Harmonic centrality is a way of detecting nodes that are able to spread information very efficiently through a graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.closeness.harmonic.stats(graphName :: STRING, configuration = {} :: MAP) :: (centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.closeness.harmonic.stream': {
        name: 'gds.closeness.harmonic.stream',
        description:
          'Harmonic centrality is a way of detecting nodes that are able to spread information very efficiently through a graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.closeness.harmonic.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, score :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'score :: FLOAT',
            name: 'score',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.closeness.harmonic.write': {
        name: 'gds.closeness.harmonic.write',
        description:
          'Harmonic centrality is a way of detecting nodes that are able to spread information very efficiently through a graph.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.closeness.harmonic.write(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, writeMillis :: INTEGER, centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.closeness.mutate': {
        name: 'gds.closeness.mutate',
        description:
          'Closeness centrality is a way of detecting nodes that are able to spread information very efficiently through a graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.closeness.mutate(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, mutateMillis :: INTEGER, centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.closeness.stats': {
        name: 'gds.closeness.stats',
        description:
          'Closeness centrality is a way of detecting nodes that are able to spread information very efficiently through a graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.closeness.stats(graphName :: STRING, configuration = {} :: MAP) :: (centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.closeness.stream': {
        name: 'gds.closeness.stream',
        description:
          'Closeness centrality is a way of detecting nodes that are able to spread information very efficiently through a graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.closeness.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, score :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'score :: FLOAT',
            name: 'score',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.closeness.write': {
        name: 'gds.closeness.write',
        description:
          'Closeness centrality is a way of detecting nodes that are able to spread information very efficiently through a graph.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.closeness.write(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, writeMillis :: INTEGER, centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.collapsePath.mutate': {
        name: 'gds.collapsePath.mutate',
        description:
          'Collapse Path algorithm is a traversal algorithm capable of creating relationships between the start and end nodes of a traversal',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.collapsePath.mutate(graphName :: STRING, configuration = {} :: MAP) :: (preProcessingMillis :: INTEGER, computeMillis :: INTEGER, mutateMillis :: INTEGER, relationshipsWritten :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.conductance.stream': {
        name: 'gds.conductance.stream',
        description:
          'Evaluates a division of nodes into communities based on the proportion of relationships that cross community boundaries.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.conductance.stream(graphName :: STRING, configuration = {} :: MAP) :: (community :: INTEGER, conductance :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'community :: INTEGER',
            name: 'community',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'conductance :: FLOAT',
            name: 'conductance',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.config.defaults.list': {
        name: 'gds.config.defaults.list',
        description:
          'List defaults; global by default, but also optionally for a specific user and/ or key',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'gds.config.defaults.list(parameters = {} :: MAP) :: (key :: STRING, value :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'parameters = {} :: MAP',
            name: 'parameters',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'key :: STRING',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'value :: ANY',
            name: 'value',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.config.defaults.set': {
        name: 'gds.config.defaults.set',
        description:
          'Set a default; global by, default, but also optionally for a specific user',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'gds.config.defaults.set(key :: STRING, value :: ANY, username = d81eb72e-c499-4f78-90c7-0c76123606a2 :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'key :: STRING',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'value :: ANY',
            name: 'value',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=d81eb72e-c499-4f78-90c7-0c76123606a2, type=STRING}',
            description:
              'username = d81eb72e-c499-4f78-90c7-0c76123606a2 :: STRING',
            name: 'username',
            type: 'STRING',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.config.limits.list': {
        name: 'gds.config.limits.list',
        description:
          'List limits; global by default, but also optionally for a specific user and/ or key',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'gds.config.limits.list(parameters = {} :: MAP) :: (key :: STRING, value :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'parameters = {} :: MAP',
            name: 'parameters',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'key :: STRING',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'value :: ANY',
            name: 'value',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.config.limits.set': {
        name: 'gds.config.limits.set',
        description:
          'Set a limit; global by, default, but also optionally for a specific user',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'gds.config.limits.set(key :: STRING, value :: ANY, username = d81eb72e-c499-4f78-90c7-0c76123606a2 :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'key :: STRING',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'value :: ANY',
            name: 'value',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=d81eb72e-c499-4f78-90c7-0c76123606a2, type=STRING}',
            description:
              'username = d81eb72e-c499-4f78-90c7-0c76123606a2 :: STRING',
            name: 'username',
            type: 'STRING',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.dag.longestPath.stream': {
        name: 'gds.dag.longestPath.stream',
        description: 'Returns the longest paths ending in given target nodes',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.dag.longestPath.stream(graphName :: STRING, configuration = {} :: MAP) :: (index :: INTEGER, sourceNode :: INTEGER, targetNode :: INTEGER, totalCost :: FLOAT, nodeIds :: LIST<INTEGER>, costs :: LIST<FLOAT>, path :: PATH)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'index :: INTEGER',
            name: 'index',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'sourceNode :: INTEGER',
            name: 'sourceNode',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'targetNode :: INTEGER',
            name: 'targetNode',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'totalCost :: FLOAT',
            name: 'totalCost',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'nodeIds :: LIST<INTEGER>',
            name: 'nodeIds',
            type: 'LIST<INTEGER>',
          },
          {
            isDeprecated: false,
            description: 'costs :: LIST<FLOAT>',
            name: 'costs',
            type: 'LIST<FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'path :: PATH',
            name: 'path',
            type: 'PATH',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.dag.topologicalSort.stream': {
        name: 'gds.dag.topologicalSort.stream',
        description:
          'Returns all the nodes in the graph that are not part of a cycle or depend on a cycle, sorted in a topological order',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.dag.topologicalSort.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, maxDistanceFromSource :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'maxDistanceFromSource :: FLOAT',
            name: 'maxDistanceFromSource',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.debug.arrow': {
        name: 'gds.debug.arrow',
        description:
          'Returns details about the status of the GDS Flight server',
        mode: 'DEFAULT',
        worksOnSystem: true,
        signature:
          'gds.debug.arrow() :: (running :: BOOLEAN, enabled :: BOOLEAN, versions :: LIST<STRING>, listenAddress :: STRING, advertisedListenAddress :: STRING, serverLocation :: STRING, batchSize :: INTEGER, abortionTimeout :: DURATION)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'running :: BOOLEAN',
            name: 'running',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'enabled :: BOOLEAN',
            name: 'enabled',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'versions :: LIST<STRING>',
            name: 'versions',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'listenAddress :: STRING',
            name: 'listenAddress',
            type: 'STRING',
          },
          {
            isDeprecated: true,
            description: 'advertisedListenAddress :: STRING',
            name: 'advertisedListenAddress',
            type: 'STRING',
          },
          {
            isDeprecated: true,
            description: 'serverLocation :: STRING',
            name: 'serverLocation',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'batchSize :: INTEGER',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'abortionTimeout :: DURATION',
            name: 'abortionTimeout',
            type: 'DURATION',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.debug.sysInfo': {
        name: 'gds.debug.sysInfo',
        description: 'Returns details about the status of the system',
        mode: 'DEFAULT',
        worksOnSystem: true,
        signature: 'gds.debug.sysInfo() :: (key :: STRING, value :: ANY)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'key :: STRING',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'value :: ANY',
            name: 'value',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.degree.mutate': {
        name: 'gds.degree.mutate',
        description:
          'Degree centrality measures the number of incoming and outgoing relationships from a node.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.degree.mutate(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, mutateMillis :: INTEGER, centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.degree.mutate.estimate': {
        name: 'gds.degree.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.degree.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.degree.stats': {
        name: 'gds.degree.stats',
        description:
          'Degree centrality measures the number of incoming and outgoing relationships from a node.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.degree.stats(graphName :: STRING, configuration = {} :: MAP) :: (centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.degree.stats.estimate': {
        name: 'gds.degree.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.degree.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.degree.stream': {
        name: 'gds.degree.stream',
        description:
          'Degree centrality measures the number of incoming and outgoing relationships from a node.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.degree.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, score :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'score :: FLOAT',
            name: 'score',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.degree.stream.estimate': {
        name: 'gds.degree.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.degree.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.degree.write': {
        name: 'gds.degree.write',
        description:
          'Degree centrality measures the number of incoming and outgoing relationships from a node.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.degree.write(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, writeMillis :: INTEGER, centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.degree.write.estimate': {
        name: 'gds.degree.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.degree.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.dfs.mutate': {
        name: 'gds.dfs.mutate',
        description:
          'Depth-first search (DFS) is an algorithm for traversing or searching tree or graph data structures. The algorithm starts at the root node (selecting some arbitrary node as the root node in the case of a graph) and explores as far as possible along each branch before backtracking.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.dfs.mutate(graphName :: STRING, configuration = {} :: MAP) :: (relationshipsWritten :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.dfs.mutate.estimate': {
        name: 'gds.dfs.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.dfs.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.dfs.stream': {
        name: 'gds.dfs.stream',
        description:
          'Depth-first search (DFS) is an algorithm for traversing or searching tree or graph data structures. The algorithm starts at the root node (selecting some arbitrary node as the root node in the case of a graph) and explores as far as possible along each branch before backtracking.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.dfs.stream(graphName :: STRING, configuration = {} :: MAP) :: (sourceNode :: INTEGER, nodeIds :: LIST<INTEGER>, path :: PATH)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'sourceNode :: INTEGER',
            name: 'sourceNode',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeIds :: LIST<INTEGER>',
            name: 'nodeIds',
            type: 'LIST<INTEGER>',
          },
          {
            isDeprecated: false,
            description: 'path :: PATH',
            name: 'path',
            type: 'PATH',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.dfs.stream.estimate': {
        name: 'gds.dfs.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.dfs.stream.estimate(graphName :: ANY, configuration = {} :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: ANY',
            name: 'graphName',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.eigenvector.mutate': {
        name: 'gds.eigenvector.mutate',
        description:
          'Eigenvector Centrality is an algorithm that measures the transitive influence or connectivity of nodes.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.eigenvector.mutate(graphName :: STRING, configuration = {} :: MAP) :: (mutateMillis :: INTEGER, nodePropertiesWritten :: INTEGER, ranIterations :: INTEGER, didConverge :: BOOLEAN, centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.eigenvector.mutate.estimate': {
        name: 'gds.eigenvector.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.eigenvector.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.eigenvector.stats': {
        name: 'gds.eigenvector.stats',
        description:
          'Eigenvector Centrality is an algorithm that measures the transitive influence or connectivity of nodes.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.eigenvector.stats(graphName :: STRING, configuration = {} :: MAP) :: (ranIterations :: INTEGER, didConverge :: BOOLEAN, centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.eigenvector.stats.estimate': {
        name: 'gds.eigenvector.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.eigenvector.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.eigenvector.stream': {
        name: 'gds.eigenvector.stream',
        description:
          'Eigenvector Centrality is an algorithm that measures the transitive influence or connectivity of nodes.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.eigenvector.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, score :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'score :: FLOAT',
            name: 'score',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.eigenvector.stream.estimate': {
        name: 'gds.eigenvector.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.eigenvector.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.eigenvector.write': {
        name: 'gds.eigenvector.write',
        description:
          'Eigenvector Centrality is an algorithm that measures the transitive influence or connectivity of nodes.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.eigenvector.write(graphName :: STRING, configuration = {} :: MAP) :: (writeMillis :: INTEGER, nodePropertiesWritten :: INTEGER, ranIterations :: INTEGER, didConverge :: BOOLEAN, centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.eigenvector.write.estimate': {
        name: 'gds.eigenvector.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.eigenvector.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.fastRP.mutate': {
        name: 'gds.fastRP.mutate',
        description:
          'Random Projection produces node embeddings via the fastrp algorithm',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.fastRP.mutate(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, mutateMillis :: INTEGER, nodeCount :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.fastRP.mutate.estimate': {
        name: 'gds.fastRP.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.fastRP.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.fastRP.stats': {
        name: 'gds.fastRP.stats',
        description:
          'Random Projection produces node embeddings via the fastrp algorithm',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.fastRP.stats(graphName :: STRING, configuration = {} :: MAP) :: (nodeCount :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.fastRP.stats.estimate': {
        name: 'gds.fastRP.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.fastRP.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.fastRP.stream': {
        name: 'gds.fastRP.stream',
        description:
          'Random Projection produces node embeddings via the fastrp algorithm',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.fastRP.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, embedding :: LIST<FLOAT>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'embedding :: LIST<FLOAT>',
            name: 'embedding',
            type: 'LIST<FLOAT>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.fastRP.stream.estimate': {
        name: 'gds.fastRP.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.fastRP.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.fastRP.write': {
        name: 'gds.fastRP.write',
        description:
          'Random Projection produces node embeddings via the fastrp algorithm',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.fastRP.write(graphName :: STRING, configuration = {} :: MAP) :: (nodeCount :: INTEGER, nodePropertiesWritten :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, writeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.fastRP.write.estimate': {
        name: 'gds.fastRP.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.fastRP.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.drop': {
        name: 'gds.graph.drop',
        description:
          'Drops a named graph from the catalog and frees up the resources it occupies.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.drop(graphName :: ANY, failIfMissing = true :: BOOLEAN, dbName =  :: STRING, username =  :: STRING) :: (graphName :: STRING, database :: STRING, databaseLocation :: STRING, memoryUsage :: STRING, sizeInBytes :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, configuration :: MAP, density :: FLOAT, creationTime :: ZONED DATETIME, modificationTime :: ZONED DATETIME, schema :: MAP, schemaWithOrientation :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: ANY',
            name: 'graphName',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=true, type=BOOLEAN}',
            description: 'failIfMissing = true :: BOOLEAN',
            name: 'failIfMissing',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'dbName =  :: STRING',
            name: 'dbName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'username =  :: STRING',
            name: 'username',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'database :: STRING',
            name: 'database',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'databaseLocation :: STRING',
            name: 'databaseLocation',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'memoryUsage :: STRING',
            name: 'memoryUsage',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'sizeInBytes :: INTEGER',
            name: 'sizeInBytes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'density :: FLOAT',
            name: 'density',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'creationTime :: ZONED DATETIME',
            name: 'creationTime',
            type: 'ZONED DATETIME',
          },
          {
            isDeprecated: false,
            description: 'modificationTime :: ZONED DATETIME',
            name: 'modificationTime',
            type: 'ZONED DATETIME',
          },
          {
            isDeprecated: true,
            description: 'schema :: MAP',
            name: 'schema',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'schemaWithOrientation :: MAP',
            name: 'schemaWithOrientation',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.exists': {
        name: 'gds.graph.exists',
        description: 'Checks if a graph exists in the catalog.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.exists(graphName :: STRING) :: (graphName :: STRING, exists :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'exists :: BOOLEAN',
            name: 'exists',
            type: 'BOOLEAN',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.export': {
        name: 'gds.graph.export',
        description: 'Exports a named graph into a new offline Neo4j database.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.export(graphName :: STRING, configuration = {} :: MAP) :: (dbName :: STRING, graphName :: STRING, nodeCount :: INTEGER, relationshipCount :: INTEGER, relationshipTypeCount :: INTEGER, nodePropertyCount :: INTEGER, relationshipPropertyCount :: INTEGER, writeMillis :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'dbName :: STRING',
            name: 'dbName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipTypeCount :: INTEGER',
            name: 'relationshipTypeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertyCount :: INTEGER',
            name: 'nodePropertyCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipPropertyCount :: INTEGER',
            name: 'relationshipPropertyCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.export.csv': {
        name: 'gds.graph.export.csv',
        description: 'Exports a named graph to CSV files.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.export.csv(graphName :: STRING, configuration = {} :: MAP) :: (exportName :: STRING, graphName :: STRING, nodeCount :: INTEGER, relationshipCount :: INTEGER, relationshipTypeCount :: INTEGER, nodePropertyCount :: INTEGER, relationshipPropertyCount :: INTEGER, writeMillis :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'exportName :: STRING',
            name: 'exportName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipTypeCount :: INTEGER',
            name: 'relationshipTypeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertyCount :: INTEGER',
            name: 'nodePropertyCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipPropertyCount :: INTEGER',
            name: 'relationshipPropertyCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.export.csv.estimate': {
        name: 'gds.graph.export.csv.estimate',
        description:
          'Estimate the required disk space for exporting a named graph to CSV files.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.export.csv.estimate(graphName :: STRING, configuration = {} :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.filter': {
        name: 'gds.graph.filter',
        description:
          'Applies node and relationship predicates on a graph and stores the result as a new graph in the catalog.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.filter(graphName :: STRING, fromGraphName :: STRING, nodeFilter :: STRING, relationshipFilter :: STRING, configuration = {} :: MAP) :: (fromGraphName :: STRING, nodeFilter :: STRING, relationshipFilter :: STRING, graphName :: STRING, nodeCount :: INTEGER, relationshipCount :: INTEGER, projectMillis :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'fromGraphName :: STRING',
            name: 'fromGraphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeFilter :: STRING',
            name: 'nodeFilter',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'relationshipFilter :: STRING',
            name: 'relationshipFilter',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'fromGraphName :: STRING',
            name: 'fromGraphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeFilter :: STRING',
            name: 'nodeFilter',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'relationshipFilter :: STRING',
            name: 'relationshipFilter',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'projectMillis :: INTEGER',
            name: 'projectMillis',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.generate': {
        name: 'gds.graph.generate',
        description:
          'Computes a random graph, which will be stored in the graph catalog.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.generate(graphName :: STRING, nodeCount :: INTEGER, averageDegree :: INTEGER, configuration = {} :: MAP) :: (name :: STRING, nodes :: INTEGER, relationships :: INTEGER, generateMillis :: INTEGER, relationshipSeed :: INTEGER, averageDegree :: FLOAT, relationshipDistribution :: ANY, relationshipProperty :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'averageDegree :: INTEGER',
            name: 'averageDegree',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodes :: INTEGER',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationships :: INTEGER',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'generateMillis :: INTEGER',
            name: 'generateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipSeed :: INTEGER',
            name: 'relationshipSeed',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'averageDegree :: FLOAT',
            name: 'averageDegree',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'relationshipDistribution :: ANY',
            name: 'relationshipDistribution',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'relationshipProperty :: ANY',
            name: 'relationshipProperty',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.graphProperty.drop': {
        name: 'gds.graph.graphProperty.drop',
        description: 'Removes a graph property from a projected graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.graphProperty.drop(graphName :: STRING, graphProperty :: STRING, configuration = {} :: MAP) :: (graphName :: STRING, graphProperty :: STRING, propertiesRemoved :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'graphProperty :: STRING',
            name: 'graphProperty',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'graphProperty :: STRING',
            name: 'graphProperty',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'propertiesRemoved :: INTEGER',
            name: 'propertiesRemoved',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.graphProperty.stream': {
        name: 'gds.graph.graphProperty.stream',
        description: 'Streams the given graph property.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.graphProperty.stream(graphName :: STRING, graphProperty :: STRING, configuration = {} :: MAP) :: (propertyValue :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'graphProperty :: STRING',
            name: 'graphProperty',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'propertyValue :: ANY',
            name: 'propertyValue',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.list': {
        name: 'gds.graph.list',
        description:
          'Lists information about named graphs stored in the catalog.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.list(graphName = d9b6394a-9482-4929-adab-f97df578a6c6 :: STRING) :: (degreeDistribution :: MAP, graphName :: STRING, database :: STRING, databaseLocation :: STRING, memoryUsage :: STRING, sizeInBytes :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, configuration :: MAP, density :: FLOAT, creationTime :: ZONED DATETIME, modificationTime :: ZONED DATETIME, schema :: MAP, schemaWithOrientation :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=d9b6394a-9482-4929-adab-f97df578a6c6, type=STRING}',
            description:
              'graphName = d9b6394a-9482-4929-adab-f97df578a6c6 :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'degreeDistribution :: MAP',
            name: 'degreeDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'database :: STRING',
            name: 'database',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'databaseLocation :: STRING',
            name: 'databaseLocation',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'memoryUsage :: STRING',
            name: 'memoryUsage',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'sizeInBytes :: INTEGER',
            name: 'sizeInBytes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'density :: FLOAT',
            name: 'density',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'creationTime :: ZONED DATETIME',
            name: 'creationTime',
            type: 'ZONED DATETIME',
          },
          {
            isDeprecated: false,
            description: 'modificationTime :: ZONED DATETIME',
            name: 'modificationTime',
            type: 'ZONED DATETIME',
          },
          {
            isDeprecated: true,
            description: 'schema :: MAP',
            name: 'schema',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'schemaWithOrientation :: MAP',
            name: 'schemaWithOrientation',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.nodeLabel.mutate': {
        name: 'gds.graph.nodeLabel.mutate',
        description: 'Mutates the in-memory graph with the given node Label.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.nodeLabel.mutate(graphName :: STRING, nodeLabel :: STRING, configuration :: MAP) :: (mutateMillis :: INTEGER, graphName :: STRING, nodeLabel :: STRING, nodeLabelsWritten :: INTEGER, nodeCount :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeLabel :: STRING',
            name: 'nodeLabel',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeLabel :: STRING',
            name: 'nodeLabel',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeLabelsWritten :: INTEGER',
            name: 'nodeLabelsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.nodeLabel.write': {
        name: 'gds.graph.nodeLabel.write',
        description: 'Writes the given node Label to an online Neo4j database.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.graph.nodeLabel.write(graphName :: STRING, nodeLabel :: STRING, configuration :: MAP) :: (writeMillis :: INTEGER, graphName :: STRING, nodeLabel :: STRING, nodeCount :: INTEGER, nodeLabelsWritten :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeLabel :: STRING',
            name: 'nodeLabel',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeLabel :: STRING',
            name: 'nodeLabel',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeLabelsWritten :: INTEGER',
            name: 'nodeLabelsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.nodeProperties.drop': {
        name: 'gds.graph.nodeProperties.drop',
        description: 'Removes node properties from a projected graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.nodeProperties.drop(graphName :: STRING, nodeProperties :: ANY, configuration = {} :: MAP) :: (graphName :: STRING, nodeProperties :: LIST<STRING>, propertiesRemoved :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeProperties :: ANY',
            name: 'nodeProperties',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeProperties :: LIST<STRING>',
            name: 'nodeProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'propertiesRemoved :: INTEGER',
            name: 'propertiesRemoved',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.nodeProperties.stream': {
        name: 'gds.graph.nodeProperties.stream',
        description: 'Streams the given node properties.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.nodeProperties.stream(graphName :: STRING, nodeProperties :: ANY, nodeLabels = [*] :: ANY, configuration = {} :: MAP) :: (nodeId :: INTEGER, nodeProperty :: STRING, propertyValue :: ANY, nodeLabels :: LIST<STRING>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeProperties :: ANY',
            name: 'nodeProperties',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[*], type=ANY}',
            description: 'nodeLabels = [*] :: ANY',
            name: 'nodeLabels',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeProperty :: STRING',
            name: 'nodeProperty',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'propertyValue :: ANY',
            name: 'propertyValue',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'nodeLabels :: LIST<STRING>',
            name: 'nodeLabels',
            type: 'LIST<STRING>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.nodeProperties.write': {
        name: 'gds.graph.nodeProperties.write',
        description:
          'Writes the given node properties to an online Neo4j database.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.graph.nodeProperties.write(graphName :: STRING, nodeProperties :: ANY, nodeLabels = [*] :: ANY, configuration = {} :: MAP) :: (writeMillis :: INTEGER, graphName :: STRING, nodeProperties :: LIST<STRING>, propertiesWritten :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeProperties :: ANY',
            name: 'nodeProperties',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[*], type=ANY}',
            description: 'nodeLabels = [*] :: ANY',
            name: 'nodeLabels',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeProperties :: LIST<STRING>',
            name: 'nodeProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'propertiesWritten :: INTEGER',
            name: 'propertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.nodeProperty.stream': {
        name: 'gds.graph.nodeProperty.stream',
        description: 'Streams the given node property.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.nodeProperty.stream(graphName :: STRING, nodeProperties :: STRING, nodeLabels = [*] :: ANY, configuration = {} :: MAP) :: (nodeId :: INTEGER, propertyValue :: ANY, nodeLabels :: LIST<STRING>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeProperties :: STRING',
            name: 'nodeProperties',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[*], type=ANY}',
            description: 'nodeLabels = [*] :: ANY',
            name: 'nodeLabels',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'propertyValue :: ANY',
            name: 'propertyValue',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'nodeLabels :: LIST<STRING>',
            name: 'nodeLabels',
            type: 'LIST<STRING>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.project': {
        name: 'gds.graph.project',
        description:
          'Creates a named graph in the catalog for use by algorithms.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.project(graphName :: STRING, nodeProjection :: ANY, relationshipProjection :: ANY, configuration = {} :: MAP) :: (nodeProjection :: MAP, relationshipProjection :: MAP, graphName :: STRING, nodeCount :: INTEGER, relationshipCount :: INTEGER, projectMillis :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeProjection :: ANY',
            name: 'nodeProjection',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'relationshipProjection :: ANY',
            name: 'relationshipProjection',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeProjection :: MAP',
            name: 'nodeProjection',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'relationshipProjection :: MAP',
            name: 'relationshipProjection',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'projectMillis :: INTEGER',
            name: 'projectMillis',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.project.cypher': {
        name: 'gds.graph.project.cypher',
        description:
          'Creates a named graph in the catalog for use by algorithms.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.project.cypher(graphName :: STRING, nodeQuery :: STRING, relationshipQuery :: STRING, configuration = {} :: MAP) :: (nodeQuery :: STRING, relationshipQuery :: STRING, graphName :: STRING, nodeCount :: INTEGER, relationshipCount :: INTEGER, projectMillis :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeQuery :: STRING',
            name: 'nodeQuery',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'relationshipQuery :: STRING',
            name: 'relationshipQuery',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeQuery :: STRING',
            name: 'nodeQuery',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'relationshipQuery :: STRING',
            name: 'relationshipQuery',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'projectMillis :: INTEGER',
            name: 'projectMillis',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy:
          'gds.graph.project Cypher projection as an aggregation function',
        option: {
          deprecated: true,
        },
      },
      'gds.graph.project.cypher.estimate': {
        name: 'gds.graph.project.cypher.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.project.cypher.estimate(nodeQuery :: STRING, relationshipQuery :: STRING, configuration = {} :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'nodeQuery :: STRING',
            name: 'nodeQuery',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'relationshipQuery :: STRING',
            name: 'relationshipQuery',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy:
          'gds.graph.project Cypher projection as an aggregation function',
        option: {
          deprecated: true,
        },
      },
      'gds.graph.project.estimate': {
        name: 'gds.graph.project.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.project.estimate(nodeProjection :: ANY, relationshipProjection :: ANY, configuration = {} :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'nodeProjection :: ANY',
            name: 'nodeProjection',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'relationshipProjection :: ANY',
            name: 'relationshipProjection',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.relationship.write': {
        name: 'gds.graph.relationship.write',
        description:
          'Writes the given relationship and an optional relationship property to an online Neo4j database.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.graph.relationship.write(graphName :: STRING, relationshipType :: STRING, relationshipProperty =  :: STRING, configuration = {} :: MAP) :: (writeMillis :: INTEGER, graphName :: STRING, relationshipType :: STRING, relationshipProperty :: STRING, relationshipsWritten :: INTEGER, propertiesWritten :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'relationshipType :: STRING',
            name: 'relationshipType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'relationshipProperty =  :: STRING',
            name: 'relationshipProperty',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'relationshipType :: STRING',
            name: 'relationshipType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'relationshipProperty :: STRING',
            name: 'relationshipProperty',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'propertiesWritten :: INTEGER',
            name: 'propertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.relationshipProperties.stream': {
        name: 'gds.graph.relationshipProperties.stream',
        description: 'Streams the given relationship properties.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.relationshipProperties.stream(graphName :: STRING, relationshipProperties :: LIST<STRING>, relationshipTypes = [*] :: ANY, configuration = {} :: MAP) :: (sourceNodeId :: INTEGER, targetNodeId :: INTEGER, relationshipType :: STRING, relationshipProperty :: STRING, propertyValue :: INTEGER | FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'relationshipProperties :: LIST<STRING>',
            name: 'relationshipProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[*], type=ANY}',
            description: 'relationshipTypes = [*] :: ANY',
            name: 'relationshipTypes',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'sourceNodeId :: INTEGER',
            name: 'sourceNodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'targetNodeId :: INTEGER',
            name: 'targetNodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipType :: STRING',
            name: 'relationshipType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'relationshipProperty :: STRING',
            name: 'relationshipProperty',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'propertyValue :: INTEGER | FLOAT',
            name: 'propertyValue',
            type: 'INTEGER | FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.relationshipProperties.write': {
        name: 'gds.graph.relationshipProperties.write',
        description:
          'Writes the given relationship and a list of relationship properties to an online Neo4j database.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.graph.relationshipProperties.write(graphName :: STRING, relationshipType :: STRING, relationshipProperties :: LIST<STRING>, configuration :: MAP) :: (writeMillis :: INTEGER, graphName :: STRING, relationshipType :: STRING, relationshipProperties :: LIST<STRING>, relationshipsWritten :: INTEGER, propertiesWritten :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'relationshipType :: STRING',
            name: 'relationshipType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'relationshipProperties :: LIST<STRING>',
            name: 'relationshipProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'relationshipType :: STRING',
            name: 'relationshipType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'relationshipProperties :: LIST<STRING>',
            name: 'relationshipProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'propertiesWritten :: INTEGER',
            name: 'propertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.relationshipProperty.stream': {
        name: 'gds.graph.relationshipProperty.stream',
        description: 'Streams the given relationship property.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.relationshipProperty.stream(graphName :: STRING, relationshipProperty :: STRING, relationshipTypes = [*] :: ANY, configuration = {} :: MAP) :: (sourceNodeId :: INTEGER, targetNodeId :: INTEGER, relationshipType :: STRING, propertyValue :: INTEGER | FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'relationshipProperty :: STRING',
            name: 'relationshipProperty',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[*], type=ANY}',
            description: 'relationshipTypes = [*] :: ANY',
            name: 'relationshipTypes',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'sourceNodeId :: INTEGER',
            name: 'sourceNodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'targetNodeId :: INTEGER',
            name: 'targetNodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipType :: STRING',
            name: 'relationshipType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'propertyValue :: INTEGER | FLOAT',
            name: 'propertyValue',
            type: 'INTEGER | FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.relationships.drop': {
        name: 'gds.graph.relationships.drop',
        description:
          'Delete the relationship type for a given graph stored in the graph-catalog.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.relationships.drop(graphName :: STRING, relationshipType :: STRING) :: (graphName :: STRING, relationshipType :: STRING, deletedRelationships :: INTEGER, deletedProperties :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'relationshipType :: STRING',
            name: 'relationshipType',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'relationshipType :: STRING',
            name: 'relationshipType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'deletedRelationships :: INTEGER',
            name: 'deletedRelationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'deletedProperties :: MAP',
            name: 'deletedProperties',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.relationships.stream': {
        name: 'gds.graph.relationships.stream',
        description: 'Streams the given relationship source/target pairs',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.relationships.stream(graphName :: STRING, relationshipTypes = [*] :: ANY, configuration = {} :: MAP) :: (sourceNodeId :: INTEGER, targetNodeId :: INTEGER, relationshipType :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[*], type=ANY}',
            description: 'relationshipTypes = [*] :: ANY',
            name: 'relationshipTypes',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'sourceNodeId :: INTEGER',
            name: 'sourceNodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'targetNodeId :: INTEGER',
            name: 'targetNodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipType :: STRING',
            name: 'relationshipType',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.relationships.toUndirected': {
        name: 'gds.graph.relationships.toUndirected',
        description:
          'The ToUndirected procedure converts directed relationships to undirected relationships',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.relationships.toUndirected(graphName :: STRING, configuration = {} :: MAP) :: (inputRelationships :: INTEGER, relationshipsWritten :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'inputRelationships :: INTEGER',
            name: 'inputRelationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.relationships.toUndirected.estimate': {
        name: 'gds.graph.relationships.toUndirected.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.relationships.toUndirected.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.sample.cnarw': {
        name: 'gds.graph.sample.cnarw',
        description:
          'Constructs a random subgraph based on common neighbour aware random walks',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.sample.cnarw(graphName :: STRING, fromGraphName :: STRING, configuration = {} :: MAP) :: (fromGraphName :: STRING, startNodeCount :: INTEGER, graphName :: STRING, nodeCount :: INTEGER, relationshipCount :: INTEGER, projectMillis :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'fromGraphName :: STRING',
            name: 'fromGraphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'fromGraphName :: STRING',
            name: 'fromGraphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'startNodeCount :: INTEGER',
            name: 'startNodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'projectMillis :: INTEGER',
            name: 'projectMillis',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.sample.cnarw.estimate': {
        name: 'gds.graph.sample.cnarw.estimate',
        description:
          'Estimate memory requirements for sampling graph using CNARW algorithm',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.sample.cnarw.estimate(fromGraphName :: STRING, configuration = {} :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'fromGraphName :: STRING',
            name: 'fromGraphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.sample.rwr': {
        name: 'gds.graph.sample.rwr',
        description:
          'Constructs a random subgraph based on random walks with restarts',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.sample.rwr(graphName :: STRING, fromGraphName :: STRING, configuration = {} :: MAP) :: (fromGraphName :: STRING, startNodeCount :: INTEGER, graphName :: STRING, nodeCount :: INTEGER, relationshipCount :: INTEGER, projectMillis :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'fromGraphName :: STRING',
            name: 'fromGraphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'fromGraphName :: STRING',
            name: 'fromGraphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'startNodeCount :: INTEGER',
            name: 'startNodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'projectMillis :: INTEGER',
            name: 'projectMillis',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.hashgnn.mutate': {
        name: 'gds.hashgnn.mutate',
        description:
          'HashGNN creates node embeddings by hashing and message passing.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.hashgnn.mutate(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, mutateMillis :: INTEGER, nodeCount :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.hashgnn.mutate.estimate': {
        name: 'gds.hashgnn.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.hashgnn.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.hashgnn.stream': {
        name: 'gds.hashgnn.stream',
        description:
          'HashGNN creates node embeddings by hashing and message passing.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.hashgnn.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, embedding :: LIST<FLOAT>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'embedding :: LIST<FLOAT>',
            name: 'embedding',
            type: 'LIST<FLOAT>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.hashgnn.stream.estimate': {
        name: 'gds.hashgnn.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.hashgnn.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.hits.mutate': {
        name: 'gds.hits.mutate',
        description:
          'Hyperlink-Induced Topic Search (HITS) is a link analysis algorithm that rates nodes',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.hits.mutate(graphName :: STRING, configuration = {} :: MAP) :: (ranIterations :: INTEGER, didConverge :: BOOLEAN, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, mutateMillis :: INTEGER, nodePropertiesWritten :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.hits.mutate.estimate': {
        name: 'gds.hits.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.hits.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.hits.stats': {
        name: 'gds.hits.stats',
        description:
          'Hyperlink-Induced Topic Search (HITS) is a link analysis algorithm that rates nodes',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.hits.stats(graphName :: STRING, configuration = {} :: MAP) :: (ranIterations :: INTEGER, didConverge :: BOOLEAN, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.hits.stats.estimate': {
        name: 'gds.hits.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.hits.stats.estimate(graphName :: ANY, configuration = {} :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: ANY',
            name: 'graphName',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.hits.stream': {
        name: 'gds.hits.stream',
        description:
          'Hyperlink-Induced Topic Search (HITS) is a link analysis algorithm that rates nodes',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.hits.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, values :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'values :: MAP',
            name: 'values',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.hits.stream.estimate': {
        name: 'gds.hits.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.hits.stream.estimate(graphName :: ANY, configuration = {} :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: ANY',
            name: 'graphName',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.hits.write': {
        name: 'gds.hits.write',
        description:
          'Hyperlink-Induced Topic Search (HITS) is a link analysis algorithm that rates nodes',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.hits.write(graphName :: STRING, configuration = {} :: MAP) :: (ranIterations :: INTEGER, didConverge :: BOOLEAN, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, writeMillis :: INTEGER, nodePropertiesWritten :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.hits.write.estimate': {
        name: 'gds.hits.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.hits.write.estimate(graphName :: ANY, configuration = {} :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: ANY',
            name: 'graphName',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.influenceMaximization.celf.mutate': {
        name: 'gds.influenceMaximization.celf.mutate',
        description:
          'The Cost Effective Lazy Forward (CELF) algorithm aims to find k nodes that maximize the expected spread of influence in the network.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.influenceMaximization.celf.mutate(graphName :: STRING, configuration = {} :: MAP) :: (mutateMillis :: INTEGER, nodePropertiesWritten :: INTEGER, computeMillis :: INTEGER, totalSpread :: FLOAT, nodeCount :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'totalSpread :: FLOAT',
            name: 'totalSpread',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.influenceMaximization.celf.mutate.estimate': {
        name: 'gds.influenceMaximization.celf.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.influenceMaximization.celf.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.influenceMaximization.celf.stats': {
        name: 'gds.influenceMaximization.celf.stats',
        description:
          'The Cost Effective Lazy Forward (CELF) algorithm aims to find k nodes that maximize the expected spread of influence in the network.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.influenceMaximization.celf.stats(graphName :: STRING, configuration = {} :: MAP) :: (computeMillis :: INTEGER, totalSpread :: FLOAT, nodeCount :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'totalSpread :: FLOAT',
            name: 'totalSpread',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.influenceMaximization.celf.stats.estimate': {
        name: 'gds.influenceMaximization.celf.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.influenceMaximization.celf.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.influenceMaximization.celf.stream': {
        name: 'gds.influenceMaximization.celf.stream',
        description:
          'The Cost Effective Lazy Forward (CELF) algorithm aims to find k nodes that maximize the expected spread of influence in the network.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.influenceMaximization.celf.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, spread :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'spread :: FLOAT',
            name: 'spread',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.influenceMaximization.celf.stream.estimate': {
        name: 'gds.influenceMaximization.celf.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.influenceMaximization.celf.stream.estimate(graphName :: ANY, configuration = {} :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: ANY',
            name: 'graphName',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.influenceMaximization.celf.write': {
        name: 'gds.influenceMaximization.celf.write',
        description:
          'The Cost Effective Lazy Forward (CELF) algorithm aims to find k nodes that maximize the expected spread of influence in the network.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.influenceMaximization.celf.write(graphName :: STRING, configuration = {} :: MAP) :: (writeMillis :: INTEGER, nodePropertiesWritten :: INTEGER, computeMillis :: INTEGER, totalSpread :: FLOAT, nodeCount :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'totalSpread :: FLOAT',
            name: 'totalSpread',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.influenceMaximization.celf.write.estimate': {
        name: 'gds.influenceMaximization.celf.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.influenceMaximization.celf.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.k1coloring.mutate': {
        name: 'gds.k1coloring.mutate',
        description:
          'The K-1 Coloring algorithm assigns a color to every node in the graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.k1coloring.mutate(graphName :: STRING, configuration = {} :: MAP) :: (preProcessingMillis :: INTEGER, computeMillis :: INTEGER, mutateMillis :: INTEGER, nodeCount :: INTEGER, colorCount :: INTEGER, ranIterations :: INTEGER, didConverge :: BOOLEAN, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'colorCount :: INTEGER',
            name: 'colorCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.k1coloring.mutate.estimate': {
        name: 'gds.k1coloring.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.k1coloring.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.k1coloring.stats': {
        name: 'gds.k1coloring.stats',
        description:
          'The K-1 Coloring algorithm assigns a color to every node in the graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.k1coloring.stats(graphName :: STRING, configuration = {} :: MAP) :: (preProcessingMillis :: INTEGER, computeMillis :: INTEGER, nodeCount :: INTEGER, colorCount :: INTEGER, ranIterations :: INTEGER, didConverge :: BOOLEAN, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'colorCount :: INTEGER',
            name: 'colorCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.k1coloring.stats.estimate': {
        name: 'gds.k1coloring.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.k1coloring.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.k1coloring.stream': {
        name: 'gds.k1coloring.stream',
        description:
          'The K-1 Coloring algorithm assigns a color to every node in the graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.k1coloring.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, color :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'color :: INTEGER',
            name: 'color',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.k1coloring.stream.estimate': {
        name: 'gds.k1coloring.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.k1coloring.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.k1coloring.write': {
        name: 'gds.k1coloring.write',
        description:
          'The K-1 Coloring algorithm assigns a color to every node in the graph.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.k1coloring.write(graphName :: STRING, configuration = {} :: MAP) :: (preProcessingMillis :: INTEGER, computeMillis :: INTEGER, writeMillis :: INTEGER, nodeCount :: INTEGER, colorCount :: INTEGER, ranIterations :: INTEGER, didConverge :: BOOLEAN, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'colorCount :: INTEGER',
            name: 'colorCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.k1coloring.write.estimate': {
        name: 'gds.k1coloring.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.k1coloring.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.kSpanningTree.write': {
        name: 'gds.kSpanningTree.write',
        description:
          'The K-spanning tree algorithm starts from a root node and returns a spanning tree with exactly k nodes',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.kSpanningTree.write(graphName :: STRING, configuration = {} :: MAP) :: (effectiveNodeCount :: INTEGER, writeMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'effectiveNodeCount :: INTEGER',
            name: 'effectiveNodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.kcore.mutate': {
        name: 'gds.kcore.mutate',
        description: 'It computes the k-core values in a network',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.kcore.mutate(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, degeneracy :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'degeneracy :: INTEGER',
            name: 'degeneracy',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.kcore.mutate.estimate': {
        name: 'gds.kcore.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.kcore.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.kcore.stats': {
        name: 'gds.kcore.stats',
        description: 'It computes the k-core values in a network',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.kcore.stats(graphName :: STRING, configuration = {} :: MAP) :: (degeneracy :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'degeneracy :: INTEGER',
            name: 'degeneracy',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.kcore.stats.estimate': {
        name: 'gds.kcore.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.kcore.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.kcore.stream': {
        name: 'gds.kcore.stream',
        description: 'It computes the k-core values in a network',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.kcore.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, coreValue :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'coreValue :: INTEGER',
            name: 'coreValue',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.kcore.stream.estimate': {
        name: 'gds.kcore.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.kcore.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.kcore.write': {
        name: 'gds.kcore.write',
        description: 'It computes the k-core values in a network',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.kcore.write(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, degeneracy :: INTEGER, writeMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'degeneracy :: INTEGER',
            name: 'degeneracy',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.kcore.write.estimate': {
        name: 'gds.kcore.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.kcore.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.kmeans.mutate': {
        name: 'gds.kmeans.mutate',
        description:
          'The Kmeans  algorithm clusters nodes into different communities based on Euclidean distance',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.kmeans.mutate(graphName :: STRING, configuration = {} :: MAP) :: (mutateMillis :: INTEGER, nodePropertiesWritten :: INTEGER, communityDistribution :: MAP, centroids :: LIST<LIST<FLOAT>>, averageDistanceToCentroid :: FLOAT, averageSilhouette :: FLOAT, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityDistribution :: MAP',
            name: 'communityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'centroids :: LIST<LIST<FLOAT>>',
            name: 'centroids',
            type: 'LIST<LIST<FLOAT>>',
          },
          {
            isDeprecated: false,
            description: 'averageDistanceToCentroid :: FLOAT',
            name: 'averageDistanceToCentroid',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'averageSilhouette :: FLOAT',
            name: 'averageSilhouette',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.kmeans.mutate.estimate': {
        name: 'gds.kmeans.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.kmeans.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.kmeans.stats': {
        name: 'gds.kmeans.stats',
        description:
          'The Kmeans  algorithm clusters nodes into different communities based on Euclidean distance',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.kmeans.stats(graphName :: STRING, configuration = {} :: MAP) :: (communityDistribution :: MAP, centroids :: LIST<LIST<FLOAT>>, averageDistanceToCentroid :: FLOAT, averageSilhouette :: FLOAT, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'communityDistribution :: MAP',
            name: 'communityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'centroids :: LIST<LIST<FLOAT>>',
            name: 'centroids',
            type: 'LIST<LIST<FLOAT>>',
          },
          {
            isDeprecated: false,
            description: 'averageDistanceToCentroid :: FLOAT',
            name: 'averageDistanceToCentroid',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'averageSilhouette :: FLOAT',
            name: 'averageSilhouette',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.kmeans.stats.estimate': {
        name: 'gds.kmeans.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.kmeans.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.kmeans.stream': {
        name: 'gds.kmeans.stream',
        description:
          'The Kmeans  algorithm clusters nodes into different communities based on Euclidean distance',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.kmeans.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, communityId :: INTEGER, distanceFromCentroid :: FLOAT, silhouette :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityId :: INTEGER',
            name: 'communityId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'distanceFromCentroid :: FLOAT',
            name: 'distanceFromCentroid',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'silhouette :: FLOAT',
            name: 'silhouette',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.kmeans.stream.estimate': {
        name: 'gds.kmeans.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.kmeans.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.kmeans.write': {
        name: 'gds.kmeans.write',
        description:
          'The Kmeans  algorithm clusters nodes into different communities based on Euclidean distance',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.kmeans.write(graphName :: STRING, configuration = {} :: MAP) :: (writeMillis :: INTEGER, nodePropertiesWritten :: INTEGER, communityDistribution :: MAP, centroids :: LIST<LIST<FLOAT>>, averageDistanceToCentroid :: FLOAT, averageSilhouette :: FLOAT, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityDistribution :: MAP',
            name: 'communityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'centroids :: LIST<LIST<FLOAT>>',
            name: 'centroids',
            type: 'LIST<LIST<FLOAT>>',
          },
          {
            isDeprecated: false,
            description: 'averageDistanceToCentroid :: FLOAT',
            name: 'averageDistanceToCentroid',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'averageSilhouette :: FLOAT',
            name: 'averageSilhouette',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.kmeans.write.estimate': {
        name: 'gds.kmeans.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.kmeans.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.knn.filtered.mutate': {
        name: 'gds.knn.filtered.mutate',
        description:
          'The k-nearest neighbor graph algorithm constructs relationships between nodes if the distance between two nodes is among the k nearest distances compared to other nodes. KNN computes distances based on the similarity of node properties. Filtered KNN extends this functionality, allowing filtering on source nodes and target nodes, respectively.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.knn.filtered.mutate(graphName :: STRING, configuration = {} :: MAP) :: (ranIterations :: INTEGER, nodePairsConsidered :: INTEGER, didConverge :: BOOLEAN, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, nodesCompared :: INTEGER, relationshipsWritten :: INTEGER, similarityDistribution :: MAP, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePairsConsidered :: INTEGER',
            name: 'nodePairsConsidered',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodesCompared :: INTEGER',
            name: 'nodesCompared',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarityDistribution :: MAP',
            name: 'similarityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.knn.filtered.mutate.estimate': {
        name: 'gds.knn.filtered.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.knn.filtered.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.knn.filtered.stats': {
        name: 'gds.knn.filtered.stats',
        description:
          'The k-nearest neighbor graph algorithm constructs relationships between nodes if the distance between two nodes is among the k nearest distances compared to other nodes. KNN computes distances based on the similarity of node properties. Filtered KNN extends this functionality, allowing filtering on source nodes and target nodes, respectively.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.knn.filtered.stats(graphName :: STRING, configuration = {} :: MAP) :: (ranIterations :: INTEGER, didConverge :: BOOLEAN, nodePairsConsidered :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, postProcessingMillis :: INTEGER, nodesCompared :: INTEGER, similarityPairs :: INTEGER, similarityDistribution :: MAP, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'nodePairsConsidered :: INTEGER',
            name: 'nodePairsConsidered',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodesCompared :: INTEGER',
            name: 'nodesCompared',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarityPairs :: INTEGER',
            name: 'similarityPairs',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarityDistribution :: MAP',
            name: 'similarityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.knn.filtered.stats.estimate': {
        name: 'gds.knn.filtered.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.knn.filtered.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.knn.filtered.stream': {
        name: 'gds.knn.filtered.stream',
        description:
          'The k-nearest neighbor graph algorithm constructs relationships between nodes if the distance between two nodes is among the k nearest distances compared to other nodes. KNN computes distances based on the similarity of node properties. Filtered KNN extends this functionality, allowing filtering on source nodes and target nodes, respectively.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.knn.filtered.stream(graphName :: STRING, configuration = {} :: MAP) :: (node1 :: INTEGER, node2 :: INTEGER, similarity :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'node1 :: INTEGER',
            name: 'node1',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'node2 :: INTEGER',
            name: 'node2',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarity :: FLOAT',
            name: 'similarity',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.knn.filtered.stream.estimate': {
        name: 'gds.knn.filtered.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.knn.filtered.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.knn.filtered.write': {
        name: 'gds.knn.filtered.write',
        description:
          'The k-nearest neighbor graph algorithm constructs relationships between nodes if the distance between two nodes is among the k nearest distances compared to other nodes. KNN computes distances based on the similarity of node properties. Filtered KNN extends this functionality, allowing filtering on source nodes and target nodes, respectively.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.knn.filtered.write(graphName :: STRING, configuration = {} :: MAP) :: (ranIterations :: INTEGER, didConverge :: BOOLEAN, nodePairsConsidered :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, writeMillis :: INTEGER, postProcessingMillis :: INTEGER, nodesCompared :: INTEGER, relationshipsWritten :: INTEGER, similarityDistribution :: MAP, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'nodePairsConsidered :: INTEGER',
            name: 'nodePairsConsidered',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodesCompared :: INTEGER',
            name: 'nodesCompared',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarityDistribution :: MAP',
            name: 'similarityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.knn.filtered.write.estimate': {
        name: 'gds.knn.filtered.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.knn.filtered.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.knn.mutate': {
        name: 'gds.knn.mutate',
        description:
          'The k-nearest neighbor graph algorithm constructs relationships between nodes if the distance between two nodes is among the k nearest distances compared to other nodes.KNN computes distances based on the similarity of node properties',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.knn.mutate(graphName :: STRING, configuration = {} :: MAP) :: (ranIterations :: INTEGER, nodePairsConsidered :: INTEGER, didConverge :: BOOLEAN, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, nodesCompared :: INTEGER, relationshipsWritten :: INTEGER, similarityDistribution :: MAP, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePairsConsidered :: INTEGER',
            name: 'nodePairsConsidered',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodesCompared :: INTEGER',
            name: 'nodesCompared',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarityDistribution :: MAP',
            name: 'similarityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.knn.mutate.estimate': {
        name: 'gds.knn.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.knn.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.knn.stats': {
        name: 'gds.knn.stats',
        description:
          'The k-nearest neighbor graph algorithm constructs relationships between nodes if the distance between two nodes is among the k nearest distances compared to other nodes.KNN computes distances based on the similarity of node properties',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.knn.stats(graphName :: STRING, configuration = {} :: MAP) :: (ranIterations :: INTEGER, didConverge :: BOOLEAN, nodePairsConsidered :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, postProcessingMillis :: INTEGER, nodesCompared :: INTEGER, similarityPairs :: INTEGER, similarityDistribution :: MAP, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'nodePairsConsidered :: INTEGER',
            name: 'nodePairsConsidered',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodesCompared :: INTEGER',
            name: 'nodesCompared',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarityPairs :: INTEGER',
            name: 'similarityPairs',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarityDistribution :: MAP',
            name: 'similarityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.knn.stats.estimate': {
        name: 'gds.knn.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.knn.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.knn.stream': {
        name: 'gds.knn.stream',
        description:
          'The k-nearest neighbor graph algorithm constructs relationships between nodes if the distance between two nodes is among the k nearest distances compared to other nodes.KNN computes distances based on the similarity of node properties',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.knn.stream(graphName :: STRING, configuration = {} :: MAP) :: (node1 :: INTEGER, node2 :: INTEGER, similarity :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'node1 :: INTEGER',
            name: 'node1',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'node2 :: INTEGER',
            name: 'node2',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarity :: FLOAT',
            name: 'similarity',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.knn.stream.estimate': {
        name: 'gds.knn.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.knn.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.knn.write': {
        name: 'gds.knn.write',
        description:
          'The k-nearest neighbor graph algorithm constructs relationships between nodes if the distance between two nodes is among the k nearest distances compared to other nodes.KNN computes distances based on the similarity of node properties',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.knn.write(graphName :: STRING, configuration = {} :: MAP) :: (ranIterations :: INTEGER, didConverge :: BOOLEAN, nodePairsConsidered :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, writeMillis :: INTEGER, postProcessingMillis :: INTEGER, nodesCompared :: INTEGER, relationshipsWritten :: INTEGER, similarityDistribution :: MAP, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'nodePairsConsidered :: INTEGER',
            name: 'nodePairsConsidered',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodesCompared :: INTEGER',
            name: 'nodesCompared',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarityDistribution :: MAP',
            name: 'similarityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.knn.write.estimate': {
        name: 'gds.knn.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.knn.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.labelPropagation.mutate': {
        name: 'gds.labelPropagation.mutate',
        description:
          'The Label Propagation algorithm is a fast algorithm for finding communities in a graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.labelPropagation.mutate(graphName :: STRING, configuration = {} :: MAP) :: (mutateMillis :: INTEGER, nodePropertiesWritten :: INTEGER, ranIterations :: INTEGER, didConverge :: BOOLEAN, communityCount :: INTEGER, communityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'communityCount :: INTEGER',
            name: 'communityCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityDistribution :: MAP',
            name: 'communityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.labelPropagation.mutate.estimate': {
        name: 'gds.labelPropagation.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.labelPropagation.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.labelPropagation.stats': {
        name: 'gds.labelPropagation.stats',
        description:
          'The Label Propagation algorithm is a fast algorithm for finding communities in a graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.labelPropagation.stats(graphName :: STRING, configuration = {} :: MAP) :: (ranIterations :: INTEGER, didConverge :: BOOLEAN, communityCount :: INTEGER, communityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'communityCount :: INTEGER',
            name: 'communityCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityDistribution :: MAP',
            name: 'communityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.labelPropagation.stats.estimate': {
        name: 'gds.labelPropagation.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.labelPropagation.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.labelPropagation.stream': {
        name: 'gds.labelPropagation.stream',
        description:
          'The Label Propagation algorithm is a fast algorithm for finding communities in a graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.labelPropagation.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, communityId :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityId :: INTEGER',
            name: 'communityId',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.labelPropagation.stream.estimate': {
        name: 'gds.labelPropagation.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.labelPropagation.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.labelPropagation.write': {
        name: 'gds.labelPropagation.write',
        description:
          'The Label Propagation algorithm is a fast algorithm for finding communities in a graph.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.labelPropagation.write(graphName :: STRING, configuration = {} :: MAP) :: (writeMillis :: INTEGER, nodePropertiesWritten :: INTEGER, ranIterations :: INTEGER, didConverge :: BOOLEAN, communityCount :: INTEGER, communityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'communityCount :: INTEGER',
            name: 'communityCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityDistribution :: MAP',
            name: 'communityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.labelPropagation.write.estimate': {
        name: 'gds.labelPropagation.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.labelPropagation.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.leiden.mutate': {
        name: 'gds.leiden.mutate',
        description:
          'Leiden is a community detection algorithm, which guarantees that communities are well connected',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.leiden.mutate(graphName :: STRING, configuration = {} :: MAP) :: (mutateMillis :: INTEGER, nodePropertiesWritten :: INTEGER, ranLevels :: INTEGER, didConverge :: BOOLEAN, nodeCount :: INTEGER, communityCount :: INTEGER, communityDistribution :: MAP, modularity :: FLOAT, modularities :: LIST<FLOAT>, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'ranLevels :: INTEGER',
            name: 'ranLevels',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityCount :: INTEGER',
            name: 'communityCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityDistribution :: MAP',
            name: 'communityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'modularity :: FLOAT',
            name: 'modularity',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'modularities :: LIST<FLOAT>',
            name: 'modularities',
            type: 'LIST<FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.leiden.mutate.estimate': {
        name: 'gds.leiden.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.leiden.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.leiden.stats': {
        name: 'gds.leiden.stats',
        description:
          'Leiden is a community detection algorithm, which guarantees that communities are well connected',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.leiden.stats(graphName :: STRING, configuration = {} :: MAP) :: (ranLevels :: INTEGER, didConverge :: BOOLEAN, nodeCount :: INTEGER, communityCount :: INTEGER, communityDistribution :: MAP, modularity :: FLOAT, modularities :: LIST<FLOAT>, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'ranLevels :: INTEGER',
            name: 'ranLevels',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityCount :: INTEGER',
            name: 'communityCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityDistribution :: MAP',
            name: 'communityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'modularity :: FLOAT',
            name: 'modularity',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'modularities :: LIST<FLOAT>',
            name: 'modularities',
            type: 'LIST<FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.leiden.stats.estimate': {
        name: 'gds.leiden.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.leiden.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.leiden.stream': {
        name: 'gds.leiden.stream',
        description:
          'Leiden is a community detection algorithm, which guarantees that communities are well connected',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.leiden.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, communityId :: INTEGER, intermediateCommunityIds :: LIST<INTEGER>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityId :: INTEGER',
            name: 'communityId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'intermediateCommunityIds :: LIST<INTEGER>',
            name: 'intermediateCommunityIds',
            type: 'LIST<INTEGER>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.leiden.stream.estimate': {
        name: 'gds.leiden.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.leiden.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.leiden.write': {
        name: 'gds.leiden.write',
        description:
          'Leiden is a community detection algorithm, which guarantees that communities are well connected',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.leiden.write(graphName :: STRING, configuration = {} :: MAP) :: (writeMillis :: INTEGER, nodePropertiesWritten :: INTEGER, ranLevels :: INTEGER, didConverge :: BOOLEAN, nodeCount :: INTEGER, communityCount :: INTEGER, communityDistribution :: MAP, modularity :: FLOAT, modularities :: LIST<FLOAT>, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'ranLevels :: INTEGER',
            name: 'ranLevels',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityCount :: INTEGER',
            name: 'communityCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityDistribution :: MAP',
            name: 'communityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'modularity :: FLOAT',
            name: 'modularity',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'modularities :: LIST<FLOAT>',
            name: 'modularities',
            type: 'LIST<FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.leiden.write.estimate': {
        name: 'gds.leiden.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.leiden.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.license.state': {
        name: 'gds.license.state',
        description: 'Returns details about the license state',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'gds.license.state() :: (isLicensed :: BOOLEAN, details :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'isLicensed :: BOOLEAN',
            name: 'isLicensed',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'details :: STRING',
            name: 'details',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.list': {
        name: 'gds.list',
        description:
          'CALL gds.list - lists all algorithm procedures, their description and signature',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'gds.list(name =  :: STRING) :: (name :: STRING, description :: STRING, signature :: STRING, type :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'name =  :: STRING',
            name: 'name',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'description :: STRING',
            name: 'description',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'signature :: STRING',
            name: 'signature',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'type :: STRING',
            name: 'type',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.listProgress': {
        name: 'gds.listProgress',
        description: 'List progress events for currently running tasks.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'gds.listProgress(jobId =  :: STRING) :: (username :: STRING, jobId :: STRING, taskName :: STRING, progress :: STRING, progressBar :: STRING, status :: STRING, timeStarted :: LOCAL TIME, elapsedTime :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'jobId =  :: STRING',
            name: 'jobId',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'username :: STRING',
            name: 'username',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'jobId :: STRING',
            name: 'jobId',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'taskName :: STRING',
            name: 'taskName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'progress :: STRING',
            name: 'progress',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'progressBar :: STRING',
            name: 'progressBar',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'status :: STRING',
            name: 'status',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'timeStarted :: LOCAL TIME',
            name: 'timeStarted',
            type: 'LOCAL TIME',
          },
          {
            isDeprecated: false,
            description: 'elapsedTime :: STRING',
            name: 'elapsedTime',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.localClusteringCoefficient.mutate': {
        name: 'gds.localClusteringCoefficient.mutate',
        description:
          'The local clustering coefficient is a metric quantifying how connected the neighborhood of a node is.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.localClusteringCoefficient.mutate(graphName :: STRING, configuration = {} :: MAP) :: (mutateMillis :: INTEGER, nodePropertiesWritten :: INTEGER, averageClusteringCoefficient :: FLOAT, nodeCount :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'averageClusteringCoefficient :: FLOAT',
            name: 'averageClusteringCoefficient',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.localClusteringCoefficient.mutate.estimate': {
        name: 'gds.localClusteringCoefficient.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.localClusteringCoefficient.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.localClusteringCoefficient.stats': {
        name: 'gds.localClusteringCoefficient.stats',
        description:
          'The local clustering coefficient is a metric quantifying how connected the neighborhood of a node is.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.localClusteringCoefficient.stats(graphName :: STRING, configuration = {} :: MAP) :: (averageClusteringCoefficient :: FLOAT, nodeCount :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'averageClusteringCoefficient :: FLOAT',
            name: 'averageClusteringCoefficient',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.localClusteringCoefficient.stats.estimate': {
        name: 'gds.localClusteringCoefficient.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.localClusteringCoefficient.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.localClusteringCoefficient.stream': {
        name: 'gds.localClusteringCoefficient.stream',
        description:
          'The local clustering coefficient is a metric quantifying how connected the neighborhood of a node is.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.localClusteringCoefficient.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, localClusteringCoefficient :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'localClusteringCoefficient :: FLOAT',
            name: 'localClusteringCoefficient',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.localClusteringCoefficient.stream.estimate': {
        name: 'gds.localClusteringCoefficient.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.localClusteringCoefficient.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.localClusteringCoefficient.write': {
        name: 'gds.localClusteringCoefficient.write',
        description:
          'The local clustering coefficient is a metric quantifying how connected the neighborhood of a node is.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.localClusteringCoefficient.write(graphName :: STRING, configuration = {} :: MAP) :: (writeMillis :: INTEGER, nodePropertiesWritten :: INTEGER, averageClusteringCoefficient :: FLOAT, nodeCount :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'averageClusteringCoefficient :: FLOAT',
            name: 'averageClusteringCoefficient',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.localClusteringCoefficient.write.estimate': {
        name: 'gds.localClusteringCoefficient.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.localClusteringCoefficient.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.louvain.mutate': {
        name: 'gds.louvain.mutate',
        description:
          'The Louvain method for community detection is an algorithm for detecting communities in networks.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.louvain.mutate(graphName :: STRING, configuration = {} :: MAP) :: (mutateMillis :: INTEGER, nodePropertiesWritten :: INTEGER, modularity :: FLOAT, modularities :: LIST<FLOAT>, ranLevels :: INTEGER, communityCount :: INTEGER, communityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'modularity :: FLOAT',
            name: 'modularity',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'modularities :: LIST<FLOAT>',
            name: 'modularities',
            type: 'LIST<FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'ranLevels :: INTEGER',
            name: 'ranLevels',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityCount :: INTEGER',
            name: 'communityCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityDistribution :: MAP',
            name: 'communityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.louvain.mutate.estimate': {
        name: 'gds.louvain.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.louvain.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.louvain.stats': {
        name: 'gds.louvain.stats',
        description:
          'The Louvain method for community detection is an algorithm for detecting communities in networks.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.louvain.stats(graphName :: STRING, configuration = {} :: MAP) :: (modularity :: FLOAT, modularities :: LIST<FLOAT>, ranLevels :: INTEGER, communityCount :: INTEGER, communityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'modularity :: FLOAT',
            name: 'modularity',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'modularities :: LIST<FLOAT>',
            name: 'modularities',
            type: 'LIST<FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'ranLevels :: INTEGER',
            name: 'ranLevels',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityCount :: INTEGER',
            name: 'communityCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityDistribution :: MAP',
            name: 'communityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.louvain.stats.estimate': {
        name: 'gds.louvain.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.louvain.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.louvain.stream': {
        name: 'gds.louvain.stream',
        description:
          'The Louvain method for community detection is an algorithm for detecting communities in networks.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.louvain.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, communityId :: INTEGER, intermediateCommunityIds :: LIST<INTEGER>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityId :: INTEGER',
            name: 'communityId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'intermediateCommunityIds :: LIST<INTEGER>',
            name: 'intermediateCommunityIds',
            type: 'LIST<INTEGER>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.louvain.stream.estimate': {
        name: 'gds.louvain.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.louvain.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.louvain.write': {
        name: 'gds.louvain.write',
        description:
          'The Louvain method for community detection is an algorithm for detecting communities in networks.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.louvain.write(graphName :: STRING, configuration = {} :: MAP) :: (writeMillis :: INTEGER, nodePropertiesWritten :: INTEGER, modularity :: FLOAT, modularities :: LIST<FLOAT>, ranLevels :: INTEGER, communityCount :: INTEGER, communityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'modularity :: FLOAT',
            name: 'modularity',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'modularities :: LIST<FLOAT>',
            name: 'modularities',
            type: 'LIST<FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'ranLevels :: INTEGER',
            name: 'ranLevels',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityCount :: INTEGER',
            name: 'communityCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityDistribution :: MAP',
            name: 'communityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.louvain.write.estimate': {
        name: 'gds.louvain.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.louvain.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.maxkcut.mutate': {
        name: 'gds.maxkcut.mutate',
        description:
          'Approximate Maximum k-cut maps each node into one of k disjoint communities trying to maximize the sum of weights of relationships between these communities.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.maxkcut.mutate(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, cutCost :: FLOAT, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'cutCost :: FLOAT',
            name: 'cutCost',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.maxkcut.mutate.estimate': {
        name: 'gds.maxkcut.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.maxkcut.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.maxkcut.stream': {
        name: 'gds.maxkcut.stream',
        description:
          'Approximate Maximum k-cut maps each node into one of k disjoint communities trying to maximize the sum of weights of relationships between these communities.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.maxkcut.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, communityId :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityId :: INTEGER',
            name: 'communityId',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.maxkcut.stream.estimate': {
        name: 'gds.maxkcut.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.maxkcut.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.memory.list': {
        name: 'gds.memory.list',
        description:
          'List memory for currently running tasks or stored graphs.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'gds.memory.list() :: (user :: STRING, name :: STRING, entity :: STRING, memoryInBytes :: INTEGER)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'user :: STRING',
            name: 'user',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'entity :: STRING',
            name: 'entity',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'memoryInBytes :: INTEGER',
            name: 'memoryInBytes',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.memory.summary': {
        name: 'gds.memory.summary',
        description:
          'List memory for currently running tasks or stored graphs.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'gds.memory.summary() :: (user :: STRING, totalGraphsMemory :: INTEGER, totalTasksMemory :: INTEGER)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'user :: STRING',
            name: 'user',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'totalGraphsMemory :: INTEGER',
            name: 'totalGraphsMemory',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'totalTasksMemory :: INTEGER',
            name: 'totalTasksMemory',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.model.delete': {
        name: 'gds.model.delete',
        description: 'Deletes a stored model from disk.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.model.delete(modelName :: STRING) :: (modelName :: STRING, deleteMillis :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'modelName :: STRING',
            name: 'modelName',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'modelName :: STRING',
            name: 'modelName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'deleteMillis :: INTEGER',
            name: 'deleteMillis',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.model.drop': {
        name: 'gds.model.drop',
        description:
          'Drops a loaded model and frees up the resources it occupies.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.model.drop(modelName :: STRING, failIfMissing = true :: BOOLEAN) :: (modelName :: STRING, modelType :: STRING, modelInfo :: MAP, creationTime :: ZONED DATETIME, trainConfig :: MAP, graphSchema :: MAP, loaded :: BOOLEAN, stored :: BOOLEAN, published :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'modelName :: STRING',
            name: 'modelName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=true, type=BOOLEAN}',
            description: 'failIfMissing = true :: BOOLEAN',
            name: 'failIfMissing',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'modelName :: STRING',
            name: 'modelName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'modelType :: STRING',
            name: 'modelType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'modelInfo :: MAP',
            name: 'modelInfo',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'creationTime :: ZONED DATETIME',
            name: 'creationTime',
            type: 'ZONED DATETIME',
          },
          {
            isDeprecated: false,
            description: 'trainConfig :: MAP',
            name: 'trainConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'graphSchema :: MAP',
            name: 'graphSchema',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'loaded :: BOOLEAN',
            name: 'loaded',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'stored :: BOOLEAN',
            name: 'stored',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'published :: BOOLEAN',
            name: 'published',
            type: 'BOOLEAN',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.model.exists': {
        name: 'gds.model.exists',
        description: 'Checks if a given model exists in the model catalog.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.model.exists(modelName :: STRING) :: (modelName :: STRING, modelType :: STRING, exists :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'modelName :: STRING',
            name: 'modelName',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'modelName :: STRING',
            name: 'modelName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'modelType :: STRING',
            name: 'modelType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'exists :: BOOLEAN',
            name: 'exists',
            type: 'BOOLEAN',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.model.list': {
        name: 'gds.model.list',
        description: 'Lists all models contained in the model catalog.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.model.list(modelName = __NO_VALUE :: STRING) :: (modelName :: STRING, modelType :: STRING, modelInfo :: MAP, creationTime :: ZONED DATETIME, trainConfig :: MAP, graphSchema :: MAP, loaded :: BOOLEAN, stored :: BOOLEAN, published :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=__NO_VALUE, type=STRING}',
            description: 'modelName = __NO_VALUE :: STRING',
            name: 'modelName',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'modelName :: STRING',
            name: 'modelName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'modelType :: STRING',
            name: 'modelType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'modelInfo :: MAP',
            name: 'modelInfo',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'creationTime :: ZONED DATETIME',
            name: 'creationTime',
            type: 'ZONED DATETIME',
          },
          {
            isDeprecated: false,
            description: 'trainConfig :: MAP',
            name: 'trainConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'graphSchema :: MAP',
            name: 'graphSchema',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'loaded :: BOOLEAN',
            name: 'loaded',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'stored :: BOOLEAN',
            name: 'stored',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'published :: BOOLEAN',
            name: 'published',
            type: 'BOOLEAN',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.model.load': {
        name: 'gds.model.load',
        description: 'Load a stored model into main memory.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.model.load(modelName :: STRING) :: (modelName :: STRING, loadMillis :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'modelName :: STRING',
            name: 'modelName',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'modelName :: STRING',
            name: 'modelName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'loadMillis :: INTEGER',
            name: 'loadMillis',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.model.publish': {
        name: 'gds.model.publish',
        description: 'Make a trained model accessible by all users',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.model.publish(modelName :: STRING) :: (modelName :: STRING, modelType :: STRING, modelInfo :: MAP, creationTime :: ZONED DATETIME, trainConfig :: MAP, graphSchema :: MAP, loaded :: BOOLEAN, stored :: BOOLEAN, published :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'modelName :: STRING',
            name: 'modelName',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'modelName :: STRING',
            name: 'modelName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'modelType :: STRING',
            name: 'modelType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'modelInfo :: MAP',
            name: 'modelInfo',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'creationTime :: ZONED DATETIME',
            name: 'creationTime',
            type: 'ZONED DATETIME',
          },
          {
            isDeprecated: false,
            description: 'trainConfig :: MAP',
            name: 'trainConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'graphSchema :: MAP',
            name: 'graphSchema',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'loaded :: BOOLEAN',
            name: 'loaded',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'stored :: BOOLEAN',
            name: 'stored',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'published :: BOOLEAN',
            name: 'published',
            type: 'BOOLEAN',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.model.store': {
        name: 'gds.model.store',
        description: 'Store the selected model to disk.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.model.store(modelName :: STRING, failIfUnsupported = true :: BOOLEAN) :: (modelName :: STRING, storeMillis :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'modelName :: STRING',
            name: 'modelName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=true, type=BOOLEAN}',
            description: 'failIfUnsupported = true :: BOOLEAN',
            name: 'failIfUnsupported',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'modelName :: STRING',
            name: 'modelName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'storeMillis :: INTEGER',
            name: 'storeMillis',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.modularity.stats': {
        name: 'gds.modularity.stats',
        description:
          'The Modularity procedure computes the modularity scores for a given set of communities',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.modularity.stats(graphName :: STRING, configuration = {} :: MAP) :: (nodeCount :: INTEGER, relationshipCount :: INTEGER, communityCount :: INTEGER, modularity :: FLOAT, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityCount :: INTEGER',
            name: 'communityCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'modularity :: FLOAT',
            name: 'modularity',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.modularity.stats.estimate': {
        name: 'gds.modularity.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.modularity.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.modularity.stream': {
        name: 'gds.modularity.stream',
        description:
          'The Modularity procedure computes the modularity scores for a given set of communities',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.modularity.stream(graphName :: STRING, configuration = {} :: MAP) :: (communityId :: INTEGER, modularity :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'communityId :: INTEGER',
            name: 'communityId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'modularity :: FLOAT',
            name: 'modularity',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.modularity.stream.estimate': {
        name: 'gds.modularity.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.modularity.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.modularityOptimization.mutate': {
        name: 'gds.modularityOptimization.mutate',
        description:
          'The Modularity Optimization algorithm groups the nodes in the graph by optimizing the graphs modularity.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.modularityOptimization.mutate(graphName :: STRING, configuration = {} :: MAP) :: (preProcessingMillis :: INTEGER, computeMillis :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, nodes :: INTEGER, didConverge :: BOOLEAN, ranIterations :: INTEGER, modularity :: FLOAT, communityCount :: INTEGER, communityDistribution :: MAP, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodes :: INTEGER',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'modularity :: FLOAT',
            name: 'modularity',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'communityCount :: INTEGER',
            name: 'communityCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityDistribution :: MAP',
            name: 'communityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.modularityOptimization.mutate.estimate': {
        name: 'gds.modularityOptimization.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.modularityOptimization.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.modularityOptimization.stats': {
        name: 'gds.modularityOptimization.stats',
        description:
          'The Modularity Optimization algorithm groups the nodes in the graph by optimizing the graphs modularity.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.modularityOptimization.stats(graphName :: STRING, configuration = {} :: MAP) :: (preProcessingMillis :: INTEGER, computeMillis :: INTEGER, postProcessingMillis :: INTEGER, nodes :: INTEGER, didConverge :: BOOLEAN, ranIterations :: INTEGER, modularity :: FLOAT, communityCount :: INTEGER, communityDistribution :: MAP, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodes :: INTEGER',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'modularity :: FLOAT',
            name: 'modularity',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'communityCount :: INTEGER',
            name: 'communityCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityDistribution :: MAP',
            name: 'communityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.modularityOptimization.stats.estimate': {
        name: 'gds.modularityOptimization.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.modularityOptimization.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.modularityOptimization.stream': {
        name: 'gds.modularityOptimization.stream',
        description:
          'The Modularity Optimization algorithm groups the nodes in the graph by optimizing the graphs modularity.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.modularityOptimization.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, communityId :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityId :: INTEGER',
            name: 'communityId',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.modularityOptimization.stream.estimate': {
        name: 'gds.modularityOptimization.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.modularityOptimization.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.modularityOptimization.write': {
        name: 'gds.modularityOptimization.write',
        description:
          'The Modularity Optimization algorithm groups the nodes in the graph by optimizing the graphs modularity.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.modularityOptimization.write(graphName :: STRING, configuration = {} :: MAP) :: (preProcessingMillis :: INTEGER, computeMillis :: INTEGER, writeMillis :: INTEGER, postProcessingMillis :: INTEGER, nodes :: INTEGER, didConverge :: BOOLEAN, ranIterations :: INTEGER, modularity :: FLOAT, communityCount :: INTEGER, communityDistribution :: MAP, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodes :: INTEGER',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'modularity :: FLOAT',
            name: 'modularity',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'communityCount :: INTEGER',
            name: 'communityCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityDistribution :: MAP',
            name: 'communityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.modularityOptimization.write.estimate': {
        name: 'gds.modularityOptimization.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.modularityOptimization.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.node2vec.mutate': {
        name: 'gds.node2vec.mutate',
        description:
          'The Node2Vec algorithm computes embeddings for nodes based on random walks.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.node2vec.mutate(graphName :: STRING, configuration = {} :: MAP) :: (nodeCount :: INTEGER, nodePropertiesWritten :: INTEGER, lossPerIteration :: LIST<FLOAT>, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'lossPerIteration :: LIST<FLOAT>',
            name: 'lossPerIteration',
            type: 'LIST<FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.node2vec.mutate.estimate': {
        name: 'gds.node2vec.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.node2vec.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.node2vec.stream': {
        name: 'gds.node2vec.stream',
        description:
          'The Node2Vec algorithm computes embeddings for nodes based on random walks.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.node2vec.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, embedding :: LIST<FLOAT>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'embedding :: LIST<FLOAT>',
            name: 'embedding',
            type: 'LIST<FLOAT>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.node2vec.stream.estimate': {
        name: 'gds.node2vec.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.node2vec.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.node2vec.write': {
        name: 'gds.node2vec.write',
        description:
          'The Node2Vec algorithm computes embeddings for nodes based on random walks.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.node2vec.write(graphName :: STRING, configuration = {} :: MAP) :: (nodeCount :: INTEGER, nodePropertiesWritten :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, writeMillis :: INTEGER, configuration :: MAP, lossPerIteration :: LIST<FLOAT>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'lossPerIteration :: LIST<FLOAT>',
            name: 'lossPerIteration',
            type: 'LIST<FLOAT>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.node2vec.write.estimate': {
        name: 'gds.node2vec.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.node2vec.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.nodeSimilarity.filtered.mutate': {
        name: 'gds.nodeSimilarity.filtered.mutate',
        description:
          'The Filtered Node Similarity algorithm compares a set of nodes based on the nodes they are connected to. Two nodes are considered similar if they share many of the same neighbors. The algorithm computes pair-wise similarities based on Jaccard or Overlap metrics. The filtered variant supports limiting which nodes to compare via source and target node filters.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.nodeSimilarity.filtered.mutate(graphName :: STRING, configuration = {} :: MAP) :: (preProcessingMillis :: INTEGER, computeMillis :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, nodesCompared :: INTEGER, relationshipsWritten :: INTEGER, similarityDistribution :: MAP, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodesCompared :: INTEGER',
            name: 'nodesCompared',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarityDistribution :: MAP',
            name: 'similarityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.nodeSimilarity.filtered.mutate.estimate': {
        name: 'gds.nodeSimilarity.filtered.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.nodeSimilarity.filtered.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.nodeSimilarity.filtered.stats': {
        name: 'gds.nodeSimilarity.filtered.stats',
        description:
          'The Filtered Node Similarity algorithm compares a set of nodes based on the nodes they are connected to. Two nodes are considered similar if they share many of the same neighbors. The algorithm computes pair-wise similarities based on Jaccard or Overlap metrics. The filtered variant supports limiting which nodes to compare via source and target node filters.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.nodeSimilarity.filtered.stats(graphName :: STRING, configuration = {} :: MAP) :: (preProcessingMillis :: INTEGER, computeMillis :: INTEGER, postProcessingMillis :: INTEGER, nodesCompared :: INTEGER, similarityPairs :: INTEGER, similarityDistribution :: MAP, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodesCompared :: INTEGER',
            name: 'nodesCompared',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarityPairs :: INTEGER',
            name: 'similarityPairs',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarityDistribution :: MAP',
            name: 'similarityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.nodeSimilarity.filtered.stats.estimate': {
        name: 'gds.nodeSimilarity.filtered.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.nodeSimilarity.filtered.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.nodeSimilarity.filtered.stream': {
        name: 'gds.nodeSimilarity.filtered.stream',
        description:
          'The Filtered Node Similarity algorithm compares a set of nodes based on the nodes they are connected to. Two nodes are considered similar if they share many of the same neighbors. The algorithm computes pair-wise similarities based on Jaccard or Overlap metrics. The filtered variant supports limiting which nodes to compare via source and target node filters.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.nodeSimilarity.filtered.stream(graphName :: STRING, configuration = {} :: MAP) :: (node1 :: INTEGER, node2 :: INTEGER, similarity :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'node1 :: INTEGER',
            name: 'node1',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'node2 :: INTEGER',
            name: 'node2',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarity :: FLOAT',
            name: 'similarity',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.nodeSimilarity.filtered.stream.estimate': {
        name: 'gds.nodeSimilarity.filtered.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.nodeSimilarity.filtered.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.nodeSimilarity.filtered.write': {
        name: 'gds.nodeSimilarity.filtered.write',
        description:
          'The Filtered Node Similarity algorithm compares a set of nodes based on the nodes they are connected to. Two nodes are considered similar if they share many of the same neighbors. The algorithm computes pair-wise similarities based on Jaccard or Overlap metrics. The filtered variant supports limiting which nodes to compare via source and target node filters.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.nodeSimilarity.filtered.write(graphName :: STRING, configuration = {} :: MAP) :: (preProcessingMillis :: INTEGER, computeMillis :: INTEGER, writeMillis :: INTEGER, postProcessingMillis :: INTEGER, nodesCompared :: INTEGER, relationshipsWritten :: INTEGER, similarityDistribution :: MAP, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodesCompared :: INTEGER',
            name: 'nodesCompared',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarityDistribution :: MAP',
            name: 'similarityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.nodeSimilarity.filtered.write.estimate': {
        name: 'gds.nodeSimilarity.filtered.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.nodeSimilarity.filtered.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.nodeSimilarity.mutate': {
        name: 'gds.nodeSimilarity.mutate',
        description:
          'The Node Similarity algorithm compares a set of nodes based on the nodes they are connected to. Two nodes are considered similar if they share many of the same neighbors. Node Similarity computes pair-wise similarities based on the Jaccard metric.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.nodeSimilarity.mutate(graphName :: STRING, configuration = {} :: MAP) :: (preProcessingMillis :: INTEGER, computeMillis :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, nodesCompared :: INTEGER, relationshipsWritten :: INTEGER, similarityDistribution :: MAP, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodesCompared :: INTEGER',
            name: 'nodesCompared',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarityDistribution :: MAP',
            name: 'similarityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.nodeSimilarity.mutate.estimate': {
        name: 'gds.nodeSimilarity.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.nodeSimilarity.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.nodeSimilarity.stats': {
        name: 'gds.nodeSimilarity.stats',
        description:
          'The Node Similarity algorithm compares a set of nodes based on the nodes they are connected to. Two nodes are considered similar if they share many of the same neighbors. Node Similarity computes pair-wise similarities based on the Jaccard metric.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.nodeSimilarity.stats(graphName :: STRING, configuration = {} :: MAP) :: (preProcessingMillis :: INTEGER, computeMillis :: INTEGER, postProcessingMillis :: INTEGER, nodesCompared :: INTEGER, similarityPairs :: INTEGER, similarityDistribution :: MAP, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodesCompared :: INTEGER',
            name: 'nodesCompared',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarityPairs :: INTEGER',
            name: 'similarityPairs',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarityDistribution :: MAP',
            name: 'similarityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.nodeSimilarity.stats.estimate': {
        name: 'gds.nodeSimilarity.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.nodeSimilarity.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.nodeSimilarity.stream': {
        name: 'gds.nodeSimilarity.stream',
        description:
          'The Node Similarity algorithm compares a set of nodes based on the nodes they are connected to. Two nodes are considered similar if they share many of the same neighbors. Node Similarity computes pair-wise similarities based on the Jaccard metric.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.nodeSimilarity.stream(graphName :: STRING, configuration = {} :: MAP) :: (node1 :: INTEGER, node2 :: INTEGER, similarity :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'node1 :: INTEGER',
            name: 'node1',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'node2 :: INTEGER',
            name: 'node2',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarity :: FLOAT',
            name: 'similarity',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.nodeSimilarity.stream.estimate': {
        name: 'gds.nodeSimilarity.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.nodeSimilarity.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.nodeSimilarity.write': {
        name: 'gds.nodeSimilarity.write',
        description:
          'The Node Similarity algorithm compares a set of nodes based on the nodes they are connected to. Two nodes are considered similar if they share many of the same neighbors. Node Similarity computes pair-wise similarities based on the Jaccard metric.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.nodeSimilarity.write(graphName :: STRING, configuration = {} :: MAP) :: (preProcessingMillis :: INTEGER, computeMillis :: INTEGER, writeMillis :: INTEGER, postProcessingMillis :: INTEGER, nodesCompared :: INTEGER, relationshipsWritten :: INTEGER, similarityDistribution :: MAP, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodesCompared :: INTEGER',
            name: 'nodesCompared',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarityDistribution :: MAP',
            name: 'similarityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.nodeSimilarity.write.estimate': {
        name: 'gds.nodeSimilarity.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.nodeSimilarity.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.pageRank.mutate': {
        name: 'gds.pageRank.mutate',
        description:
          'Page Rank is an algorithm that measures the transitive influence or connectivity of nodes.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.pageRank.mutate(graphName :: STRING, configuration = {} :: MAP) :: (mutateMillis :: INTEGER, nodePropertiesWritten :: INTEGER, ranIterations :: INTEGER, didConverge :: BOOLEAN, centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.pageRank.mutate.estimate': {
        name: 'gds.pageRank.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.pageRank.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.pageRank.stats': {
        name: 'gds.pageRank.stats',
        description:
          'Page Rank is an algorithm that measures the transitive influence or connectivity of nodes.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.pageRank.stats(graphName :: STRING, configuration = {} :: MAP) :: (ranIterations :: INTEGER, didConverge :: BOOLEAN, centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.pageRank.stats.estimate': {
        name: 'gds.pageRank.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.pageRank.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.pageRank.stream': {
        name: 'gds.pageRank.stream',
        description:
          'Page Rank is an algorithm that measures the transitive influence or connectivity of nodes.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.pageRank.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, score :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'score :: FLOAT',
            name: 'score',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.pageRank.stream.estimate': {
        name: 'gds.pageRank.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.pageRank.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.pageRank.write': {
        name: 'gds.pageRank.write',
        description:
          'Page Rank is an algorithm that measures the transitive influence or connectivity of nodes.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.pageRank.write(graphName :: STRING, configuration = {} :: MAP) :: (writeMillis :: INTEGER, nodePropertiesWritten :: INTEGER, ranIterations :: INTEGER, didConverge :: BOOLEAN, centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.pageRank.write.estimate': {
        name: 'gds.pageRank.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.pageRank.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.pipeline.drop': {
        name: 'gds.pipeline.drop',
        description: 'Drops a pipeline and frees up the resources it occupies.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.pipeline.drop(pipelineName :: STRING, failIfMissing = true :: BOOLEAN) :: (pipelineInfo :: MAP, pipelineName :: STRING, pipelineType :: STRING, creationTime :: ZONED DATETIME)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=true, type=BOOLEAN}',
            description: 'failIfMissing = true :: BOOLEAN',
            name: 'failIfMissing',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'pipelineInfo :: MAP',
            name: 'pipelineInfo',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'pipelineType :: STRING',
            name: 'pipelineType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'creationTime :: ZONED DATETIME',
            name: 'creationTime',
            type: 'ZONED DATETIME',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.pipeline.exists': {
        name: 'gds.pipeline.exists',
        description:
          'Checks if a given pipeline exists in the pipeline catalog.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.pipeline.exists(pipelineName :: STRING) :: (pipelineName :: STRING, pipelineType :: STRING, exists :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'pipelineType :: STRING',
            name: 'pipelineType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'exists :: BOOLEAN',
            name: 'exists',
            type: 'BOOLEAN',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.pipeline.list': {
        name: 'gds.pipeline.list',
        description: 'Lists all pipelines contained in the pipeline catalog.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.pipeline.list(pipelineName = __NO_VALUE :: STRING) :: (pipelineInfo :: MAP, pipelineName :: STRING, pipelineType :: STRING, creationTime :: ZONED DATETIME)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=__NO_VALUE, type=STRING}',
            description: 'pipelineName = __NO_VALUE :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'pipelineInfo :: MAP',
            name: 'pipelineInfo',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'pipelineType :: STRING',
            name: 'pipelineType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'creationTime :: ZONED DATETIME',
            name: 'creationTime',
            type: 'ZONED DATETIME',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.prizeSteinerTree.stream': {
        name: 'gds.prizeSteinerTree.stream',
        description:
          "The prize collecting steiner tree algorithm accepts a weighted undirected graph where each node has a prize property. It then attempts to find a spanning tree that maximizes the sum of prizes of the nodes in the treewhile minimizing the sum of weights for the tree's relationships as well as the sum of prizes for nodes outside the tree.",
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.prizeSteinerTree.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, parentId :: INTEGER, weight :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'parentId :: INTEGER',
            name: 'parentId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'weight :: FLOAT',
            name: 'weight',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.prizeSteinerTree.stream.estimate': {
        name: 'gds.prizeSteinerTree.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.prizeSteinerTree.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.randomWalk.mutate': {
        name: 'gds.randomWalk.mutate',
        description:
          'Random Walk is an algorithm that provides random paths in a graph. It’s similar to how a drunk person traverses a city.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.randomWalk.mutate(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.randomWalk.mutate.estimate': {
        name: 'gds.randomWalk.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.randomWalk.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.randomWalk.stats': {
        name: 'gds.randomWalk.stats',
        description:
          'Random Walk is an algorithm that provides random paths in a graph. It’s similar to how a drunk person traverses a city.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.randomWalk.stats(graphName :: STRING, configuration = {} :: MAP) :: (preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.randomWalk.stats.estimate': {
        name: 'gds.randomWalk.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.randomWalk.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.randomWalk.stream': {
        name: 'gds.randomWalk.stream',
        description:
          'Random Walk is an algorithm that provides random paths in a graph. It’s similar to how a drunk person traverses a city.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.randomWalk.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeIds :: LIST<INTEGER>, path :: PATH)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeIds :: LIST<INTEGER>',
            name: 'nodeIds',
            type: 'LIST<INTEGER>',
          },
          {
            isDeprecated: false,
            description: 'path :: PATH',
            name: 'path',
            type: 'PATH',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.randomWalk.stream.estimate': {
        name: 'gds.randomWalk.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.randomWalk.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.restore': {
        name: 'gds.restore',
        description: 'The restore procedure reads graphs and models from disk.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'gds.restore(configuration = {} :: MAP) :: (restoredGraph :: STRING, restoredModel :: STRING, status :: STRING, restoreMillis :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'restoredGraph :: STRING',
            name: 'restoredGraph',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'restoredModel :: STRING',
            name: 'restoredModel',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'status :: STRING',
            name: 'status',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'restoreMillis :: INTEGER',
            name: 'restoreMillis',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.scaleProperties.mutate': {
        name: 'gds.scaleProperties.mutate',
        description: 'Scale node properties',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'gds.scaleProperties.mutate(graphName :: STRING, configuration = {} :: MAP) :: (scalerStatistics :: MAP, nodePropertiesWritten :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'scalerStatistics :: MAP',
            name: 'scalerStatistics',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.scaleProperties.mutate.estimate': {
        name: 'gds.scaleProperties.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.scaleProperties.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.scaleProperties.stats': {
        name: 'gds.scaleProperties.stats',
        description: 'Scale node properties',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.scaleProperties.stats(graphName :: STRING, configuration = {} :: MAP) :: (scalerStatistics :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'scalerStatistics :: MAP',
            name: 'scalerStatistics',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.scaleProperties.stats.estimate': {
        name: 'gds.scaleProperties.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.scaleProperties.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.scaleProperties.stream': {
        name: 'gds.scaleProperties.stream',
        description: 'Scale node properties',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'gds.scaleProperties.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, scaledProperty :: LIST<FLOAT>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'scaledProperty :: LIST<FLOAT>',
            name: 'scaledProperty',
            type: 'LIST<FLOAT>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.scaleProperties.stream.estimate': {
        name: 'gds.scaleProperties.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.scaleProperties.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.scaleProperties.write': {
        name: 'gds.scaleProperties.write',
        description: 'Scale node properties',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.scaleProperties.write(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, scalerStatistics :: MAP, writeMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'scalerStatistics :: MAP',
            name: 'scalerStatistics',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.scaleProperties.write.estimate': {
        name: 'gds.scaleProperties.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.scaleProperties.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.scc.mutate': {
        name: 'gds.scc.mutate',
        description:
          'The SCC algorithm finds sets of connected nodes in an directed graph, where all nodes in the same set form a connected component.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.scc.mutate(graphName :: STRING, configuration = {} :: MAP) :: (componentCount :: INTEGER, componentDistribution :: MAP, nodePropertiesWritten :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'componentCount :: INTEGER',
            name: 'componentCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'componentDistribution :: MAP',
            name: 'componentDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.scc.mutate.estimate': {
        name: 'gds.scc.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.scc.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.scc.stats': {
        name: 'gds.scc.stats',
        description:
          'The SCC algorithm finds sets of connected nodes in an directed graph, where all nodes in the same set form a connected component.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.scc.stats(graphName :: STRING, configuration = {} :: MAP) :: (componentCount :: INTEGER, componentDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'componentCount :: INTEGER',
            name: 'componentCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'componentDistribution :: MAP',
            name: 'componentDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.scc.stats.estimate': {
        name: 'gds.scc.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.scc.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.scc.stream': {
        name: 'gds.scc.stream',
        description:
          'The SCC algorithm finds sets of connected nodes in an directed graph, where all nodes in the same set form a connected component.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.scc.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, componentId :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'componentId :: INTEGER',
            name: 'componentId',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.scc.stream.estimate': {
        name: 'gds.scc.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.scc.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.scc.write': {
        name: 'gds.scc.write',
        description:
          'The SCC algorithm finds sets of connected nodes in an directed graph, where all nodes in the same set form a connected component.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.scc.write(graphName :: STRING, configuration = {} :: MAP) :: (componentCount :: INTEGER, componentDistribution :: MAP, nodePropertiesWritten :: INTEGER, writeMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'componentCount :: INTEGER',
            name: 'componentCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'componentDistribution :: MAP',
            name: 'componentDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.scc.write.estimate': {
        name: 'gds.scc.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.scc.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.shortestPath.astar.mutate': {
        name: 'gds.shortestPath.astar.mutate',
        description:
          'The A* shortest path algorithm computes the shortest path between a pair of nodes. It uses the relationship weight property to compare path lengths. In addition, this implementation uses the haversine distance as a heuristic to converge faster.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.shortestPath.astar.mutate(graphName :: STRING, configuration = {} :: MAP) :: (relationshipsWritten :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.shortestPath.astar.mutate.estimate': {
        name: 'gds.shortestPath.astar.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.shortestPath.astar.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.shortestPath.astar.stream': {
        name: 'gds.shortestPath.astar.stream',
        description:
          'The A* shortest path algorithm computes the shortest path between a pair of nodes. It uses the relationship weight property to compare path lengths. In addition, this implementation uses the haversine distance as a heuristic to converge faster.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.shortestPath.astar.stream(graphName :: STRING, configuration = {} :: MAP) :: (index :: INTEGER, sourceNode :: INTEGER, targetNode :: INTEGER, totalCost :: FLOAT, nodeIds :: LIST<INTEGER>, costs :: LIST<FLOAT>, path :: PATH)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'index :: INTEGER',
            name: 'index',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'sourceNode :: INTEGER',
            name: 'sourceNode',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'targetNode :: INTEGER',
            name: 'targetNode',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'totalCost :: FLOAT',
            name: 'totalCost',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'nodeIds :: LIST<INTEGER>',
            name: 'nodeIds',
            type: 'LIST<INTEGER>',
          },
          {
            isDeprecated: false,
            description: 'costs :: LIST<FLOAT>',
            name: 'costs',
            type: 'LIST<FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'path :: PATH',
            name: 'path',
            type: 'PATH',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.shortestPath.astar.stream.estimate': {
        name: 'gds.shortestPath.astar.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.shortestPath.astar.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.shortestPath.astar.write': {
        name: 'gds.shortestPath.astar.write',
        description:
          'The A* shortest path algorithm computes the shortest path between a pair of nodes. It uses the relationship weight property to compare path lengths. In addition, this implementation uses the haversine distance as a heuristic to converge faster.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.shortestPath.astar.write(graphName :: STRING, configuration = {} :: MAP) :: (relationshipsWritten :: INTEGER, writeMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.shortestPath.astar.write.estimate': {
        name: 'gds.shortestPath.astar.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.shortestPath.astar.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.shortestPath.dijkstra.mutate': {
        name: 'gds.shortestPath.dijkstra.mutate',
        description:
          'The Dijkstra shortest path algorithm computes the shortest (weighted) path between a pair of nodes.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.shortestPath.dijkstra.mutate(graphName :: STRING, configuration = {} :: MAP) :: (relationshipsWritten :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.shortestPath.dijkstra.mutate.estimate': {
        name: 'gds.shortestPath.dijkstra.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.shortestPath.dijkstra.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.shortestPath.dijkstra.stream': {
        name: 'gds.shortestPath.dijkstra.stream',
        description:
          'The Dijkstra shortest path algorithm computes the shortest (weighted) path between a pair of nodes.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.shortestPath.dijkstra.stream(graphName :: STRING, configuration = {} :: MAP) :: (index :: INTEGER, sourceNode :: INTEGER, targetNode :: INTEGER, totalCost :: FLOAT, nodeIds :: LIST<INTEGER>, costs :: LIST<FLOAT>, path :: PATH)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'index :: INTEGER',
            name: 'index',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'sourceNode :: INTEGER',
            name: 'sourceNode',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'targetNode :: INTEGER',
            name: 'targetNode',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'totalCost :: FLOAT',
            name: 'totalCost',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'nodeIds :: LIST<INTEGER>',
            name: 'nodeIds',
            type: 'LIST<INTEGER>',
          },
          {
            isDeprecated: false,
            description: 'costs :: LIST<FLOAT>',
            name: 'costs',
            type: 'LIST<FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'path :: PATH',
            name: 'path',
            type: 'PATH',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.shortestPath.dijkstra.stream.estimate': {
        name: 'gds.shortestPath.dijkstra.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.shortestPath.dijkstra.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.shortestPath.dijkstra.write': {
        name: 'gds.shortestPath.dijkstra.write',
        description:
          'The Dijkstra shortest path algorithm computes the shortest (weighted) path between a pair of nodes.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.shortestPath.dijkstra.write(graphName :: STRING, configuration = {} :: MAP) :: (relationshipsWritten :: INTEGER, writeMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.shortestPath.dijkstra.write.estimate': {
        name: 'gds.shortestPath.dijkstra.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.shortestPath.dijkstra.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.shortestPath.yens.mutate': {
        name: 'gds.shortestPath.yens.mutate',
        description:
          "The Yen's shortest path algorithm computes the k shortest (weighted) paths between a pair of nodes.",
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.shortestPath.yens.mutate(graphName :: STRING, configuration = {} :: MAP) :: (relationshipsWritten :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.shortestPath.yens.mutate.estimate': {
        name: 'gds.shortestPath.yens.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.shortestPath.yens.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.shortestPath.yens.stream': {
        name: 'gds.shortestPath.yens.stream',
        description:
          "The Yen's shortest path algorithm computes the k shortest (weighted) paths between a pair of nodes.",
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.shortestPath.yens.stream(graphName :: STRING, configuration = {} :: MAP) :: (index :: INTEGER, sourceNode :: INTEGER, targetNode :: INTEGER, totalCost :: FLOAT, nodeIds :: LIST<INTEGER>, costs :: LIST<FLOAT>, path :: PATH)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'index :: INTEGER',
            name: 'index',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'sourceNode :: INTEGER',
            name: 'sourceNode',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'targetNode :: INTEGER',
            name: 'targetNode',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'totalCost :: FLOAT',
            name: 'totalCost',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'nodeIds :: LIST<INTEGER>',
            name: 'nodeIds',
            type: 'LIST<INTEGER>',
          },
          {
            isDeprecated: false,
            description: 'costs :: LIST<FLOAT>',
            name: 'costs',
            type: 'LIST<FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'path :: PATH',
            name: 'path',
            type: 'PATH',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.shortestPath.yens.stream.estimate': {
        name: 'gds.shortestPath.yens.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.shortestPath.yens.stream.estimate(graphName :: ANY, configuration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: ANY',
            name: 'graphName',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.shortestPath.yens.write': {
        name: 'gds.shortestPath.yens.write',
        description:
          "The Yen's shortest path algorithm computes the k shortest (weighted) paths between a pair of nodes.",
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.shortestPath.yens.write(graphName :: STRING, configuration = {} :: MAP) :: (relationshipsWritten :: INTEGER, writeMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.shortestPath.yens.write.estimate': {
        name: 'gds.shortestPath.yens.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.shortestPath.yens.write.estimate(graphName :: ANY, configuration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: ANY',
            name: 'graphName',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.sllpa.mutate': {
        name: 'gds.sllpa.mutate',
        description:
          'The Speaker Listener Label Propagation algorithm is a fast algorithm for finding overlapping communities in a graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.sllpa.mutate(graphName :: STRING, configuration = {} :: MAP) :: (ranIterations :: INTEGER, didConverge :: BOOLEAN, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, mutateMillis :: INTEGER, nodePropertiesWritten :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.sllpa.mutate.estimate': {
        name: 'gds.sllpa.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.sllpa.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.sllpa.stats': {
        name: 'gds.sllpa.stats',
        description:
          'The Speaker Listener Label Propagation algorithm is a fast algorithm for finding overlapping communities in a graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.sllpa.stats(graphName :: STRING, configuration = {} :: MAP) :: (ranIterations :: INTEGER, didConverge :: BOOLEAN, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.sllpa.stats.estimate': {
        name: 'gds.sllpa.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.sllpa.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.sllpa.stream': {
        name: 'gds.sllpa.stream',
        description:
          'The Speaker Listener Label Propagation algorithm is a fast algorithm for finding overlapping communities in a graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.sllpa.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, values :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'values :: MAP',
            name: 'values',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.sllpa.stream.estimate': {
        name: 'gds.sllpa.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.sllpa.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.sllpa.write': {
        name: 'gds.sllpa.write',
        description:
          'The Speaker Listener Label Propagation algorithm is a fast algorithm for finding overlapping communities in a graph.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.sllpa.write(graphName :: STRING, configuration = {} :: MAP) :: (ranIterations :: INTEGER, didConverge :: BOOLEAN, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, writeMillis :: INTEGER, nodePropertiesWritten :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.sllpa.write.estimate': {
        name: 'gds.sllpa.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.sllpa.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.spanningTree.mutate': {
        name: 'gds.spanningTree.mutate',
        description:
          'The spanning tree algorithm visits all nodes that are in the same connected component as the starting node, and returns a spanning tree of all nodes in the component where the total weight of the relationships is either minimized or maximized.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.spanningTree.mutate(graphName :: STRING, configuration = {} :: MAP) :: (mutateMillis :: INTEGER, relationshipsWritten :: INTEGER, effectiveNodeCount :: INTEGER, totalWeight :: FLOAT, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'effectiveNodeCount :: INTEGER',
            name: 'effectiveNodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'totalWeight :: FLOAT',
            name: 'totalWeight',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.spanningTree.mutate.estimate': {
        name: 'gds.spanningTree.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.spanningTree.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.spanningTree.stats': {
        name: 'gds.spanningTree.stats',
        description:
          'The spanning tree algorithm visits all nodes that are in the same connected component as the starting node, and returns a spanning tree of all nodes in the component where the total weight of the relationships is either minimized or maximized.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.spanningTree.stats(graphName :: STRING, configuration = {} :: MAP) :: (effectiveNodeCount :: INTEGER, totalWeight :: FLOAT, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'effectiveNodeCount :: INTEGER',
            name: 'effectiveNodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'totalWeight :: FLOAT',
            name: 'totalWeight',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.spanningTree.stats.estimate': {
        name: 'gds.spanningTree.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.spanningTree.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.spanningTree.stream': {
        name: 'gds.spanningTree.stream',
        description:
          'The spanning tree algorithm visits all nodes that are in the same connected component as the starting node, and returns a spanning tree of all nodes in the component where the total weight of the relationships is either minimized or maximized.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.spanningTree.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, parentId :: INTEGER, weight :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'parentId :: INTEGER',
            name: 'parentId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'weight :: FLOAT',
            name: 'weight',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.spanningTree.stream.estimate': {
        name: 'gds.spanningTree.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.spanningTree.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.spanningTree.write': {
        name: 'gds.spanningTree.write',
        description:
          'The spanning tree algorithm visits all nodes that are in the same connected component as the starting node, and returns a spanning tree of all nodes in the component where the total weight of the relationships is either minimized or maximized.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.spanningTree.write(graphName :: STRING, configuration = {} :: MAP) :: (writeMillis :: INTEGER, relationshipsWritten :: INTEGER, effectiveNodeCount :: INTEGER, totalWeight :: FLOAT, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'effectiveNodeCount :: INTEGER',
            name: 'effectiveNodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'totalWeight :: FLOAT',
            name: 'totalWeight',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.spanningTree.write.estimate': {
        name: 'gds.spanningTree.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.spanningTree.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.steinerTree.mutate': {
        name: 'gds.steinerTree.mutate',
        description:
          'The steiner tree algorithm accepts a source node, as well as a list of target nodes. It then attempts to find a spanning tree where there is a path from the source node to each target node, such that the total weight of the relationships is as low as possible.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.steinerTree.mutate(graphName :: STRING, configuration = {} :: MAP) :: (mutateMillis :: INTEGER, relationshipsWritten :: INTEGER, effectiveNodeCount :: INTEGER, effectiveTargetNodesCount :: INTEGER, totalWeight :: FLOAT, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'effectiveNodeCount :: INTEGER',
            name: 'effectiveNodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'effectiveTargetNodesCount :: INTEGER',
            name: 'effectiveTargetNodesCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'totalWeight :: FLOAT',
            name: 'totalWeight',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.steinerTree.mutate.estimate': {
        name: 'gds.steinerTree.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.steinerTree.mutate.estimate(graphName :: ANY, configuration = {} :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: ANY',
            name: 'graphName',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.steinerTree.stats': {
        name: 'gds.steinerTree.stats',
        description:
          'The steiner tree algorithm accepts a source node, as well as a list of target nodes. It then attempts to find a spanning tree where there is a path from the source node to each target node, such that the total weight of the relationships is as low as possible.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.steinerTree.stats(graphName :: STRING, configuration = {} :: MAP) :: (effectiveNodeCount :: INTEGER, effectiveTargetNodesCount :: INTEGER, totalWeight :: FLOAT, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'effectiveNodeCount :: INTEGER',
            name: 'effectiveNodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'effectiveTargetNodesCount :: INTEGER',
            name: 'effectiveTargetNodesCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'totalWeight :: FLOAT',
            name: 'totalWeight',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.steinerTree.stats.estimate': {
        name: 'gds.steinerTree.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.steinerTree.stats.estimate(graphName :: ANY, configuration = {} :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: ANY',
            name: 'graphName',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.steinerTree.stream': {
        name: 'gds.steinerTree.stream',
        description:
          'The steiner tree algorithm accepts a source node, as well as a list of target nodes. It then attempts to find a spanning tree where there is a path from the source node to each target node, such that the total weight of the relationships is as low as possible.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.steinerTree.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, parentId :: INTEGER, weight :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'parentId :: INTEGER',
            name: 'parentId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'weight :: FLOAT',
            name: 'weight',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.steinerTree.stream.estimate': {
        name: 'gds.steinerTree.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.steinerTree.stream.estimate(graphName :: ANY, configuration = {} :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: ANY',
            name: 'graphName',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.steinerTree.write': {
        name: 'gds.steinerTree.write',
        description:
          'The steiner tree algorithm accepts a source node, as well as a list of target nodes. It then attempts to find a spanning tree where there is a path from the source node to each target node, such that the total weight of the relationships is as low as possible.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.steinerTree.write(graphName :: STRING, configuration = {} :: MAP) :: (writeMillis :: INTEGER, relationshipsWritten :: INTEGER, effectiveNodeCount :: INTEGER, effectiveTargetNodesCount :: INTEGER, totalWeight :: FLOAT, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'effectiveNodeCount :: INTEGER',
            name: 'effectiveNodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'effectiveTargetNodesCount :: INTEGER',
            name: 'effectiveTargetNodesCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'totalWeight :: FLOAT',
            name: 'totalWeight',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.steinerTree.write.estimate': {
        name: 'gds.steinerTree.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.steinerTree.write.estimate(graphName :: ANY, configuration = {} :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: ANY',
            name: 'graphName',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.systemMonitor': {
        name: 'gds.systemMonitor',
        description:
          "Get an overview of the system's workload and available resources",
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.systemMonitor() :: (freeHeap :: INTEGER, totalHeap :: INTEGER, maxHeap :: INTEGER, jvmAvailableCpuCores :: INTEGER, availableCpuCoresNotRequested :: INTEGER, jvmHeapStatus :: MAP, ongoingGdsProcedures :: LIST<MAP>)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'freeHeap :: INTEGER',
            name: 'freeHeap',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'totalHeap :: INTEGER',
            name: 'totalHeap',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'maxHeap :: INTEGER',
            name: 'maxHeap',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'jvmAvailableCpuCores :: INTEGER',
            name: 'jvmAvailableCpuCores',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'availableCpuCoresNotRequested :: INTEGER',
            name: 'availableCpuCoresNotRequested',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'jvmHeapStatus :: MAP',
            name: 'jvmHeapStatus',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'ongoingGdsProcedures :: LIST<MAP>',
            name: 'ongoingGdsProcedures',
            type: 'LIST<MAP>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.triangleCount.mutate': {
        name: 'gds.triangleCount.mutate',
        description:
          'Triangle counting is a community detection graph algorithm that is used to determine the number of triangles passing through each node in the graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.triangleCount.mutate(graphName :: STRING, configuration = {} :: MAP) :: (mutateMillis :: INTEGER, nodePropertiesWritten :: INTEGER, globalTriangleCount :: INTEGER, nodeCount :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'globalTriangleCount :: INTEGER',
            name: 'globalTriangleCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.triangleCount.mutate.estimate': {
        name: 'gds.triangleCount.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.triangleCount.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.triangleCount.stats': {
        name: 'gds.triangleCount.stats',
        description:
          'Triangle counting is a community detection graph algorithm that is used to determine the number of triangles passing through each node in the graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.triangleCount.stats(graphName :: STRING, configuration = {} :: MAP) :: (globalTriangleCount :: INTEGER, nodeCount :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'globalTriangleCount :: INTEGER',
            name: 'globalTriangleCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.triangleCount.stats.estimate': {
        name: 'gds.triangleCount.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.triangleCount.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.triangleCount.stream': {
        name: 'gds.triangleCount.stream',
        description:
          'Triangle counting is a community detection graph algorithm that is used to determine the number of triangles passing through each node in the graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.triangleCount.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, triangleCount :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'triangleCount :: INTEGER',
            name: 'triangleCount',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.triangleCount.stream.estimate': {
        name: 'gds.triangleCount.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.triangleCount.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.triangleCount.write': {
        name: 'gds.triangleCount.write',
        description:
          'Triangle counting is a community detection graph algorithm that is used to determine the number of triangles passing through each node in the graph.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.triangleCount.write(graphName :: STRING, configuration = {} :: MAP) :: (writeMillis :: INTEGER, nodePropertiesWritten :: INTEGER, globalTriangleCount :: INTEGER, nodeCount :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'globalTriangleCount :: INTEGER',
            name: 'globalTriangleCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.triangleCount.write.estimate': {
        name: 'gds.triangleCount.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.triangleCount.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.triangles': {
        name: 'gds.triangles',
        description:
          'Triangles streams the nodeIds of each triangle in the graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.triangles(graphName :: STRING, configuration = {} :: MAP) :: (nodeA :: INTEGER, nodeB :: INTEGER, nodeC :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeA :: INTEGER',
            name: 'nodeA',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeB :: INTEGER',
            name: 'nodeB',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeC :: INTEGER',
            name: 'nodeC',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.userLog': {
        name: 'gds.userLog',
        description: 'Log warnings and hints for currently running tasks.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'gds.userLog(jobId =  :: STRING) :: (taskName :: STRING, message :: STRING, timeStarted :: LOCAL TIME)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'jobId =  :: STRING',
            name: 'jobId',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'taskName :: STRING',
            name: 'taskName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'message :: STRING',
            name: 'message',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'timeStarted :: LOCAL TIME',
            name: 'timeStarted',
            type: 'LOCAL TIME',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.version': {
        name: 'gds.version',
        description:
          'CALL gds.version() | Return the installed graph data science library version.',
        mode: 'READ',
        worksOnSystem: false,
        signature: 'gds.version() :: (gdsVersion :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'gdsVersion :: STRING',
            name: 'gdsVersion',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.wcc.mutate': {
        name: 'gds.wcc.mutate',
        description:
          'The WCC algorithm finds sets of connected nodes in an undirected graph, where all nodes in the same set form a connected component.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.wcc.mutate(graphName :: STRING, configuration = {} :: MAP) :: (mutateMillis :: INTEGER, nodePropertiesWritten :: INTEGER, componentCount :: INTEGER, componentDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'componentCount :: INTEGER',
            name: 'componentCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'componentDistribution :: MAP',
            name: 'componentDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.wcc.mutate.estimate': {
        name: 'gds.wcc.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.wcc.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.wcc.stats': {
        name: 'gds.wcc.stats',
        description:
          'The WCC algorithm finds sets of connected nodes in an undirected graph, where all nodes in the same set form a connected component.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.wcc.stats(graphName :: STRING, configuration = {} :: MAP) :: (componentCount :: INTEGER, componentDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'componentCount :: INTEGER',
            name: 'componentCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'componentDistribution :: MAP',
            name: 'componentDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.wcc.stats.estimate': {
        name: 'gds.wcc.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.wcc.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.wcc.stream': {
        name: 'gds.wcc.stream',
        description:
          'The WCC algorithm finds sets of connected nodes in an undirected graph, where all nodes in the same set form a connected component.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.wcc.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, componentId :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'componentId :: INTEGER',
            name: 'componentId',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.wcc.stream.estimate': {
        name: 'gds.wcc.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.wcc.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.wcc.write': {
        name: 'gds.wcc.write',
        description:
          'The WCC algorithm finds sets of connected nodes in an undirected graph, where all nodes in the same set form a connected component.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.wcc.write(graphName :: STRING, configuration = {} :: MAP) :: (writeMillis :: INTEGER, nodePropertiesWritten :: INTEGER, componentCount :: INTEGER, componentDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'componentCount :: INTEGER',
            name: 'componentCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'componentDistribution :: MAP',
            name: 'componentDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.wcc.write.estimate': {
        name: 'gds.wcc.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.wcc.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'tx.getMetaData': {
        name: 'tx.getMetaData',
        description: 'Provides attached transaction metadata.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature: 'tx.getMetaData() :: (metadata :: MAP)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'Metadata about the transaction.',
            name: 'metadata',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'tx.setMetaData': {
        name: 'tx.setMetaData',
        description:
          'Attaches a map of data to the transaction. The data will be printed when listing queries, and inserted into the query log.',
        mode: 'DBMS',
        worksOnSystem: false,
        signature: 'tx.setMetaData(data :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'Metadata to attach to the transaction.',
            name: 'data',
            type: 'MAP',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
    }),
    'CYPHER 25': asNeo4jProcedures({
      'apoc.algo.aStar': {
        name: 'apoc.algo.aStar',
        description:
          'Runs the A* search algorithm to find the optimal path between two `NODE` values, using the given `RELATIONSHIP` property name for the cost function.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.algo.aStar(startNode :: NODE, endNode :: NODE, relTypesAndDirections :: STRING, weightPropertyName :: STRING, latPropertyName :: STRING, lonPropertyName :: STRING) :: (path :: PATH, weight :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The node to start the search from.',
            name: 'startNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The node to end the search on.',
            name: 'endNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description:
              "The relationship types to restrict the algorithm to. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
            name: 'relTypesAndDirections',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the property to use as the weight.',
            name: 'weightPropertyName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the property to use as the latitude.',
            name: 'latPropertyName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the property to use as the longitude.',
            name: 'lonPropertyName',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The path result.',
            name: 'path',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            description: 'The weight of the given path.',
            name: 'weight',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.algo.aStarConfig': {
        name: 'apoc.algo.aStarConfig',
        description:
          'Runs the A* search algorithm to find the optimal path between two `NODE` values, using the given `RELATIONSHIP` property name for the cost function.\nThis procedure looks for weight, latitude and longitude properties in the config.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.algo.aStarConfig(startNode :: NODE, endNode :: NODE, relTypesAndDirections :: STRING, config :: MAP) :: (path :: PATH, weight :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The node to start the search from.',
            name: 'startNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The node to end the search on.',
            name: 'endNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description:
              "The relationship types to restrict the algorithm to. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
            name: 'relTypesAndDirections',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              "{ weight = 'distance' :: STRING, default = Double.MAX_VALUE :: FLOAT, y = 'latitude' :: STRING, x = 'longitude' :: STRING, pointPropName :: STRING }",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The path result.',
            name: 'path',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            description: 'The weight of the given path.',
            name: 'weight',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.algo.allSimplePaths': {
        name: 'apoc.algo.allSimplePaths',
        description:
          'Runs a search algorithm to find all of the simple paths between the given `RELATIONSHIP` values, up to a max depth described by `maxNodes`.\nThe returned paths will not contain loops.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.algo.allSimplePaths(startNode :: NODE, endNode :: NODE, relTypesAndDirections :: STRING, maxNodes :: INTEGER) :: (path :: PATH)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The node to start the search from.',
            name: 'startNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The node to end the search on.',
            name: 'endNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description:
              "The relationship types to restrict the algorithm to. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
            name: 'relTypesAndDirections',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The max depth (in terms of nodes) the algorithm will explore.',
            name: 'maxNodes',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The path result.',
            name: 'path',
            type: 'PATH',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.algo.cover': {
        name: 'apoc.algo.cover',
        description:
          'Returns all `RELATIONSHIP` values connecting the given set of `NODE` values.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature: 'apoc.algo.cover(nodes :: ANY) :: (rel :: RELATIONSHIP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The nodes to look for connected relationships on.',
            name: 'nodes',
            type: 'ANY',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The relationships connected to the given nodes.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.algo.dijkstra': {
        name: 'apoc.algo.dijkstra',
        description:
          "Runs Dijkstra's algorithm using the given `RELATIONSHIP` property as the cost function.",
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.algo.dijkstra(startNode :: NODE, endNode :: NODE, relTypesAndDirections :: STRING, weightPropertyName :: STRING, defaultWeight = NaN :: FLOAT, numberOfWantedPaths = 1 :: INTEGER) :: (path :: PATH, weight :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The node to start the search from.',
            name: 'startNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The node to end the search on.',
            name: 'endNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description:
              "The relationship types to restrict the algorithm to. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
            name: 'relTypesAndDirections',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the property to use as the weight.',
            name: 'weightPropertyName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=NaN, type=FLOAT}',
            description:
              'The `defaultWeight` is used when no specific weight is provided for the given relationship or node. The default value for defaultWeight is NaN.',
            name: 'defaultWeight',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=1, type=INTEGER}',
            description: 'The number of wanted paths to return.',
            name: 'numberOfWantedPaths',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The path result.',
            name: 'path',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            description: 'The weight of the given path.',
            name: 'weight',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.atomic.add': {
        name: 'apoc.atomic.add',
        description:
          'Sets the given property to the sum of itself and the given `INTEGER` or `FLOAT` value.\nThe procedure then sets the property to the returned sum.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.atomic.add(container :: ANY, propertyName :: STRING, number :: INTEGER | FLOAT, retryAttempts = 5 :: INTEGER) :: (container :: ANY, property :: STRING, oldValue :: ANY, newValue :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node or relationship that contains the property to which the value will be added.',
            name: 'container',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'The name of the property whose value will be added to.',
            name: 'propertyName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number to add.',
            name: 'number',
            type: 'INTEGER | FLOAT',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=5, type=INTEGER}',
            description: 'The max retry attempts.',
            name: 'retryAttempts',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated node or relationship.',
            name: 'container',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The name of the updated property.',
            name: 'property',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The original value on the property.',
            name: 'oldValue',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The new value on the property.',
            name: 'newValue',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.atomic.concat': {
        name: 'apoc.atomic.concat',
        description:
          'Sets the given property to the concatenation of itself and the `STRING` value.\nThe procedure then sets the property to the returned `STRING`.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.atomic.concat(container :: ANY, propertyName :: STRING, string :: STRING, retryAttempts = 5 :: INTEGER) :: (container :: ANY, property :: STRING, oldValue :: ANY, newValue :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node or relationship that contains the property to which the value will be concatenated.',
            name: 'container',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The name of the property to be concatenated.',
            name: 'propertyName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The string value to concatenate with the property.',
            name: 'string',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=5, type=INTEGER}',
            description: 'The max retry attempts.',
            name: 'retryAttempts',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated node or relationship.',
            name: 'container',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The name of the updated property.',
            name: 'property',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The original value on the property.',
            name: 'oldValue',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The new value on the property.',
            name: 'newValue',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.atomic.insert': {
        name: 'apoc.atomic.insert',
        description:
          'Inserts a value at position into the `LIST<ANY>` value of a property.\nThe procedure then sets the result back on the property.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.atomic.insert(container :: ANY, propertyName :: STRING, position :: INTEGER, value :: ANY, retryAttempts = 5 :: INTEGER) :: (container :: ANY, property :: STRING, oldValue :: ANY, newValue :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node or relationship that has a property containing a list.',
            name: 'container',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'The name of the property into which the value will be inserted.',
            name: 'propertyName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The position in the list to insert the item into.',
            name: 'position',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The value to insert.',
            name: 'value',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=5, type=INTEGER}',
            description: 'The max retry attempts.',
            name: 'retryAttempts',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated node or relationship.',
            name: 'container',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The name of the updated property.',
            name: 'property',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The original value on the property.',
            name: 'oldValue',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The new value on the property.',
            name: 'newValue',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.atomic.remove': {
        name: 'apoc.atomic.remove',
        description:
          'Removes the element at position from the `LIST<ANY>` value of a property.\nThe procedure then sets the property to the resulting `LIST<ANY>` value.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.atomic.remove(container :: ANY, propertyName :: STRING, position :: INTEGER, retryAttempts = 5 :: INTEGER) :: (container :: ANY, property :: STRING, oldValue :: ANY, newValue :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node or relationship that has a property containing a list.',
            name: 'container',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'The name of the property from which the value will be removed.',
            name: 'propertyName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The position in the list to remove the item from.',
            name: 'position',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=5, type=INTEGER}',
            description: 'The max retry attempts.',
            name: 'retryAttempts',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated node or relationship.',
            name: 'container',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The name of the updated property.',
            name: 'property',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The original value on the property.',
            name: 'oldValue',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The new value on the property.',
            name: 'newValue',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.atomic.subtract': {
        name: 'apoc.atomic.subtract',
        description:
          'Sets the property of a value to itself minus the given `INTEGER` or `FLOAT` value.\nThe procedure then sets the property to the returned sum.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.atomic.subtract(container :: ANY, propertyName :: STRING, number :: INTEGER | FLOAT, retryAttempts = 5 :: INTEGER) :: (container :: ANY, property :: STRING, oldValue :: ANY, newValue :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node or relationship that contains the property from which the value will be subtracted.',
            name: 'container',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'The name of the property from which the value will be subtracted.',
            name: 'propertyName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number to subtract.',
            name: 'number',
            type: 'INTEGER | FLOAT',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=5, type=INTEGER}',
            description: 'The max retry attempts.',
            name: 'retryAttempts',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated node or relationship.',
            name: 'container',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The name of the updated property.',
            name: 'property',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The original value on the property.',
            name: 'oldValue',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The new value on the property.',
            name: 'newValue',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.atomic.update': {
        name: 'apoc.atomic.update',
        description: 'Updates the value of a property with a Cypher operation.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.atomic.update(container :: ANY, propertyName :: STRING, operation :: STRING, retryAttempts = 5 :: INTEGER) :: (container :: ANY, property :: STRING, oldValue :: ANY, newValue :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node or relationship with the property to be updated.',
            name: 'container',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The name of the property to be updated.',
            name: 'propertyName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The operation to perform to update the property.',
            name: 'operation',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=5, type=INTEGER}',
            description: 'The max retry attempts.',
            name: 'retryAttempts',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated node or relationship.',
            name: 'container',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The name of the updated property.',
            name: 'property',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The original value on the property.',
            name: 'oldValue',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The new value on the property.',
            name: 'newValue',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.case': {
        name: 'apoc.case',
        description:
          'For each pair of conditional and read-only queries in the given `LIST<ANY>`, this procedure will run the first query for which the conditional is evaluated to true. If none of the conditionals are true, the `ELSE` query will run instead.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.case(conditionals :: LIST<ANY>, elseQuery =  :: STRING, params = {} :: MAP) :: (value :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A list of conditionals, where each conditional is a pair: the first element is a predicate, and the second is a Cypher query to be executed based on that predicate.',
            name: 'conditionals',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              'A Cypher query to evaluate if all conditionals evaluate to false.',
            name: 'elseQuery',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              'A map of parameters to be used in the executed Cypher query.',
            name: 'params',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The result returned from the evaluated Cypher query.',
            name: 'value',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.coll.elements': {
        name: 'apoc.coll.elements',
        description:
          'Deconstructs a `LIST<ANY>` into identifiers indicating their specific type.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.coll.elements(coll :: LIST<ANY>, limit = -1 :: INTEGER, offset = 0 :: INTEGER) :: (_1 :: ANY, _2 :: ANY, _3 :: ANY, _4 :: ANY, _5 :: ANY, _6 :: ANY, _7 :: ANY, _8 :: ANY, _9 :: ANY, _10 :: ANY, _1s :: STRING, _2s :: STRING, _3s :: STRING, _4s :: STRING, _5s :: STRING, _6s :: STRING, _7s :: STRING, _8s :: STRING, _9s :: STRING, _10s :: STRING, _1i :: INTEGER, _2i :: INTEGER, _3i :: INTEGER, _4i :: INTEGER, _5i :: INTEGER, _6i :: INTEGER, _7i :: INTEGER, _8i :: INTEGER, _9i :: INTEGER, _10i :: INTEGER, _1f :: FLOAT, _2f :: FLOAT, _3f :: FLOAT, _4f :: FLOAT, _5f :: FLOAT, _6f :: FLOAT, _7f :: FLOAT, _8f :: FLOAT, _9f :: FLOAT, _10f :: FLOAT, _1b :: BOOLEAN, _2b :: BOOLEAN, _3b :: BOOLEAN, _4b :: BOOLEAN, _5b :: BOOLEAN, _6b :: BOOLEAN, _7b :: BOOLEAN, _8b :: BOOLEAN, _9b :: BOOLEAN, _10b :: BOOLEAN, _1l :: LIST<ANY>, _2l :: LIST<ANY>, _3l :: LIST<ANY>, _4l :: LIST<ANY>, _5l :: LIST<ANY>, _6l :: LIST<ANY>, _7l :: LIST<ANY>, _8l :: LIST<ANY>, _9l :: LIST<ANY>, _10l :: LIST<ANY>, _1m :: MAP, _2m :: MAP, _3m :: MAP, _4m :: MAP, _5m :: MAP, _6m :: MAP, _7m :: MAP, _8m :: MAP, _9m :: MAP, _10m :: MAP, _1n :: NODE, _2n :: NODE, _3n :: NODE, _4n :: NODE, _5n :: NODE, _6n :: NODE, _7n :: NODE, _8n :: NODE, _9n :: NODE, _10n :: NODE, _1r :: RELATIONSHIP, _2r :: RELATIONSHIP, _3r :: RELATIONSHIP, _4r :: RELATIONSHIP, _5r :: RELATIONSHIP, _6r :: RELATIONSHIP, _7r :: RELATIONSHIP, _8r :: RELATIONSHIP, _9r :: RELATIONSHIP, _10r :: RELATIONSHIP, _1p :: PATH, _2p :: PATH, _3p :: PATH, _4p :: PATH, _5p :: PATH, _6p :: PATH, _7p :: PATH, _8p :: PATH, _9p :: PATH, _10p :: PATH, elements :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A list of values to deconstruct.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=-1, type=INTEGER}',
            description:
              'The maximum size of elements to deconstruct from the given list.',
            name: 'limit',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=0, type=INTEGER}',
            description: 'The offset to start deconstructing from.',
            name: 'offset',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The value of the first item.',
            name: '_1',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The value of the second item.',
            name: '_2',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The value of the third item.',
            name: '_3',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The value of the fourth item.',
            name: '_4',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The value of the fifth item.',
            name: '_5',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The value of the sixth item.',
            name: '_6',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The value of the seventh item.',
            name: '_7',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The value of the eighth item.',
            name: '_8',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The value of the ninth item.',
            name: '_9',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The value of the tenth item.',
            name: '_10',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'The value of the first item, if it is a string value.',
            name: '_1s',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The value of the second item, if it is a string value.',
            name: '_2s',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The value of the third item, if it is a string value.',
            name: '_3s',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The value of the fourth item, if it is a string value.',
            name: '_4s',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The value of the fifth item, if it is a string value.',
            name: '_5s',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The value of the sixth item, if it is a string value.',
            name: '_6s',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The value of the seventh item, if it is a string value.',
            name: '_7s',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The value of the eighth item, if it is a string value.',
            name: '_8s',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The value of the ninth item, if it is a string value.',
            name: '_9s',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The value of the tenth item, if it is a string value.',
            name: '_10s',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The value of the first item, if it is an integer value.',
            name: '_1i',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'The value of the second item, if it is an integer value.',
            name: '_2i',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'The value of the third item, if it is an integer value.',
            name: '_3i',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'The value of the fourth item, if it is an integer value.',
            name: '_4i',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'The value of the fifth item, if it is an integer value.',
            name: '_5i',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'The value of the sixth item, if it is an integer value.',
            name: '_6i',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'The value of the seventh item, if it is an integer value.',
            name: '_7i',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'The value of the eighth item, if it is an integer value.',
            name: '_8i',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'The value of the ninth item, if it is an integer value.',
            name: '_9i',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'The value of the tenth item, if it is an integer value.',
            name: '_10i',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The value of the first item, if it is a float value.',
            name: '_1f',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description:
              'The value of the second item, if it is a float value.',
            name: '_2f',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'The value of the third item, if it is a float value.',
            name: '_3f',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description:
              'The value of the fourth item, if it is a float value.',
            name: '_4f',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'The value of the fifth item, if it is a float value.',
            name: '_5f',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'The value of the sixth item, if it is a float value.',
            name: '_6f',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description:
              'The value of the seventh item, if it is a float value.',
            name: '_7f',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description:
              'The value of the eighth item, if it is a float value.',
            name: '_8f',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'The value of the ninth item, if it is a float value.',
            name: '_9f',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'The value of the tenth item, if it is a float value.',
            name: '_10f',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description:
              'The value of the first item, if it is a boolean value.',
            name: '_1b',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description:
              'The value of the second item, if it is a boolean value.',
            name: '_2b',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description:
              'The value of the third item, if it is a boolean value.',
            name: '_3b',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description:
              'The value of the fourth item, if it is a boolean value.',
            name: '_4b',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description:
              'The value of the fifth item, if it is a boolean value.',
            name: '_5b',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description:
              'The value of the sixth item, if it is a boolean value.',
            name: '_6b',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description:
              'The value of the seventh item, if it is a boolean value.',
            name: '_7b',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description:
              'The value of the eighth item, if it is a boolean value.',
            name: '_8b',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description:
              'The value of the ninth item, if it is a boolean value.',
            name: '_9b',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description:
              'The value of the tenth item, if it is a boolean value.',
            name: '_10b',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The value of the first item, if it is a list value.',
            name: '_1l',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The value of the second item, if it is a list value.',
            name: '_2l',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The value of the third item, if it is a list value.',
            name: '_3l',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The value of the fourth item, if it is a list value.',
            name: '_4l',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The value of the fifth item, if it is a list value.',
            name: '_5l',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The value of the sixth item, if it is a list value.',
            name: '_6l',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description:
              'The value of the seventh item, if it is a list value.',
            name: '_7l',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The value of the eighth item, if it is a list value.',
            name: '_8l',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The value of the ninth item, if it is a list value.',
            name: '_9l',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The value of the tenth item, if it is a list value.',
            name: '_10l',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The value of the first item, if it is a map value.',
            name: '_1m',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The value of the second item, if it is a map value.',
            name: '_2m',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The value of the third item, if it is a map value.',
            name: '_3m',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The value of the fourth item, if it is a map value.',
            name: '_4m',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The value of the fifth item, if it is a map value.',
            name: '_5m',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The value of the sixth item, if it is a map value.',
            name: '_6m',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The value of the seventh item, if it is a map value.',
            name: '_7m',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The value of the eighth item, if it is a map value.',
            name: '_8m',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The value of the ninth item, if it is a map value.',
            name: '_9m',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The value of the tenth item, if it is a map value.',
            name: '_10m',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The value of the first item, if it is a node value.',
            name: '_1n',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The value of the second item, if it is a node value.',
            name: '_2n',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The value of the third item, if it is a node value.',
            name: '_3n',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The value of the fourth item, if it is a node value.',
            name: '_4n',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The value of the fifth item, if it is a node value.',
            name: '_5n',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The value of the sixth item, if it is a node value.',
            name: '_6n',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description:
              'The value of the seventh item, if it is a node value.',
            name: '_7n',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The value of the eighth item, if it is a node value.',
            name: '_8n',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The value of the ninth item, if it is a node value.',
            name: '_9n',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The value of the tenth item, if it is a node value.',
            name: '_10n',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description:
              'The value of the first item, if it is a relationship value.',
            name: '_1r',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description:
              'The value of the second item, if it is a relationship value.',
            name: '_2r',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description:
              'The value of the third item, if it is a relationship value.',
            name: '_3r',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description:
              'The value of the fourth item, if it is a relationship value.',
            name: '_4r',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description:
              'The value of the fifth item, if it is a relationship value.',
            name: '_5r',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description:
              'The value of the sixth item, if it is a relationship value.',
            name: '_6r',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description:
              'The value of the seventh item, if it is a relationship value.',
            name: '_7r',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description:
              'The value of the eighth item, if it is a relationship value.',
            name: '_8r',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description:
              'The value of the ninth item, if it is a relationship value.',
            name: '_9r',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description:
              'The value of the tenth item, if it is a relationship value.',
            name: '_10r',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description: 'The value of the first item, if it is a path value.',
            name: '_1p',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            description: 'The value of the second item, if it is a path value.',
            name: '_2p',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            description: 'The value of the third item, if it is a path value.',
            name: '_3p',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            description: 'The value of the fourth item, if it is a path value.',
            name: '_4p',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            description: 'The value of the fifth item, if it is a path value.',
            name: '_5p',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            description: 'The value of the sixth item, if it is a path value.',
            name: '_6p',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            description:
              'The value of the seventh item, if it is a path value.',
            name: '_7p',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            description: 'The value of the eighth item, if it is a path value.',
            name: '_8p',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            description: 'The value of the ninth item, if it is a path value.',
            name: '_9p',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            description: 'The value of the tenth item, if it is a path value.',
            name: '_10p',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            description: 'The number of deconstructed elements.',
            name: 'elements',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.coll.pairWithOffset': {
        name: 'apoc.coll.pairWithOffset',
        description: 'Returns a `LIST<ANY>` of pairs defined by the offset.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.coll.pairWithOffset(coll :: LIST<ANY>, offset :: INTEGER) :: (value :: LIST<ANY>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to create pairs from.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description:
              'The offset to make each pair with from the given list.',
            name: 'offset',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The created pair.',
            name: 'value',
            type: 'LIST<ANY>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.coll.partition': {
        name: 'apoc.coll.partition',
        description:
          'Partitions the original `LIST<ANY>` into a new `LIST<ANY>` of the given batch size.\nThe final `LIST<ANY>` may be smaller than the given batch size.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.coll.partition(coll :: LIST<ANY>, batchSize :: INTEGER) :: (value :: LIST<ANY>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to partition into smaller sublists.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The max size of each partitioned sublist.',
            name: 'batchSize',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The partitioned list.',
            name: 'value',
            type: 'LIST<ANY>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.coll.split': {
        name: 'apoc.coll.split',
        description:
          'Splits a collection by the given value.\nThe value itself will not be part of the resulting `LIST<ANY>` values.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.coll.split(coll :: LIST<ANY>, value :: ANY) :: (value :: LIST<ANY>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to split into parts.',
            name: 'coll',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The value to split the given list by.',
            name: 'value',
            type: 'ANY',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The split list.',
            name: 'value',
            type: 'LIST<ANY>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.coll.zipToRows': {
        name: 'apoc.coll.zipToRows',
        description:
          'Returns the two `LIST<ANY>` values zipped together, with one row per zipped pair.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.coll.zipToRows(list1 :: LIST<ANY>, list2 :: LIST<ANY>) :: (value :: LIST<ANY>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list to zip together with `list2`.',
            name: 'list1',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The list to zip together with `list1`.',
            name: 'list2',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A zipped pair.',
            name: 'value',
            type: 'LIST<ANY>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.convert.setJsonProperty': {
        name: 'apoc.convert.setJsonProperty',
        description:
          'Serializes the given JSON object and sets it as a property on the given `NODE`.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.convert.setJsonProperty(node :: NODE, key :: STRING, value :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The node to set the JSON property on.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The name of the property to set.',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The property to serialize as a JSON object.',
            name: 'value',
            type: 'ANY',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.create.addLabels': {
        name: 'apoc.create.addLabels',
        description: 'Adds the given labels to the given `NODE` values.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.create.addLabels(nodes :: ANY, labels :: LIST<STRING>) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The nodes to add labels to.',
            name: 'nodes',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The labels to add to the nodes.',
            name: 'labels',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.create.clonePathToVirtual': {
        name: 'apoc.create.clonePathToVirtual',
        description:
          'Takes the given `PATH` and returns a virtual representation of it.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.create.clonePathToVirtual(path :: PATH) :: (path :: PATH)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The path to create a virtual path from.',
            name: 'path',
            type: 'PATH',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The path result.',
            name: 'path',
            type: 'PATH',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.create.clonePathsToVirtual': {
        name: 'apoc.create.clonePathsToVirtual',
        description:
          'Takes the given `LIST<PATH>` and returns a virtual representation of them.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.create.clonePathsToVirtual(paths :: LIST<PATH>) :: (path :: PATH)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The paths to create virtual paths from.',
            name: 'paths',
            type: 'LIST<PATH>',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The path result.',
            name: 'path',
            type: 'PATH',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.create.node': {
        name: 'apoc.create.node',
        description: 'Creates a `NODE` with the given dynamic labels.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.create.node(labels :: LIST<STRING>, props :: MAP) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The labels to assign to the new node.',
            name: 'labels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The properties to assign to the new node.',
            name: 'props',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The created node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.create.nodes': {
        name: 'apoc.create.nodes',
        description: 'Creates `NODE` values with the given dynamic labels.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.create.nodes(labels :: LIST<STRING>, props :: LIST<MAP>) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The labels to assign to the new nodes.',
            name: 'labels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The properties to assign to the new nodes.',
            name: 'props',
            type: 'LIST<MAP>',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The created node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.create.relationship': {
        name: 'apoc.create.relationship',
        description:
          'Creates a `RELATIONSHIP` with the given dynamic relationship type.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.create.relationship(from :: NODE, relType :: STRING, props :: MAP, to :: NODE) :: (rel :: RELATIONSHIP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node from which the outgoing relationship will start.',
            name: 'from',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The type to assign to the new relationship.',
            name: 'relType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The properties to assign to the new relationship.',
            name: 'props',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              'The node to which the incoming relationship will be connected.',
            name: 'to',
            type: 'NODE',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The created relationship.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.create.removeLabels': {
        name: 'apoc.create.removeLabels',
        description: 'Removes the given labels from the given `NODE` values.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.create.removeLabels(nodes :: ANY, labels :: LIST<STRING>) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The node to remove labels from.',
            name: 'nodes',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The labels to remove from the given node.',
            name: 'labels',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.create.removeProperties': {
        name: 'apoc.create.removeProperties',
        description:
          'Removes the given properties from the given `NODE` values.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.create.removeProperties(nodes :: ANY, keys :: LIST<STRING>) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The nodes to remove properties from.',
            name: 'nodes',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The property keys to remove from the given nodes.',
            name: 'keys',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.create.removeRelProperties': {
        name: 'apoc.create.removeRelProperties',
        description:
          'Removes the given properties from the given `RELATIONSHIP` values.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.create.removeRelProperties(rels :: ANY, keys :: LIST<STRING>) :: (rel :: RELATIONSHIP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The relationships to remove properties from.',
            name: 'rels',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The property keys to remove from the given nodes.',
            name: 'keys',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated relationship.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.create.setLabels': {
        name: 'apoc.create.setLabels',
        description:
          'Sets the given labels to the given `NODE` values. Non-matching labels are removed from the nodes.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.create.setLabels(nodes :: ANY, labels :: LIST<STRING>) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The nodes to set labels on.',
            name: 'nodes',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The labels to set on the given nodes.',
            name: 'labels',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.create.setProperties': {
        name: 'apoc.create.setProperties',
        description: 'Sets the given properties to the given `NODE` values.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.create.setProperties(nodes :: ANY, keys :: LIST<STRING>, values :: LIST<ANY>) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The nodes to set properties on.',
            name: 'nodes',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The property keys to set on the given nodes.',
            name: 'keys',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description:
              'The values to assign to the properties on the given nodes.',
            name: 'values',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.create.setProperty': {
        name: 'apoc.create.setProperty',
        description: 'Sets the given property to the given `NODE` values.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.create.setProperty(nodes :: ANY, key :: STRING, value :: ANY) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The nodes to set a property on.',
            name: 'nodes',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The name of the property key to set.',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The value of the property to set.',
            name: 'value',
            type: 'ANY',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.create.setRelProperties': {
        name: 'apoc.create.setRelProperties',
        description: 'Sets the given properties on the `RELATIONSHIP` values.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.create.setRelProperties(rels :: ANY, keys :: LIST<STRING>, values :: LIST<ANY>) :: (rel :: RELATIONSHIP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The relationships to set properties on.',
            name: 'rels',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'The keys of the properties to set on the given relationships.',
            name: 'keys',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description:
              'The values of the properties to set on the given relationships.',
            name: 'values',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated relationship.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.create.setRelProperty': {
        name: 'apoc.create.setRelProperty',
        description: 'Sets the given property on the `RELATIONSHIP` values.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.create.setRelProperty(rels :: ANY, key :: STRING, value :: ANY) :: (rel :: RELATIONSHIP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The relationships to set a property on.',
            name: 'rels',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The name of the property key to set.',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The value of the property to set.',
            name: 'value',
            type: 'ANY',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated relationship.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.create.vNode': {
        name: 'apoc.create.vNode',
        description: 'Returns a virtual `NODE`.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.create.vNode(labels :: LIST<STRING>, props :: MAP) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The labels to assign to the new virtual node.',
            name: 'labels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The properties to assign to the new virtual node.',
            name: 'props',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The created virtual node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.create.vNodes': {
        name: 'apoc.create.vNodes',
        description: 'Returns virtual `NODE` values.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.create.vNodes(labels :: LIST<STRING>, props :: LIST<MAP>) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The labels to assign to the new virtual node.',
            name: 'labels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The properties to assign to the new virtual nodes.',
            name: 'props',
            type: 'LIST<MAP>',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The created virtual node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.create.vRelationship': {
        name: 'apoc.create.vRelationship',
        description: 'Returns a virtual `RELATIONSHIP`.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.create.vRelationship(from :: NODE, relType :: STRING, props :: MAP, to :: NODE) :: (rel :: RELATIONSHIP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node to connect the outgoing virtual relationship from.',
            name: 'from',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The type to assign to the new virtual relationship.',
            name: 'relType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The properties to assign to the new virtual relationship.',
            name: 'props',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              'The node to which the incoming virtual relationship will be connected.',
            name: 'to',
            type: 'NODE',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The created virtual relationship.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.create.virtualPath': {
        name: 'apoc.create.virtualPath',
        description: 'Returns a virtual `PATH`.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.create.virtualPath(labelsN :: LIST<STRING>, n :: MAP, arelType :: STRING, props :: MAP, labelsM :: LIST<STRING>, m :: MAP) :: (from :: NODE, rel :: RELATIONSHIP, to :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The labels to assign to the new virtual start node.',
            name: 'labelsN',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description:
              'The properties to assign to the new virtual start node.',
            name: 'n',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The type to assign to the new virtual relationship.',
            name: 'arelType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The properties to assign to the new virtual relationship.',
            name: 'props',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The labels to assign to the new virtual node.',
            name: 'labelsM',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The properties to assign to the new virtual node.',
            name: 'm',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The created virtual start node.',
            name: 'from',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The created virtual relationship.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description: 'The created virtual end node.',
            name: 'to',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.cypher.doIt': {
        name: 'apoc.cypher.doIt',
        description:
          'Runs a dynamically constructed statement with the given parameters. This procedure allows for both read and write statements.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.cypher.doIt(statement :: STRING, params :: MAP) :: (value :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The Cypher statement to run.',
            name: 'statement',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The parameters for the given Cypher statement.',
            name: 'params',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The result returned from the Cypher statement.',
            name: 'value',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.cypher.run': {
        name: 'apoc.cypher.run',
        description:
          'Runs a dynamically constructed read-only statement with the given parameters.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.cypher.run(statement :: STRING, params :: MAP) :: (value :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The Cypher statement to run.',
            name: 'statement',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The parameters for the given Cypher statement.',
            name: 'params',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The result returned from the Cypher statement.',
            name: 'value',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.cypher.runMany': {
        name: 'apoc.cypher.runMany',
        description:
          'Runs each semicolon separated statement and returns a summary of the statement outcomes.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.cypher.runMany(statement :: STRING, params :: MAP, config = {} :: MAP) :: (row :: INTEGER, result :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The Cypher statements to run, semicolon separated (;).',
            name: 'statement',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The parameters for the given Cypher statements.',
            name: 'params',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: '{ statistics = true :: BOOLEAN }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The row number of the run Cypher statement.',
            name: 'row',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The result returned from the Cypher statement.',
            name: 'result',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.cypher.runManyReadOnly': {
        name: 'apoc.cypher.runManyReadOnly',
        description:
          'Runs each semicolon separated read-only statement and returns a summary of the statement outcomes.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'apoc.cypher.runManyReadOnly(statement :: STRING, params :: MAP, config = {} :: MAP) :: (row :: INTEGER, result :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The Cypher statements to run, semicolon separated (;).',
            name: 'statement',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The parameters for the given Cypher statements.',
            name: 'params',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: '{ statistics = true :: BOOLEAN }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The row number of the run Cypher statement.',
            name: 'row',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The result returned from the Cypher statement.',
            name: 'result',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.cypher.runSchema': {
        name: 'apoc.cypher.runSchema',
        description:
          'Runs the given query schema statement with the given parameters.',
        mode: 'SCHEMA',
        worksOnSystem: false,
        signature:
          'apoc.cypher.runSchema(statement :: STRING, params :: MAP) :: (value :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The Cypher schema statement to run.',
            name: 'statement',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The parameters for the given Cypher statement.',
            name: 'params',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The result returned from the Cypher statement.',
            name: 'value',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.cypher.runTimeboxed': {
        name: 'apoc.cypher.runTimeboxed',
        description:
          'Terminates a Cypher statement if it has not finished before the set timeout (ms).',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.cypher.runTimeboxed(statement :: STRING, params :: MAP, timeout :: INTEGER, config = {} :: MAP) :: (value :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The Cypher statement to run.',
            name: 'statement',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The parameters for the given Cypher statement.',
            name: 'params',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The maximum time the statement can run for.',
            name: 'timeout',
            type: 'INTEGER',
          },
          {
            name: 'config',
            description:
              '{ failOnError = false :: BOOLEAN, appendStatusRow = false :: BOOLEAN }',
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The result returned from the Cypher statement.',
            name: 'value',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.cypher.runWrite': {
        name: 'apoc.cypher.runWrite',
        description: 'Alias for `apoc.cypher.doIt`.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.cypher.runWrite(statement :: STRING, params :: MAP) :: (value :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The Cypher statement to run.',
            name: 'statement',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The parameters for the given Cypher statement.',
            name: 'params',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The result returned from the Cypher statement.',
            name: 'value',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.do.case': {
        name: 'apoc.do.case',
        description:
          'For each pair of conditional queries in the given `LIST<ANY>`, this procedure will run the first query for which the conditional is evaluated to true.\nIf none of the conditionals are true, the `ELSE` query will run instead.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.do.case(conditionals :: LIST<ANY>, elseQuery =  :: STRING, params = {} :: MAP) :: (value :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A list of conditionals, where each conditional is a pair: the first element is a predicate, and the second is a Cypher query to be executed based on that predicate.',
            name: 'conditionals',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              'A Cypher query to evaluate if all conditionals evaluate to false.',
            name: 'elseQuery',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              'A map of parameters to be used in the executed Cypher query.',
            name: 'params',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The result returned from the evaluated Cypher query.',
            name: 'value',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.do.when': {
        name: 'apoc.do.when',
        description:
          'Runs the given read/write `ifQuery` if the conditional has evaluated to true, otherwise the `elseQuery` will run.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.do.when(condition :: BOOLEAN, ifQuery :: STRING, elseQuery :: STRING, params = {} :: MAP) :: (value :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The predicate that determines whether to execute the `ifQuery`.',
            name: 'condition',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description:
              'The Cypher statement to run if the condition is true.',
            name: 'ifQuery',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The Cypher statement to run if the condition is false.',
            name: 'elseQuery',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'The parameters for the given Cypher statement.',
            name: 'params',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The result returned from the evaluated Cypher query.',
            name: 'value',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.example.movies': {
        name: 'apoc.example.movies',
        description: 'Seeds the database with the Neo4j movie dataset.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.example.movies() :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file containing the movies example.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Where the examples were sourced from.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the movies file was in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of nodes imported.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of relationships imported.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of properties imported.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the import.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the import was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the import was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Whether the import ran successfully.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The data returned by the import.',
            name: 'data',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.export.csv.all': {
        name: 'apoc.export.csv.all',
        description: 'Exports the full database to the provided CSV file.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.csv.all(file :: STRING, config :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The name of the file to which the data will be exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        quotes = 'always' :: ['always', 'none', 'ifNeeded'],\n        differentiateNulls = false :: BOOLEAN,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to which the data was exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'A summary of the exported data.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the file is exported in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of exported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the export.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the export was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the export was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Whether the export ran successfully.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The data returned by the export.',
            name: 'data',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.export.csv.data': {
        name: 'apoc.export.csv.data',
        description:
          'Exports the given `NODE` and `RELATIONSHIP` values to the provided CSV file.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.csv.data(nodes :: LIST<NODE>, rels :: LIST<RELATIONSHIP>, file :: STRING, config :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A list of nodes to export.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            description: 'A list of relationships to export.',
            name: 'rels',
            type: 'LIST<RELATIONSHIP>',
          },
          {
            isDeprecated: false,
            description:
              'The name of the file to which the data will be exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        quotes = 'always' :: ['always', 'none', 'ifNeeded'],\n        differentiateNulls = false :: BOOLEAN,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to which the data was exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'A summary of the exported data.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the file is exported in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of exported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the export.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the export was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the export was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Whether the export ran successfully.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The data returned by the export.',
            name: 'data',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.export.csv.graph': {
        name: 'apoc.export.csv.graph',
        description: 'Exports the given graph to the provided CSV file.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.csv.graph(graph :: MAP, file :: STRING, config :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The graph to export.',
            name: 'graph',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              'The name of the file to which the data will be exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        quotes = 'always' :: ['always', 'none', 'ifNeeded'],\n        differentiateNulls = false :: BOOLEAN,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to which the data was exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'A summary of the exported data.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the file is exported in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of exported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the export.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the export was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the export was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Whether the export ran successfully.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The data returned by the export.',
            name: 'data',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.export.csv.query': {
        name: 'apoc.export.csv.query',
        description:
          'Exports the results from running the given Cypher query to the provided CSV file.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.csv.query(query :: STRING, file :: STRING, config :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The query used to collect the data for export.',
            name: 'query',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The name of the file to which the data will be exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None':: STRING,\n        charset = 'UTF_8' :: STRING,\n        quotes = 'always' :: ['always', 'none', 'ifNeeded'],\n        differentiateNulls = false :: BOOLEAN,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to which the data was exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'A summary of the exported data.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the file is exported in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of exported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the export.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the export was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the export was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Whether the export ran successfully.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The data returned by the export.',
            name: 'data',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.export.cypher.all': {
        name: 'apoc.export.cypher.all',
        description:
          'Exports the full database (incl. indexes) as Cypher statements to the provided file (default: Cypher Shell).',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.cypher.all(file =  :: STRING, config = {} :: MAP) :: (file :: STRING, batches :: INTEGER, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, cypherStatements :: ANY, nodeStatements :: ANY, relationshipStatements :: ANY, schemaStatements :: ANY, cleanupStatements :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              'The name of the file to which the data will be exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to which the data was exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the export was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'A summary of the exported data.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the file is exported in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of exported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the export.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the export was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The executed Cypher Statements.',
            name: 'cypherStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed node statements.',
            name: 'nodeStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed relationship statements.',
            name: 'relationshipStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed schema statements.',
            name: 'schemaStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed cleanup statements.',
            name: 'cleanupStatements',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.export.cypher.data': {
        name: 'apoc.export.cypher.data',
        description:
          'Exports the given `NODE` and `RELATIONSHIP` values (incl. indexes) as Cypher statements to the provided file (default: Cypher Shell).',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.cypher.data(nodes :: LIST<NODE>, rels :: LIST<RELATIONSHIP>, file =  :: STRING, config = {} :: MAP) :: (file :: STRING, batches :: INTEGER, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, cypherStatements :: ANY, nodeStatements :: ANY, relationshipStatements :: ANY, schemaStatements :: ANY, cleanupStatements :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A list of nodes to export.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            description: 'A list of relationships to export.',
            name: 'rels',
            type: 'LIST<RELATIONSHIP>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              'The name of the file to which the data will be exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to which the data was exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the export was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'A summary of the exported data.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the file is exported in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of exported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the export.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the export was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The executed Cypher Statements.',
            name: 'cypherStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed node statements.',
            name: 'nodeStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed relationship statements.',
            name: 'relationshipStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed schema statements.',
            name: 'schemaStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed cleanup statements.',
            name: 'cleanupStatements',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.export.cypher.graph': {
        name: 'apoc.export.cypher.graph',
        description:
          'Exports the given graph (incl. indexes) as Cypher statements to the provided file (default: Cypher Shell).',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.cypher.graph(graph :: MAP, file :: STRING, config = {} :: MAP) :: (file :: STRING, batches :: INTEGER, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, cypherStatements :: ANY, nodeStatements :: ANY, relationshipStatements :: ANY, schemaStatements :: ANY, cleanupStatements :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The graph to export.',
            name: 'graph',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              'The name of the file to which the data will be exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to which the data was exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the export was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'A summary of the exported data.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the file is exported in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of exported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the export.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the export was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The executed Cypher Statements.',
            name: 'cypherStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed node statements.',
            name: 'nodeStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed relationship statements.',
            name: 'relationshipStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed schema statements.',
            name: 'schemaStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed cleanup statements.',
            name: 'cleanupStatements',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.export.cypher.query': {
        name: 'apoc.export.cypher.query',
        description:
          'Exports the `NODE` and `RELATIONSHIP` values from the given Cypher query (incl. indexes) as Cypher statements to the provided file (default: Cypher Shell).',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.cypher.query(statement :: STRING, file =  :: STRING, config = {} :: MAP) :: (file :: STRING, batches :: INTEGER, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, cypherStatements :: ANY, nodeStatements :: ANY, relationshipStatements :: ANY, schemaStatements :: ANY, cleanupStatements :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The query used to collect the data for export.',
            name: 'statement',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              'The name of the file to which the data will be exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to which the data was exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the export was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'A summary of the exported data.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the file is exported in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of exported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the export.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the export was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The executed Cypher Statements.',
            name: 'cypherStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed node statements.',
            name: 'nodeStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed relationship statements.',
            name: 'relationshipStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed schema statements.',
            name: 'schemaStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed cleanup statements.',
            name: 'cleanupStatements',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.export.cypher.schema': {
        name: 'apoc.export.cypher.schema',
        description:
          'Exports all schema indexes and constraints to Cypher statements.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.cypher.schema(file =  :: STRING, config = {} :: MAP) :: (file :: STRING, batches :: INTEGER, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, cypherStatements :: ANY, nodeStatements :: ANY, relationshipStatements :: ANY, schemaStatements :: ANY, cleanupStatements :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              'The name of the file to which the data will be exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to which the data was exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the export was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'A summary of the exported data.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the file is exported in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of exported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the export.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the export was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The executed Cypher Statements.',
            name: 'cypherStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed node statements.',
            name: 'nodeStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed relationship statements.',
            name: 'relationshipStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed schema statements.',
            name: 'schemaStatements',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The executed cleanup statements.',
            name: 'cleanupStatements',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.export.graphml.all': {
        name: 'apoc.export.graphml.all',
        description: 'Exports the full database to the provided GraphML file.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.graphml.all(file :: STRING, config :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The name of the file to which the data will be exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to which the data was exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'A summary of the exported data.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the file is exported in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of exported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the export.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the export was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the export was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Whether the export ran successfully.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The data returned by the export.',
            name: 'data',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.export.graphml.data': {
        name: 'apoc.export.graphml.data',
        description:
          'Exports the given `NODE` and `RELATIONSHIP` values to the provided GraphML file.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.graphml.data(nodes :: LIST<NODE>, rels :: LIST<RELATIONSHIP>, file :: STRING, config :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A list of nodes to export.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            description: 'A list of relationships to export.',
            name: 'rels',
            type: 'LIST<RELATIONSHIP>',
          },
          {
            isDeprecated: false,
            description:
              'The name of the file to which the data will be exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to which the data was exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'A summary of the exported data.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the file is exported in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of exported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the export.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the export was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the export was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Whether the export ran successfully.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The data returned by the export.',
            name: 'data',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.export.graphml.graph': {
        name: 'apoc.export.graphml.graph',
        description: 'Exports the given graph to the provided GraphML file.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.graphml.graph(graph :: MAP, file :: STRING, config :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The graph to export.',
            name: 'graph',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              'The name of the file to which the data will be exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to which the data was exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'A summary of the exported data.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the file is exported in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of exported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the export.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the export was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the export was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Whether the export ran successfully.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The data returned by the export.',
            name: 'data',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.export.graphml.query': {
        name: 'apoc.export.graphml.query',
        description:
          'Exports the given `NODE` and `RELATIONSHIP` values from the Cypher statement to the provided GraphML file.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.graphml.query(statement :: STRING, file :: STRING, config :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The query used to collect the data for export.',
            name: 'statement',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The name of the file to which the data will be exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to which the data was exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'A summary of the exported data.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the file is exported in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of exported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the export.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the export was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the export was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Whether the export ran successfully.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The data returned by the export.',
            name: 'data',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.export.json.all': {
        name: 'apoc.export.json.all',
        description: 'Exports the full database to the provided JSON file.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.json.all(file :: STRING, config = {} :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The name of the file to which the data will be exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to which the data was exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'A summary of the exported data.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the file is exported in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of exported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the export.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the export was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the export was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Whether the export ran successfully.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The data returned by the export.',
            name: 'data',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.export.json.data': {
        name: 'apoc.export.json.data',
        description:
          'Exports the given `NODE` and `RELATIONSHIP` values to the provided JSON file.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.json.data(nodes :: LIST<NODE>, rels :: LIST<RELATIONSHIP>, file :: STRING, config = {} :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A list of nodes to export.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            description: 'A list of relationships to export.',
            name: 'rels',
            type: 'LIST<RELATIONSHIP>',
          },
          {
            isDeprecated: false,
            description:
              'The name of the file to which the data will be exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to which the data was exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'A summary of the exported data.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the file is exported in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of exported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the export.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the export was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the export was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Whether the export ran successfully.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The data returned by the export.',
            name: 'data',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.export.json.graph': {
        name: 'apoc.export.json.graph',
        description: 'Exports the given graph to the provided JSON file.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.json.graph(graph :: MAP, file :: STRING, config = {} :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The graph to export.',
            name: 'graph',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              'The name of the file to which the data will be exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to which the data was exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'A summary of the exported data.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the file is exported in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of exported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the export.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the export was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the export was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Whether the export ran successfully.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The data returned by the export.',
            name: 'data',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.export.json.query': {
        name: 'apoc.export.json.query',
        description:
          'Exports the results from the Cypher statement to the provided JSON file.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.export.json.query(statement :: STRING, file :: STRING, config = {} :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The query used to collect the data for export.',
            name: 'statement',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The name of the file to which the data will be exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              "{\n        stream = false :: BOOLEAN,\n        batchSize = 20000 :: INTEGER,\n        bulkImport = false :: BOOLEAN,\n        timeoutSeconds = 100 :: INTEGER,\n        compression = 'None' :: STRING,\n        charset = 'UTF_8' :: STRING,\n        sampling = false :: BOOLEAN,\n        samplingConfig :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the file to which the data was exported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'A summary of the exported data.',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format the file is exported in.',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of exported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of exported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the export.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the export was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the export was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Whether the export ran successfully.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The data returned by the export.',
            name: 'data',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.graph.from': {
        name: 'apoc.graph.from',
        description:
          'Generates a virtual sub-graph by extracting all of the `NODE` and `RELATIONSHIP` values from the given data.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.graph.from(data :: ANY, name :: STRING, props :: MAP) :: (graph :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'An object to extract nodes and relationships from. It can be of type; NODE | RELATIONSHIP | PATH | LIST<ANY>.',
            name: 'data',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The name of the resulting graph.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The properties to be present in the resulting graph.',
            name: 'props',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The resulting graph.',
            name: 'graph',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.graph.fromCypher': {
        name: 'apoc.graph.fromCypher',
        description:
          'Generates a virtual sub-graph by extracting all of the `NODE` and `RELATIONSHIP` values from the data returned by the given Cypher statement.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.graph.fromCypher(statement :: STRING, params :: MAP, name :: STRING, props :: MAP) :: (graph :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The Cypher statement to create the graph from.',
            name: 'statement',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The parameters for the given Cypher statement.',
            name: 'params',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The name of the resulting graph.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The properties to include in the resulting graph.',
            name: 'props',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The resulting graph.',
            name: 'graph',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.graph.fromDB': {
        name: 'apoc.graph.fromDB',
        description:
          'Generates a virtual sub-graph by extracting all of the `NODE` and `RELATIONSHIP` values from the data returned by the given database.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.graph.fromDB(name :: STRING, props :: MAP) :: (graph :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the resulting graph.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The properties to be present in the resulting graph.',
            name: 'props',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The resulting graph.',
            name: 'graph',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.graph.fromData': {
        name: 'apoc.graph.fromData',
        description:
          'Generates a virtual sub-graph by extracting all of the `NODE` and `RELATIONSHIP` values from the given data.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.graph.fromData(nodes :: LIST<NODE>, rels :: LIST<RELATIONSHIP>, name :: STRING, props :: MAP) :: (graph :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The nodes to include in the resulting graph.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            description: 'The relationship to include in the resulting graph.',
            name: 'rels',
            type: 'LIST<RELATIONSHIP>',
          },
          {
            isDeprecated: false,
            description: 'The name of the resulting graph.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The properties to include in the resulting graph.',
            name: 'props',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The resulting graph.',
            name: 'graph',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.graph.fromDocument': {
        name: 'apoc.graph.fromDocument',
        description:
          'Generates a virtual sub-graph by extracting all of the `NODE` and `RELATIONSHIP` values from the data returned by the given JSON file.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.graph.fromDocument(json :: ANY, config = {} :: MAP) :: (graph :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A JSON object to generate a graph from.',
            name: 'json',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              "{\n        write = false :: BOOLEAN,\n        labelField = 'type' :: STRING.\n        idField = 'id' :: STRING,\n        generateID = true :: BOOLEAN,\n        defaultLabel = '' :: STRING,\n        skipValidation = false :: BOOLEAN,\n        mappings = {} :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The resulting graph.',
            name: 'graph',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.graph.fromPath': {
        name: 'apoc.graph.fromPath',
        description:
          'Generates a virtual sub-graph by extracting all of the `NODE` and `RELATIONSHIP` values from the data returned by the given `PATH`.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.graph.fromPath(path :: PATH, name :: STRING, props :: MAP) :: (graph :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A path to extract the nodes and relationships from.',
            name: 'path',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            description: 'The name to give the resulting graph.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The properties to include in the resulting graph.',
            name: 'props',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The resulting graph.',
            name: 'graph',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.graph.fromPaths': {
        name: 'apoc.graph.fromPaths',
        description:
          'Generates a virtual sub-graph by extracting all of the `NODE` and `RELATIONSHIP` values from the data returned by the given `PATH` values.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.graph.fromPaths(paths :: LIST<PATH>, name :: STRING, props :: MAP) :: (graph :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A list of paths to extract nodes and relationships from.',
            name: 'paths',
            type: 'LIST<PATH>',
          },
          {
            isDeprecated: false,
            description: 'The name of the resulting graph.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The properties to include in the resulting graph.',
            name: 'props',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The resulting graph.',
            name: 'graph',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.graph.validateDocument': {
        name: 'apoc.graph.validateDocument',
        description:
          'Validates the JSON file and returns the result of the validation.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'apoc.graph.validateDocument(json :: ANY, config = {} :: MAP) :: (row :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The JSON object to validate.',
            name: 'json',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              "{\n        write = false :: BOOLEAN,\n        labelField = 'type' :: STRING.\n        idField = 'id' :: STRING,\n        generateID = true :: BOOLEAN,\n        defaultLabel = '' :: STRING,\n        skipValidation = false :: BOOLEAN,\n        mappings = {} :: MAP\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The result of the validation.',
            name: 'row',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.help': {
        name: 'apoc.help',
        description:
          'Returns descriptions of the available APOC procedures and functions. If a keyword is provided, it will return only those procedures and functions that have the keyword in their name.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.help(proc :: STRING) :: (type :: STRING, name :: STRING, text :: STRING, signature :: STRING, roles :: LIST<STRING>, writes :: BOOLEAN, core :: BOOLEAN, isDeprecated :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A keyword to filter the results by.',
            name: 'proc',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'Whether it is a function or a procedure.',
            name: 'type',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the function or procedure.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The description of the function or procedure.',
            name: 'text',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The signature of the function or procedure.',
            name: 'signature',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'This value is always null.',
            name: 'roles',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'This value is always null.',
            name: 'writes',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'If the function or procedure belongs to APOC Core.',
            name: 'core',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'If the function or procedure is deprecated.',
            name: 'isDeprecated',
            type: 'BOOLEAN',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.import.csv': {
        name: 'apoc.import.csv',
        description:
          'Imports `NODE` and `RELATIONSHIP` values with the given labels and types from the provided CSV file.',
        mode: 'SCHEMA',
        worksOnSystem: false,
        signature:
          'apoc.import.csv(nodes :: LIST<MAP>, rels :: LIST<MAP>, config :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'List of map values of where to import the node values from; { fileName :: STRING, data :: BYTEARRAY, labels :: LIST<STRING> }.',
            name: 'nodes',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description:
              'List of map values specifying where to import relationship values from: { fileName :: STRING, data :: BYTEARRAY, type :: STRING }.',
            name: 'rels',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description:
              '{\n    delimiter = "," :: STRING,\n    arrayDelimiter = ";" :: STRING,\n    ignoreDuplicateNodes = false :: BOOLEAN,\n    quotationCharacter = """ :: STRING,\n    stringIds = true :: BOOLEAN,\n    skipLines = 1 :: INTEGER,\n    ignoreBlankString = false :: BOOLEAN,\n    ignoreEmptyCellArray = false :: BOOLEAN,\n    compression = "NONE" :: ["NONE", "BYTES", "GZIP", "BZIP2", "DEFLATE", "BLOCK_LZ4", "FRAMED_SNAPPY"],\n    charset = "UTF-8" :: STRING,\n    batchSize = 2000 :: INTEGER\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'The name of the file from which the data was imported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The source of the imported data: "file", "binary" or "file/binary".',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format of the file: ["csv", "graphml", "json"].',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of imported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of imported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of imported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the import.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the import was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the import was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Whether the import ran successfully.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The data returned by the import.',
            name: 'data',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.import.graphml': {
        name: 'apoc.import.graphml',
        description: 'Imports a graph from the provided GraphML file.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.import.graphml(urlOrBinaryFile :: ANY, config :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The name of the file or binary data to import the data from.',
            name: 'urlOrBinaryFile',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              '{\n    readLabels = false :: BOOLEAN,\n    defaultRelationshipType = "RELATED" :: STRING,\n    storeNodeIds = false :: BOOLEAN,\n    batchSize = 20000 :: INTEGER,\n    compression = "NONE" :: ["NONE", "BYTES", "GZIP", "BZIP2", "DEFLATE", "BLOCK_LZ4", "FRAMED_SNAPPY"],\n    source = {} :: MAP,\n    target = {} :: MAP\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'The name of the file from which the data was imported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The source of the imported data: "file", "binary" or "file/binary".',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format of the file: ["csv", "graphml", "json"].',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of imported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of imported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of imported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the import.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the import was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the import was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Whether the import ran successfully.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The data returned by the import.',
            name: 'data',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.import.json': {
        name: 'apoc.import.json',
        description: 'Imports a graph from the provided JSON file.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.import.json(urlOrBinaryFile :: ANY, config = {} :: MAP) :: (file :: STRING, source :: STRING, format :: STRING, nodes :: INTEGER, relationships :: INTEGER, properties :: INTEGER, time :: INTEGER, rows :: INTEGER, batchSize :: INTEGER, batches :: INTEGER, done :: BOOLEAN, data :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The name of the file or binary data to import the data from.',
            name: 'urlOrBinaryFile',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    unwindBatchSize = 5000 :: INTEGER,\n    txBatchSize = 5000 :: INTEGER,\n    importIdName = "neo4jImportId" :: STRING,\n    nodePropertyMappings = {} :: MAP,\n    relPropertyMappings = {} :: MAP,\n    compression = "NONE" :: ["NONE", "BYTES", "GZIP", "BZIP2", "DEFLATE", "BLOCK_LZ4", "FRAMED_SNAPPY"],\n    cleanup = false :: BOOLEAN,\n    nodePropFilter = {} :: MAP,\n    relPropFilter = {} :: MAP\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'The name of the file from which the data was imported.',
            name: 'file',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The source of the imported data: "file", "binary" or "file/binary".',
            name: 'source',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The format of the file: ["csv", "graphml", "json"].',
            name: 'format',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of imported nodes.',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of imported relationships.',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of imported properties.',
            name: 'properties',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration of the import.',
            name: 'time',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of rows returned.',
            name: 'rows',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The size of the batches the import was run in.',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of batches the import was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Whether the import ran successfully.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The data returned by the import.',
            name: 'data',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.import.xml': {
        name: 'apoc.import.xml',
        description: 'Imports a graph from the provided XML file.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.import.xml(urlOrBinary :: ANY, config = {} :: MAP) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The name of the file or binary data to import the data from.',
            name: 'urlOrBinary',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    connectCharacters = false :: BOOLEAN,\n    filterLeadingWhitespace = false :: BOOLEAN,\n    delimiter = " " :: STRING,\n    label :: STRING,\n    relType :: STRING,\n    charactersForTag :: MAP\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'An imported node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.load.json': {
        name: 'apoc.load.json',
        description:
          'Imports JSON file as a stream of values if the given JSON file is a `LIST<ANY>`.\nIf the given JSON file is a `MAP`, this procedure imports a single value instead.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.load.json(urlOrKeyOrBinary :: ANY, path =  :: STRING, config = {} :: MAP) :: (value :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The name of the file or binary data to import the data from.',
            name: 'urlOrKeyOrBinary',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              'A JSON path expression used to extract a certain part from the list.',
            name: 'path',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    failOnError = true :: BOOLEAN,\n    pathOptions :: LIST<STRING>,\n    compression = "NONE" :: ["NONE", "BYTES", "GZIP", "BZIP2", "DEFLATE", "BLOCK_LZ4", "FRAMED_SNAPPY"]\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A map of data loaded from the given file.',
            name: 'value',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.load.jsonArray': {
        name: 'apoc.load.jsonArray',
        description:
          'Loads array from a JSON URL (e.g. web-API) to then import the given JSON file as a stream of values.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.load.jsonArray(url :: STRING, path =  :: STRING, config = {} :: MAP) :: (value :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The path to the JSON file.',
            name: 'url',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              'A JSON path expression used to extract a certain part from the list.',
            name: 'path',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    failOnError = true :: BOOLEAN,\n    pathOptions :: LIST<STRING>,\n    compression = "NONE" :: ["NONE", "BYTES", "GZIP", "BZIP2"", "DEFLATE", "BLOCK_LZ4", "FRAMED_SNAPPY"]\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'Data loaded from the given file.',
            name: 'value',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.load.xml': {
        name: 'apoc.load.xml',
        description:
          'Loads a single nested `MAP` from an XML URL (e.g. web-API).',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.load.xml(urlOrBinary :: ANY, path = / :: STRING, config = {} :: MAP, simple = false :: BOOLEAN) :: (value :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The name of the file or binary data to import the data from.',
            name: 'urlOrBinary',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=/, type=STRING}',
            description:
              'An xPath expression to select nodes from the given XML document.',
            name: 'path',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    failOnError = true :: BOOLEAN,\n    headers = {} :: MAP,\n    compression = "NONE" :: ["NONE", "BYTES", "GZIP", "BZIP2", "DEFLATE", "BLOCK_LZ4", "FRAMED_SNAPPY"]\n}\n',
            name: 'config',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=false, type=BOOLEAN}',
            description:
              'Whether or not to parse the given XML in simple mode.',
            name: 'simple',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A map of data loaded from the given file.',
            name: 'value',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.lock.all': {
        name: 'apoc.lock.all',
        description:
          'Acquires a write lock on the given `NODE` and `RELATIONSHIP` values.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.lock.all(nodes :: LIST<NODE>, rels :: LIST<RELATIONSHIP>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list of nodes to acquire a write lock on.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            description:
              'The list of relationships to acquire a write lock on.',
            name: 'rels',
            type: 'LIST<RELATIONSHIP>',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.lock.nodes': {
        name: 'apoc.lock.nodes',
        description: 'Acquires a write lock on the given `NODE` values.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature: 'apoc.lock.nodes(nodes :: LIST<NODE>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list of nodes to acquire a write lock on.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.lock.read.nodes': {
        name: 'apoc.lock.read.nodes',
        description: 'Acquires a read lock on the given `NODE` values.',
        mode: 'READ',
        worksOnSystem: false,
        signature: 'apoc.lock.read.nodes(nodes :: LIST<NODE>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list of nodes to acquire a read lock on.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.lock.read.rels': {
        name: 'apoc.lock.read.rels',
        description: 'Acquires a read lock on the given `RELATIONSHIP` values.',
        mode: 'READ',
        worksOnSystem: false,
        signature: 'apoc.lock.read.rels(rels :: LIST<RELATIONSHIP>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list of relationships to acquire a read lock on.',
            name: 'rels',
            type: 'LIST<RELATIONSHIP>',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.lock.rels': {
        name: 'apoc.lock.rels',
        description:
          'Acquires a write lock on the given `RELATIONSHIP` values.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature: 'apoc.lock.rels(rels :: LIST<RELATIONSHIP>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list of relationships to acquire a write lock on.',
            name: 'rels',
            type: 'LIST<RELATIONSHIP>',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.math.regr': {
        name: 'apoc.math.regr',
        description:
          'Returns the coefficient of determination (R-squared) for the values of propertyY and propertyX in the given label.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'apoc.math.regr(label :: STRING, propertyY :: STRING, propertyX :: STRING) :: (r2 :: FLOAT, avgX :: FLOAT, avgY :: FLOAT, slope :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The label of the nodes to perform the regression on.',
            name: 'label',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the y property.',
            name: 'propertyY',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the x property.',
            name: 'propertyX',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The coefficient of determination.',
            name: 'r2',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'The average of the x values.',
            name: 'avgX',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'The average of the y values.',
            name: 'avgY',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'The calculated slope.',
            name: 'slope',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.merge.node': {
        name: 'apoc.merge.node',
        description:
          'Merges the given `NODE` values with the given dynamic labels.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.merge.node(labels :: LIST<STRING>, identProps :: MAP, onCreateProps = {} :: MAP, onMatchProps = {} :: MAP) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list of labels used for the generated MERGE statement.',
            name: 'labels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'Properties on the node that are always merged.',
            name: 'identProps',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'Properties that are merged when a node is created.',
            name: 'onCreateProps',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'Properties that are merged when a node is matched.',
            name: 'onMatchProps',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.merge.node.eager': {
        name: 'apoc.merge.node.eager',
        description:
          'Merges the given `NODE` values with the given dynamic labels eagerly.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.merge.node.eager(labels :: LIST<STRING>, identProps :: MAP, onCreateProps = {} :: MAP, onMatchProps = {} :: MAP) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list of labels used for the generated MERGE statement.',
            name: 'labels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'Properties on the node that are always merged.',
            name: 'identProps',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'Properties that are merged when a node is created.',
            name: 'onCreateProps',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'Properties that are merged when a node is matched.',
            name: 'onMatchProps',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.merge.nodeWithStats': {
        name: 'apoc.merge.nodeWithStats',
        description:
          'Merges the given `NODE` values with the given dynamic labels. Provides queryStatistics in the result.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.merge.nodeWithStats(labels :: LIST<STRING>, identProps :: MAP, onCreateProps = {} :: MAP, onMatchProps = {} :: MAP) :: (stats :: MAP, node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list of labels used for the generated MERGE statement.',
            name: 'labels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'Properties on the node that are always merged.',
            name: 'identProps',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'Properties that are merged when a node is created.',
            name: 'onCreateProps',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'Properties that are merged when a node is matched.',
            name: 'onMatchProps',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The returned query statistics.',
            name: 'stats',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The updated node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.merge.nodeWithStats.eager': {
        name: 'apoc.merge.nodeWithStats.eager',
        description:
          'Merges the given `NODE` values with the given dynamic labels eagerly. Provides queryStatistics in the result.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.merge.nodeWithStats.eager(labels :: LIST<STRING>, identProps :: MAP, onCreateProps = {} :: MAP, onMatchProps = {} :: MAP) :: (stats :: MAP, node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The list of labels used for the generated MERGE statement.',
            name: 'labels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'Properties on the node that are always merged.',
            name: 'identProps',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'Properties that are merged when a node is created.',
            name: 'onCreateProps',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'Properties that are merged when a node is matched.',
            name: 'onMatchProps',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The returned query statistics.',
            name: 'stats',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The updated node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.merge.relationship': {
        name: 'apoc.merge.relationship',
        description:
          'Merges the given `RELATIONSHIP` values with the given dynamic types/properties.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.merge.relationship(startNode :: NODE, relType :: STRING, identProps :: MAP, onCreateProps :: MAP, endNode :: NODE, onMatchProps = {} :: MAP) :: (rel :: RELATIONSHIP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The start node of the relationship.',
            name: 'startNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The type of the relationship.',
            name: 'relType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'Properties on the relationship that are always merged.',
            name: 'identProps',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              'Properties that are merged when a relationship is created.',
            name: 'onCreateProps',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The end node of the relationship.',
            name: 'endNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              'Properties that are merged when a relationship is matched.',
            name: 'onMatchProps',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated relationship.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.merge.relationship.eager': {
        name: 'apoc.merge.relationship.eager',
        description:
          'Merges the given `RELATIONSHIP` values with the given dynamic types/properties eagerly.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.merge.relationship.eager(startNode :: NODE, relType :: STRING, identProps :: MAP, onCreateProps :: MAP, endNode :: NODE, onMatchProps = {} :: MAP) :: (rel :: RELATIONSHIP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The start node of the relationship.',
            name: 'startNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The type of the relationship.',
            name: 'relType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'Properties on the relationship that are always merged.',
            name: 'identProps',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              'Properties that are merged when a relationship is created.',
            name: 'onCreateProps',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The end node of the relationship.',
            name: 'endNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              'Properties that are merged when a relationship is matched.',
            name: 'onMatchProps',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The updated relationship.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.merge.relationshipWithStats': {
        name: 'apoc.merge.relationshipWithStats',
        description:
          'Merges the given `RELATIONSHIP` values with the given dynamic types/properties. Provides queryStatistics in the result.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.merge.relationshipWithStats(startNode :: NODE, relType :: STRING, identProps :: MAP, onCreateProps :: MAP, endNode :: NODE, onMatchProps = {} :: MAP) :: (stats :: MAP, rel :: RELATIONSHIP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The start node of the relationship.',
            name: 'startNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The type of the relationship.',
            name: 'relType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'Properties on the relationship that are always merged.',
            name: 'identProps',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              'Properties that are merged when a relationship is created.',
            name: 'onCreateProps',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The end node of the relationship.',
            name: 'endNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              'Properties that are merged when a relationship is matched.',
            name: 'onMatchProps',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The returned query statistics.',
            name: 'stats',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The updated relationship.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.merge.relationshipWithStats.eager': {
        name: 'apoc.merge.relationshipWithStats.eager',
        description:
          'Merges the given `RELATIONSHIP` values with the given dynamic types/properties eagerly. Provides queryStatistics in the result.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.merge.relationshipWithStats.eager(startNode :: NODE, relType :: STRING, identProps :: MAP, onCreateProps :: MAP, endNode :: NODE, onMatchProps = {} :: MAP) :: (stats :: MAP, rel :: RELATIONSHIP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The start node of the relationship.',
            name: 'startNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The type of the relationship.',
            name: 'relType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'Properties on the relationship that are always merged.',
            name: 'identProps',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              'Properties that are merged when a relationship is created.',
            name: 'onCreateProps',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The end node of the relationship.',
            name: 'endNode',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              'Properties that are merged when a relationship is matched.',
            name: 'onMatchProps',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The returned query statistics.',
            name: 'stats',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The updated relationship.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.meta.data': {
        name: 'apoc.meta.data',
        description: 'Examines the full graph and returns a table of metadata.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.meta.data(config = {} :: MAP) :: (label :: STRING, property :: STRING, count :: INTEGER, unique :: BOOLEAN, index :: BOOLEAN, existence :: BOOLEAN, type :: STRING, array :: BOOLEAN, sample :: LIST<ANY>, left :: INTEGER, right :: INTEGER, other :: LIST<STRING>, otherLabels :: LIST<STRING>, elementType :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              'Number of nodes to sample, setting sample to `-1` will remove sampling; { sample = 1000 :: INTEGER }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The label or type name.',
            name: 'label',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The property name.',
            name: 'property',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The count of seen values.',
            name: 'count',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'If all seen values are unique.',
            name: 'unique',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'If an index exists for this property.',
            name: 'index',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'If an existence constraint exists for this property.',
            name: 'existence',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The type represented by this row.',
            name: 'type',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'Indicates whether the property is an array. If the type column is "RELATIONSHIP," this will be true if there is at least one node with two outgoing relationships of the type specified by the label or property column.',
            name: 'array',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'This is always null.',
            name: 'sample',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description:
              'The ratio (rounded down) of the count of outgoing relationships for a specific label and relationship type relative to the total count of those patterns.',
            name: 'left',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'The ratio (rounded down) of the count of incoming relationships for a specific label and relationship type relative to the total count of those patterns.',
            name: 'right',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The labels of connect nodes.',
            name: 'other',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description:
              'For uniqueness constraints, this field shows other labels present on nodes that also contain the uniqueness constraint.',
            name: 'otherLabels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'Whether this refers to a node or a relationship.',
            name: 'elementType',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.meta.data.of': {
        name: 'apoc.meta.data.of',
        description:
          'Examines the given sub-graph and returns a table of metadata.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.meta.data.of(graph :: ANY, config = {} :: MAP) :: (label :: STRING, property :: STRING, count :: INTEGER, unique :: BOOLEAN, index :: BOOLEAN, existence :: BOOLEAN, type :: STRING, array :: BOOLEAN, sample :: LIST<ANY>, left :: INTEGER, right :: INTEGER, other :: LIST<STRING>, otherLabels :: LIST<STRING>, elementType :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The graph to extract metadata from.',
            name: 'graph',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              'Number of nodes to sample, setting sample to `-1` will remove sampling; { sample = 1000 :: INTEGER }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The label or type name.',
            name: 'label',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The property name.',
            name: 'property',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The count of seen values.',
            name: 'count',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'If all seen values are unique.',
            name: 'unique',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'If an index exists for this property.',
            name: 'index',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'If an existence constraint exists for this property.',
            name: 'existence',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The type represented by this row.',
            name: 'type',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'Indicates whether the property is an array. If the type column is "RELATIONSHIP," this will be true if there is at least one node with two outgoing relationships of the type specified by the label or property column.',
            name: 'array',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'This is always null.',
            name: 'sample',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description:
              'The ratio (rounded down) of the count of outgoing relationships for a specific label and relationship type relative to the total count of those patterns.',
            name: 'left',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'The ratio (rounded down) of the count of incoming relationships for a specific label and relationship type relative to the total count of those patterns.',
            name: 'right',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The labels of connect nodes.',
            name: 'other',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description:
              'For uniqueness constraints, this field shows other labels present on nodes that also contain the uniqueness constraint.',
            name: 'otherLabels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'Whether this refers to a node or a relationship.',
            name: 'elementType',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.meta.graph': {
        name: 'apoc.meta.graph',
        description: 'Examines the full graph and returns a meta-graph.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.meta.graph(config = {} :: MAP) :: (nodes :: LIST<NODE>, relationships :: LIST<RELATIONSHIP>)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              'The number of nodes whose relationships are checked to remove false positives and the number of relationships to read per sampled node. A value of -1 will read all; { sample = 1 :: INTEGER, maxRels = -1 :: INTEGER }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'Nodes representing the meta data.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            description: 'Relationships representing the meta data.',
            name: 'relationships',
            type: 'LIST<RELATIONSHIP>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.meta.graph.of': {
        name: 'apoc.meta.graph.of',
        description: 'Examines the given sub-graph and returns a meta-graph.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.meta.graph.of(graph = {} :: ANY, config = {} :: MAP) :: (nodes :: LIST<NODE>, relationships :: LIST<RELATIONSHIP>)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=ANY}',
            description: 'The graph to extract metadata from.',
            name: 'graph',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              'The number of nodes whose relationships are checked to remove false positives and the number of relationships to read per sampled node. A value of -1 will read all; { sample = 1 :: INTEGER, maxRels = -1 :: INTEGER, addRelationshipsBetweenNodes = true :: BOOLEAN }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'Nodes representing the meta data.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            description: 'Relationships representing the meta data.',
            name: 'relationships',
            type: 'LIST<RELATIONSHIP>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.meta.graphSample': {
        name: 'apoc.meta.graphSample',
        description:
          'Examines the full graph and returns a meta-graph.\nUnlike `apoc.meta.graph`, this procedure does not filter away non-existing paths.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.meta.graphSample(config = {} :: MAP) :: (nodes :: LIST<NODE>, relationships :: LIST<RELATIONSHIP>)',
        argumentDescription: [
          {
            isDeprecated: true,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'Empty map (deprecated).',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'Nodes representing the meta data.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            description: 'Relationships representing the meta data.',
            name: 'relationships',
            type: 'LIST<RELATIONSHIP>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.meta.nodeTypeProperties': {
        name: 'apoc.meta.nodeTypeProperties',
        description:
          'Examines the full graph and returns a table of metadata with information about the `NODE` values therein.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.meta.nodeTypeProperties(config = {} :: MAP) :: (nodeType :: STRING, nodeLabels :: LIST<STRING>, propertyName :: STRING, propertyTypes :: LIST<STRING>, mandatory :: BOOLEAN, propertyObservations :: INTEGER, totalObservations :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n        includeLabels = [] :: LIST<STRING>,\n        includeRels = [] :: LIST<STRING>,\n        excludeLabels = [] :: LIST<STRING>,\n        excludeRels = [] :: LIST<STRING>,\n        sample = 1000 :: INTEGER,\n        maxRels = 100 :: INTEGER\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The type of the node.',
            name: 'nodeType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The labels on the node.',
            name: 'nodeLabels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The name of the property.',
            name: 'propertyName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The types this property has.',
            name: 'propertyTypes',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description:
              'Whether or not this property exists on all nodes of the given type.',
            name: 'mandatory',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The number of times this property was observed.',
            name: 'propertyObservations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of times the label was seen.',
            name: 'totalObservations',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.meta.relTypeProperties': {
        name: 'apoc.meta.relTypeProperties',
        description:
          'Examines the full graph and returns a table of metadata with information about the `RELATIONSHIP` values therein.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.meta.relTypeProperties(config = {} :: MAP) :: (relType :: STRING, sourceNodeLabels :: LIST<STRING>, targetNodeLabels :: LIST<STRING>, propertyName :: STRING, propertyTypes :: LIST<STRING>, mandatory :: BOOLEAN, propertyObservations :: INTEGER, totalObservations :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n        includeLabels = [] :: LIST<STRING>,\n        includeRels = [] :: LIST<STRING>,\n        excludeLabels = [] :: LIST<STRING>,\n        excludeRels = [] :: LIST<STRING>,\n        sample = 1000 :: INTEGER,\n        maxRels = 100 :: INTEGER\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The type of the relationship.',
            name: 'relType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The labels belonging to the start node.',
            name: 'sourceNodeLabels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The labels belonging to the end node.',
            name: 'targetNodeLabels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The name of the property.',
            name: 'propertyName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The types this property has.',
            name: 'propertyTypes',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description:
              'Whether or not this property exists on all nodes of the given type.',
            name: 'mandatory',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The number of times this property was observed.',
            name: 'propertyObservations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of times the label was seen.',
            name: 'totalObservations',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.meta.schema': {
        name: 'apoc.meta.schema',
        description:
          'Examines the given sub-graph and returns metadata as a `MAP`.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature: 'apoc.meta.schema(config = {} :: MAP) :: (value :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              'Number of nodes to sample, setting sample to `-1` will remove sampling; { sample = 1000 :: INTEGER }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'Meta information represented as a map.',
            name: 'value',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.meta.stats': {
        name: 'apoc.meta.stats',
        description:
          'Returns the metadata stored in the transactional database statistics.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.meta.stats() :: (labelCount :: INTEGER, relTypeCount :: INTEGER, propertyKeyCount :: INTEGER, nodeCount :: INTEGER, relCount :: INTEGER, labels :: MAP, relTypes :: MAP, relTypesCount :: MAP, stats :: MAP)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The total number of distinct node labels.',
            name: 'labelCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of distinct relationship types.',
            name: 'relTypeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The count of property keys.',
            name: 'propertyKeyCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of nodes.',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of relationships.',
            name: 'relCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'A map of labels to their count.',
            name: 'labels',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              'A map of relationship types per start or end node label.',
            name: 'relTypes',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'A map of relationship types to their count.',
            name: 'relTypesCount',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              'A map containing all the given return fields from this procedure.',
            name: 'stats',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.meta.subGraph': {
        name: 'apoc.meta.subGraph',
        description: 'Examines the given sub-graph and returns a meta-graph.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.meta.subGraph(config :: MAP) :: (nodes :: LIST<NODE>, relationships :: LIST<RELATIONSHIP>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              '{\n    excludeLabels :: LIST<STRING>,\n    includeLabels :: LIST<STRING>,\n    includeRels :: LIST<STRING>,\n    maxRels = -1 :: INTEGER,\n    sample = 1 :: INTEGER\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'Nodes representing the meta data.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            description: 'Relationships representing the meta data.',
            name: 'relationships',
            type: 'LIST<RELATIONSHIP>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.neighbors.athop': {
        name: 'apoc.neighbors.athop',
        description:
          'Returns all `NODE` values connected by the given `RELATIONSHIP` types at the specified distance.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.neighbors.athop(node :: NODE, relTypes =  :: STRING, distance = 1 :: INTEGER) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The starting node for the algorithm.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              "A list of relationship types to follow. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
            name: 'relTypes',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=1, type=INTEGER}',
            description: 'The number of hops to take.',
            name: 'distance',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A neighboring node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.neighbors.athop.count': {
        name: 'apoc.neighbors.athop.count',
        description:
          'Returns the count of all `NODE` values connected by the given `RELATIONSHIP` types at the specified distance.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.neighbors.athop.count(node :: NODE, relTypes =  :: STRING, distance = 1 :: INTEGER) :: (value :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The starting node for the algorithm.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              "A list of relationship types to follow. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
            name: 'relTypes',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=1, type=INTEGER}',
            description: 'The number of hops to take.',
            name: 'distance',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'The total count of neighboring nodes at the given hop distance.',
            name: 'value',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.neighbors.byhop': {
        name: 'apoc.neighbors.byhop',
        description:
          'Returns all `NODE` values connected by the given `RELATIONSHIP` types within the specified distance. Returns `LIST<NODE>` values, where each `PATH` of `NODE` values represents one row of the `LIST<NODE>` values.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.neighbors.byhop(node :: NODE, relTypes =  :: STRING, distance = 1 :: INTEGER) :: (nodes :: LIST<NODE>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The starting node for the algorithm.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              "A list of relationship types to follow. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
            name: 'relTypes',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=1, type=INTEGER}',
            description: 'The max number of hops to take.',
            name: 'distance',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'A list of neighboring nodes at a distinct hop distance.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.neighbors.byhop.count': {
        name: 'apoc.neighbors.byhop.count',
        description:
          'Returns the count of all `NODE` values connected by the given `RELATIONSHIP` types within the specified distance.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.neighbors.byhop.count(node :: NODE, relTypes =  :: STRING, distance = 1 :: INTEGER) :: (value :: LIST<ANY>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The starting node for the algorithm.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              "A list of relationship types to follow. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
            name: 'relTypes',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=1, type=INTEGER}',
            description: 'The max number of hops to take.',
            name: 'distance',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'A list of neighbor counts for each distinct hop distance.',
            name: 'value',
            type: 'LIST<ANY>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.neighbors.tohop': {
        name: 'apoc.neighbors.tohop',
        description:
          'Returns all `NODE` values connected by the given `RELATIONSHIP` types within the specified distance.\n`NODE` values are returned individually for each row.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.neighbors.tohop(node :: NODE, relTypes =  :: STRING, distance = 1 :: INTEGER) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The starting node for the algorithm.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              "A list of relationship types to follow. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
            name: 'relTypes',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=1, type=INTEGER}',
            description: 'The max number of hops to take.',
            name: 'distance',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A neighboring node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.neighbors.tohop.count': {
        name: 'apoc.neighbors.tohop.count',
        description:
          'Returns the count of all `NODE` values connected by the given `RELATIONSHIP` values in the pattern within the specified distance.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.neighbors.tohop.count(node :: NODE, relTypes =  :: STRING, distance = 1 :: INTEGER) :: (value :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The starting node for the algorithm.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              "A list of relationship types to follow. Relationship types are represented using APOC's rel-direction-pattern syntax; `[<]RELATIONSHIP_TYPE1[>]|[<]RELATIONSHIP_TYPE2[>]|...`.",
            name: 'relTypes',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=1, type=INTEGER}',
            description: 'The max number of hops to take.',
            name: 'distance',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'The total count of neighboring nodes within the given hop distance.',
            name: 'value',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.nodes.collapse': {
        name: 'apoc.nodes.collapse',
        description:
          'Merges `NODE` values together in the given `LIST<NODE>`.\nThe `NODE` values are then combined to become one `NODE`, with all labels of the previous `NODE` values attached to it, and all `RELATIONSHIP` values pointing to it.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.nodes.collapse(nodes :: LIST<NODE>, config = {} :: MAP) :: (from :: NODE, rel :: RELATIONSHIP, to :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list of node values to merge.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    mergeRels :: BOOLEAN,\n    selfRef :: BOOLEAN,\n    produceSelfRef = true :: BOOLEAN,\n    preserveExistingSelfRels = true :: BOOLEAN,\n    countMerge = true :: BOOLEAN,\n    collapsedLabel :: BOOLEAN,\n    singleElementAsArray = false :: BOOLEAN,\n    avoidDuplicates = false :: BOOLEAN,\n    relationshipSelectionStrategy = "incoming" :: ["incoming", "outgoing", "merge"]\n    properties :: ["overwrite", "discard", "combine"]\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The recently collapsed virtual node.',
            name: 'from',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'A relationship connected to the collapsed node.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description:
              'A node connected to the other end of the relationship.',
            name: 'to',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.nodes.cycles': {
        name: 'apoc.nodes.cycles',
        description:
          'Detects all `PATH` cycles in the given `LIST<NODE>`.\nThis procedure can be limited on `RELATIONSHIP` values as well.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.nodes.cycles(nodes :: LIST<NODE>, config = {} :: MAP) :: (path :: PATH)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list of nodes to check for path cycles.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    maxDepth :: INTEGER,\n    relTypes = [] :: LIST<STRING>\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A path containing a found cycle.',
            name: 'path',
            type: 'PATH',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.nodes.delete': {
        name: 'apoc.nodes.delete',
        description: 'Deletes all `NODE` values with the given ids.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.nodes.delete(nodes :: ANY, batchSize :: INTEGER) :: (value :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The nodes to be deleted. Nodes can be of type `STRING` (elementId()), `INTEGER` (id()), `NODE`, or `LIST<STRING | INTEGER | NODE>`.',
            name: 'nodes',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'The number of node values to delete in a single batch.',
            name: 'batchSize',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The number of deleted nodes.',
            name: 'value',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.nodes.get': {
        name: 'apoc.nodes.get',
        description: 'Returns all `NODE` values with the given ids.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature: 'apoc.nodes.get(nodes :: ANY) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The nodes to be returned. Nodes can be of type `STRING` (elementId()), `INTEGER` (id()), `NODE`, or `LIST<STRING | INTEGER | NODE>`.',
            name: 'nodes',
            type: 'ANY',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.nodes.group': {
        name: 'apoc.nodes.group',
        description:
          'Allows for the aggregation of `NODE` values based on the given properties.\nThis procedure returns virtual `NODE` values.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.nodes.group(labels :: LIST<STRING>, groupByProperties :: LIST<STRING>, aggregations = [{*=count}, {*=count}] :: LIST<MAP>, config = {} :: MAP) :: (nodes :: LIST<NODE>, relationships :: LIST<RELATIONSHIP>, node :: NODE, relationship :: RELATIONSHIP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              "The list of node labels to aggregate over. Use `['*']` to indicate all node labels should be looked at.",
            name: 'labels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The property keys to group the nodes by.',
            name: 'groupByProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=[{*=count}, {*=count}], type=LIST<MAP>}',
            description:
              'The first map specifies the node properties to aggregate with their corresponding aggregation functions, while the second map specifies the relationship properties for aggregation.',
            name: 'aggregations',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    includeRels :: STRING | LIST<STRING>\n    excludeRels :: STRING | LIST<STRING>,\n    orphans = true :: BOOLEAN,\n    selfRels = true :: BOOLEAN,\n    limitNodes = -1 :: INTEGER,\n    limitRels = -1 :: INTEGER,\n    relsPerNode = -1 :: INTEGER,\n    filter :: MAP\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'A list of grouped nodes represented as virtual nodes.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            description:
              'A list of grouped relationships represented as virtual relationships.',
            name: 'relationships',
            type: 'LIST<RELATIONSHIP>',
          },
          {
            isDeprecated: false,
            description: 'The grouping node.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The grouping relationship.',
            name: 'relationship',
            type: 'RELATIONSHIP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.nodes.link': {
        name: 'apoc.nodes.link',
        description:
          'Creates a linked list of the given `NODE` values connected by the given `RELATIONSHIP` type.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.nodes.link(nodes :: LIST<NODE>, type :: STRING, config = {} :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The list of nodes to be linked.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            description: 'The relationship type name to link the nodes with.',
            name: 'type',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: '{ avoidDuplicates = false :: BOOLEAN }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.nodes.rels': {
        name: 'apoc.nodes.rels',
        description: 'Returns all `RELATIONSHIP` values with the given ids.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature: 'apoc.nodes.rels(rels :: ANY) :: (rel :: RELATIONSHIP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The relationships to be returned. Relationships can be of type `STRING` (elementId()), `INTEGER` (id()), `RELATIONSHIP`, or `LIST<STRING | INTEGER | RELATIONSHIP>',
            name: 'rels',
            type: 'ANY',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A relationship.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.path.expand': {
        name: 'apoc.path.expand',
        description:
          'Returns `PATH` values expanded from the start `NODE` following the given `RELATIONSHIP` types from min-depth to max-depth.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.path.expand(startNode :: ANY, relFilter :: STRING, labelFilter :: STRING, minDepth :: INTEGER, maxDepth :: INTEGER) :: (path :: PATH)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node to start the algorithm from. `startNode` can be of type `STRING` (elementId()), `INTEGER` (id()), `NODE`, or `LIST<STRING | INTEGER | NODE>`.',
            name: 'startNode',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'An allow list of types allowed on the returned relationships.',
            name: 'relFilter',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'An allow list of labels allowed on the returned nodes.',
            name: 'labelFilter',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The minimum number of hops allowed in the returned paths.',
            name: 'minDepth',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'The maximum number of hops allowed in the returned paths.',
            name: 'maxDepth',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The expanded path.',
            name: 'path',
            type: 'PATH',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.path.expandConfig': {
        name: 'apoc.path.expandConfig',
        description:
          'Returns `PATH` values expanded from the start `NODE` with the given `RELATIONSHIP` types from min-depth to max-depth.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.path.expandConfig(startNode :: ANY, config :: MAP) :: (path :: PATH)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node to start the algorithm from. `startNode` can be of type `STRING` (elementId()), `INTEGER` (id()), `NODE`, or `LIST<STRING | INTEGER | NODE>.',
            name: 'startNode',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              '{\n    minLevel = -1 :: INTEGER,\n    maxLevel = -1 :: INTEGER,\n    relationshipFilter :: STRING,\n    labelFilter :: STRING,\n    beginSequenceAtStart = true :: BOOLEAN,\n    uniqueness = "RELATIONSHIP_PATH" :: STRING,\n    bfs = true :: BOOLEAN,\n    filterStartNode = false :: BOOLEAN,\n    limit = -1 :: INTEGER,\n    optional = false :: BOOLEAN,\n    endNodes :: LIST<NODES>,\n    terminatorNodes:: LIST<NODES>,\n    allowlistNodes:: LIST<NODES>,\n    denylistNodes:: LIST<NODES>\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The expanded path.',
            name: 'path',
            type: 'PATH',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.path.spanningTree': {
        name: 'apoc.path.spanningTree',
        description:
          'Returns spanning tree `PATH` values expanded from the start `NODE` following the given `RELATIONSHIP` types to max-depth.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.path.spanningTree(startNode :: ANY, config :: MAP) :: (path :: PATH)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node to start the algorithm from. `startNode` can be of type `STRING` (elementId()), `INTEGER` (id()), `NODE`, or `LIST<STRING | INTEGER | NODE>.',
            name: 'startNode',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              '{\n    minLevel = -1 :: INTEGER,\n    maxLevel = -1 :: INTEGER,\n    relationshipFilter :: STRING,\n    labelFilter :: STRING,\n    beginSequenceAtStart = true :: BOOLEAN,\n    uniqueness = "RELATIONSHIP_PATH" :: STRING,\n    bfs = true :: BOOLEAN,\n    filterStartNode = false :: BOOLEAN,\n    limit = -1 :: INTEGER,\n    optional = false :: BOOLEAN,\n    endNodes :: LIST<NODES>,\n    terminatorNodes:: LIST<NODES>,\n    allowlistNodes:: LIST<NODES>,\n    denylistNodes:: LIST<NODES>\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A spanning tree path.',
            name: 'path',
            type: 'PATH',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.path.subgraphAll': {
        name: 'apoc.path.subgraphAll',
        description:
          'Returns the sub-graph reachable from the start `NODE` following the given `RELATIONSHIP` types to max-depth.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.path.subgraphAll(startNode :: ANY, config :: MAP) :: (nodes :: LIST<NODE>, relationships :: LIST<RELATIONSHIP>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node to start the algorithm from. `startNode` can be of type `STRING` (elementId()), `INTEGER` (id()), `NODE`, or `LIST<STRING | INTEGER | NODE>.',
            name: 'startNode',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              '{\n    minLevel = -1 :: INTEGER,\n    maxLevel = -1 :: INTEGER,\n    relationshipFilter :: STRING,\n    labelFilter :: STRING,\n    beginSequenceAtStart = true :: BOOLEAN,\n    uniqueness = "RELATIONSHIP_PATH" :: STRING,\n    bfs = true :: BOOLEAN,\n    filterStartNode = false :: BOOLEAN,\n    limit = -1 :: INTEGER,\n    optional = false :: BOOLEAN,\n    endNodes :: LIST<NODES>,\n    terminatorNodes:: LIST<NODES>,\n    allowlistNodes:: LIST<NODES>,\n    denylistNodes:: LIST<NODES>\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'Nodes part of the returned subgraph.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            description: 'Relationships part of the returned subgraph.',
            name: 'relationships',
            type: 'LIST<RELATIONSHIP>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.path.subgraphNodes': {
        name: 'apoc.path.subgraphNodes',
        description:
          'Returns the `NODE` values in the sub-graph reachable from the start `NODE` following the given `RELATIONSHIP` types to max-depth.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.path.subgraphNodes(startNode :: ANY, config :: MAP) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node to start the algorithm from. `startNode` can be of type `STRING` (elementId()), `INTEGER` (id()), `NODE`, or `LIST<STRING | INTEGER | NODE>`.',
            name: 'startNode',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              '{\n    minLevel = -1 :: INTEGER,\n    maxLevel = -1 :: INTEGER,\n    relationshipFilter :: STRING,\n    labelFilter :: STRING,\n    beginSequenceAtStart = true :: BOOLEAN,\n    uniqueness = "RELATIONSHIP_PATH" :: STRING,\n    bfs = true :: BOOLEAN,\n    filterStartNode = false :: BOOLEAN,\n    limit = -1 :: INTEGER,\n    optional = false :: BOOLEAN,\n    endNodes :: LIST<NODES>,\n    terminatorNodes:: LIST<NODES>,\n    allowlistNodes:: LIST<NODES>,\n    denylistNodes:: LIST<NODES>\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'Nodes part of the returned subgraph.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.paths.toJsonTree': {
        name: 'apoc.paths.toJsonTree',
        description:
          'Creates a stream of nested documents representing the graph as a tree by traversing outgoing relationships.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.paths.toJsonTree(paths :: LIST<PATH>, lowerCaseRels = true :: BOOLEAN, config = {} :: MAP) :: (value :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'A list of paths to convert into a tree.',
            name: 'paths',
            type: 'LIST<PATH>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=true, type=BOOLEAN}',
            description:
              'Whether or not to convert relationship types to lower case.',
            name: 'lowerCaseRels',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{ nodes = {} :: MAP, rels = {} :: MAP, sortPaths = true :: BOOLEAN }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The resulting tree.',
            name: 'value',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.periodic.cancel': {
        name: 'apoc.periodic.cancel',
        description: 'Cancels the given background job.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.periodic.cancel(name :: STRING) :: (name :: STRING, delay :: INTEGER, rate :: INTEGER, done :: BOOLEAN, cancelled :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the job to cancel.',
            name: 'name',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the job.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The delay on the job.',
            name: 'delay',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The rate of the job.',
            name: 'rate',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'If the job has completed.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'If the job has been cancelled.',
            name: 'cancelled',
            type: 'BOOLEAN',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.periodic.commit': {
        name: 'apoc.periodic.commit',
        description:
          'Runs the given statement in separate batched transactions.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.periodic.commit(statement :: STRING, params = {} :: MAP) :: (updates :: INTEGER, executions :: INTEGER, runtime :: INTEGER, batches :: INTEGER, failedBatches :: INTEGER, batchErrors :: MAP, failedCommits :: INTEGER, commitErrors :: MAP, wasTerminated :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The Cypher statement to run.',
            name: 'statement',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'The parameters for the given Cypher statement.',
            name: 'params',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The total number of updates.',
            name: 'updates',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of executions.',
            name: 'executions',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total time taken in nanoseconds.',
            name: 'runtime',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of run batches.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of failed batches.',
            name: 'failedBatches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Errors returned from the failed batches.',
            name: 'batchErrors',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The number of failed commits.',
            name: 'failedCommits',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'Errors returned from the failed commits.',
            name: 'commitErrors',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'If the job was terminated.',
            name: 'wasTerminated',
            type: 'BOOLEAN',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.periodic.countdown': {
        name: 'apoc.periodic.countdown',
        description:
          'Runs a repeatedly called background statement until it returns 0.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.periodic.countdown(name :: STRING, statement :: STRING, delay :: INTEGER) :: (name :: STRING, delay :: INTEGER, rate :: INTEGER, done :: BOOLEAN, cancelled :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the job.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The Cypher statement to run, returning a count on each run indicating the remaining iterations.',
            name: 'statement',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The delay in seconds to wait between each job execution.',
            name: 'delay',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the job.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The delay on the job.',
            name: 'delay',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The rate of the job.',
            name: 'rate',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'If the job has completed.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'If the job has been cancelled.',
            name: 'cancelled',
            type: 'BOOLEAN',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.periodic.iterate': {
        name: 'apoc.periodic.iterate',
        description:
          'Runs the second statement for each item returned by the first statement.\nThis procedure returns the number of batches and the total number of processed rows.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.periodic.iterate(cypherIterate :: STRING, cypherAction :: STRING, config :: MAP) :: (batches :: INTEGER, total :: INTEGER, timeTaken :: INTEGER, committedOperations :: INTEGER, failedOperations :: INTEGER, failedBatches :: INTEGER, retries :: INTEGER, errorMessages :: MAP, batch :: MAP, operations :: MAP, wasTerminated :: BOOLEAN, failedParams :: MAP, updateStatistics :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The first Cypher statement to be run.',
            name: 'cypherIterate',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The Cypher statement to run for each item returned by the initial Cypher statement.',
            name: 'cypherAction',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              '{\n    batchSize = 10000 :: INTEGER,\n    parallel = false :: BOOLEAN,\n    retries = 0 :: INTEGER,\n    batchMode = "BATCH" :: STRING,\n    params = {} :: MAP,\n    concurrency :: INTEGER,\n    failedParams = -1 :: INTEGER,\n    planner = "DEFAULT" :: ["DEFAULT", "COST", "IDP", "DP"]\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The total number of batches.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of processed input rows.',
            name: 'total',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The duration taken in seconds.',
            name: 'timeTaken',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of successful inner queries (actions).',
            name: 'committedOperations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of failed inner queries (actions).',
            name: 'failedOperations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of failed batches.',
            name: 'failedBatches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The number of retries.',
            name: 'retries',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'A map of batch error messages paired with their corresponding error counts.',
            name: 'errorMessages',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              '{\n     total :: INTEGER,\n     failed :: INTEGER,\n     committed :: INTEGER,\n     errors :: MAP\n}\n',
            name: 'batch',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              '{\n     total :: INTEGER,\n     failed :: INTEGER,\n     committed :: INTEGER,\n     errors :: MAP\n}\n',
            name: 'operations',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'If the transaction was terminated before completion.',
            name: 'wasTerminated',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description:
              'Parameters of failed batches. The key is the batch number as a STRING and the value is a list of batch parameters.',
            name: 'failedParams',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              '{\n    nodesCreated :: INTEGER,\n    nodesDeleted :: INTEGER,\n    relationshipsCreated :: INTEGER,\n    relationshipsDeleted :: INTEGER,\n    propertiesSet :: INTEGER,\n    labelsAdded :: INTEGER,\n    labelsRemoved :: INTEGER\n}\n',
            name: 'updateStatistics',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.periodic.list': {
        name: 'apoc.periodic.list',
        description: 'Returns a `LIST<ANY>` of all background jobs.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.periodic.list() :: (name :: STRING, delay :: INTEGER, rate :: INTEGER, done :: BOOLEAN, cancelled :: BOOLEAN)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the job.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The delay on the job.',
            name: 'delay',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The rate of the job.',
            name: 'rate',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'If the job has completed.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'If the job has been cancelled.',
            name: 'cancelled',
            type: 'BOOLEAN',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.periodic.repeat': {
        name: 'apoc.periodic.repeat',
        description:
          'Runs a repeatedly called background job.\nTo stop this procedure, use `apoc.periodic.cancel`.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.periodic.repeat(name :: STRING, statement :: STRING, rate :: INTEGER, config = {} :: MAP) :: (name :: STRING, delay :: INTEGER, rate :: INTEGER, done :: BOOLEAN, cancelled :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the job.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The Cypher statement to run.',
            name: 'statement',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The delay in seconds to wait between each job execution.',
            name: 'rate',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: '{ params = {} :: MAP }',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the job.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The delay on the job.',
            name: 'delay',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The rate of the job.',
            name: 'rate',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'If the job has completed.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'If the job has been cancelled.',
            name: 'cancelled',
            type: 'BOOLEAN',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.periodic.submit': {
        name: 'apoc.periodic.submit',
        description:
          'Creates a background job which runs the given Cypher statement once.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.periodic.submit(name :: STRING, statement :: STRING, params = {} :: MAP) :: (name :: STRING, delay :: INTEGER, rate :: INTEGER, done :: BOOLEAN, cancelled :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the job.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The Cypher statement to run.',
            name: 'statement',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: '{ params = {} :: MAP }',
            name: 'params',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the job.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The delay on the job.',
            name: 'delay',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The rate of the job.',
            name: 'rate',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'If the job has completed.',
            name: 'done',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'If the job has been cancelled.',
            name: 'cancelled',
            type: 'BOOLEAN',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.periodic.truncate': {
        name: 'apoc.periodic.truncate',
        description:
          'Removes all entities (and optionally indexes and constraints) from the database using the `apoc.periodic.iterate` procedure.',
        mode: 'SCHEMA',
        worksOnSystem: false,
        signature: 'apoc.periodic.truncate(config = {} :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    dropSchema = true :: BOOLEAN,\n    batchSize = 10000 :: INTEGER,\n    parallel = false :: BOOLEAN,\n    retries = 0 :: INTEGER,\n    batchMode = "BATCH" :: STRING,\n    params = {} :: MAP,\n    concurrency :: INTEGER,\n    failedParams = -1 :: INTEGER,\n    planner = "DEFAULT" :: ["DEFAULT", "COST", "IDP", "DP"]\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.refactor.categorize': {
        name: 'apoc.refactor.categorize',
        description:
          'Creates new category `NODE` values from `NODE` values in the graph with the specified `sourceKey` as one of its property keys.\nThe new category `NODE` values are then connected to the original `NODE` values with a `RELATIONSHIP` of the given type.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.refactor.categorize(sourceKey :: STRING, type :: STRING, outgoing :: BOOLEAN, label :: STRING, targetKey :: STRING, copiedKeys :: LIST<STRING>, batchSize :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The property key to add to the on the new node.',
            name: 'sourceKey',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The relationship type to connect to the new node.',
            name: 'type',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Whether the relationship should be outgoing or not.',
            name: 'outgoing',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The label of the new node.',
            name: 'label',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The name by which the source key value will be referenced on the new node.',
            name: 'targetKey',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'A list of additional property keys to be copied to the new node.',
            name: 'copiedKeys',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The max size of each batch.',
            name: 'batchSize',
            type: 'INTEGER',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.refactor.cloneNodes': {
        name: 'apoc.refactor.cloneNodes',
        description:
          'Clones the given `NODE` values with their labels and properties.\nIt is possible to skip any `NODE` properties using skipProperties (note: this only skips properties on `NODE` values and not their `RELATIONSHIP` values).',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.refactor.cloneNodes(nodes :: LIST<NODE>, withRelationships = false :: BOOLEAN, skipProperties = [] :: LIST<STRING>) :: (input :: INTEGER, output :: NODE, error :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The nodes to be cloned.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=false, type=BOOLEAN}',
            description:
              'Whether or not the connected relationships should also be cloned.',
            name: 'withRelationships',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[], type=LIST<STRING>}',
            description:
              'Whether or not to skip the node properties when cloning.',
            name: 'skipProperties',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The internal id of the original entity.',
            name: 'input',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The copied entity.',
            name: 'output',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'Any error that occurred during the copy process.',
            name: 'error',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.refactor.cloneSubgraph': {
        name: 'apoc.refactor.cloneSubgraph',
        description:
          'Clones the given `NODE` values with their labels and properties (optionally skipping any properties in the `skipProperties` `LIST<STRING>` via the config `MAP`), and clones the given `RELATIONSHIP` values.\nIf no `RELATIONSHIP` values are provided, all existing `RELATIONSHIP` values between the given `NODE` values will be cloned.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.refactor.cloneSubgraph(nodes :: LIST<NODE>, rels = [] :: LIST<RELATIONSHIP>, config = {} :: MAP) :: (input :: INTEGER, output :: NODE, error :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The nodes to be cloned.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[], type=LIST<RELATIONSHIP>}',
            description:
              'The relationships to be cloned. If left empty all relationships between the given nodes will be cloned.',
            name: 'rels',
            type: 'LIST<RELATIONSHIP>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    standinNodes :: LIST<LIST<NODE>>,\n    skipProperties :: LIST<STRING>,\n    createNodesInNewTransactions = false :: BOOLEAN\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The internal id of the original entity.',
            name: 'input',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The copied entity.',
            name: 'output',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'Any error that occurred during the copy process.',
            name: 'error',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.refactor.cloneSubgraphFromPaths': {
        name: 'apoc.refactor.cloneSubgraphFromPaths',
        description:
          'Clones a sub-graph defined by the given `LIST<PATH>` values.\nIt is possible to skip any `NODE` properties using the `skipProperties` `LIST<STRING>` via the config `MAP`.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.refactor.cloneSubgraphFromPaths(paths :: LIST<PATH>, config = {} :: MAP) :: (input :: INTEGER, output :: NODE, error :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The paths to be cloned.',
            name: 'paths',
            type: 'LIST<PATH>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    standinNodes :: LIST<LIST<NODE>>,\n    skipProperties :: LIST<STRING>\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The internal id of the original entity.',
            name: 'input',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The copied entity.',
            name: 'output',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'Any error that occurred during the copy process.',
            name: 'error',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.refactor.collapseNode': {
        name: 'apoc.refactor.collapseNode',
        description:
          'Collapses the given `NODE` and replaces it with a `RELATIONSHIP` of the given type.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.refactor.collapseNode(nodes :: ANY, relType :: STRING) :: (input :: INTEGER, output :: RELATIONSHIP, error :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The nodes to collapse. Nodes can be of type `STRING` (elementId()), `INTEGER` (id()), `NODE`, or `LIST<STRING | INTEGER | NODE>`.',
            name: 'nodes',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The name of the resulting relationship type.',
            name: 'relType',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The id of the given relationship.',
            name: 'input',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'The id of the new relationship with the updated type.',
            name: 'output',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description: 'The message if an error occurred.',
            name: 'error',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.refactor.deleteAndReconnect': {
        name: 'apoc.refactor.deleteAndReconnect',
        description:
          'Removes the given `NODE` values from the `PATH` and reconnects the remaining `NODE` values.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.refactor.deleteAndReconnect(path :: PATH, nodes :: LIST<NODE>, config = {} :: MAP) :: (nodes :: LIST<NODE>, relationships :: LIST<RELATIONSHIP>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The path containing the nodes to delete and the remaining nodes to reconnect.',
            name: 'path',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            description: 'The nodes to delete.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    relationshipSelectionStrategy = "incoming" :: ["incoming", "outgoing", "merge"]\n    properties :: ["overwrite", "discard", "combine"]\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The remaining nodes.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            description: 'The new connecting relationships.',
            name: 'relationships',
            type: 'LIST<RELATIONSHIP>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.refactor.extractNode': {
        name: 'apoc.refactor.extractNode',
        description:
          'Expands the given `RELATIONSHIP` VALUES into intermediate `NODE` VALUES.\nThe intermediate `NODE` values are connected by the given `outType` and `inType`.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.refactor.extractNode(rels :: ANY, labels :: LIST<STRING>, outType :: STRING, inType :: STRING) :: (input :: INTEGER, output :: NODE, error :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The relationships to turn into new nodes. Relationships can be of type `STRING` (elementId()), `INTEGER` (id()), `RELATIONSHIP`, or `LIST<STRING | INTEGER | RELATIONSHIP>`.',
            name: 'rels',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The labels to be added to the new nodes.',
            name: 'labels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The type of the outgoing relationship.',
            name: 'outType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The type of the ingoing relationship.',
            name: 'inType',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The internal id of the original entity.',
            name: 'input',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The copied entity.',
            name: 'output',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'Any error that occurred during the copy process.',
            name: 'error',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.refactor.from': {
        name: 'apoc.refactor.from',
        description:
          'Redirects the given `RELATIONSHIP` to the given start `NODE`.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.refactor.from(rel :: RELATIONSHIP, newNode :: NODE) :: (input :: INTEGER, output :: RELATIONSHIP, error :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The relationship to redirect.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description: 'The node to redirect the given relationship to.',
            name: 'newNode',
            type: 'NODE',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The internal id of the original entity.',
            name: 'input',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The copied entity.',
            name: 'output',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description: 'Any error that occurred during the copy process.',
            name: 'error',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.refactor.invert': {
        name: 'apoc.refactor.invert',
        description: 'Inverts the direction of the given `RELATIONSHIP`.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.refactor.invert(rel :: RELATIONSHIP) :: (input :: INTEGER, output :: RELATIONSHIP, error :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The relationship to reverse.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The internal id of the original entity.',
            name: 'input',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The copied entity.',
            name: 'output',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description: 'Any error that occurred during the copy process.',
            name: 'error',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.refactor.mergeNodes': {
        name: 'apoc.refactor.mergeNodes',
        description:
          'Merges the given `LIST<NODE>` onto the first `NODE` in the `LIST<NODE>`.\nAll `RELATIONSHIP` values are merged onto that `NODE` as well.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.refactor.mergeNodes(nodes :: LIST<NODE>, config = {} :: MAP) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The nodes to be merged onto the first node.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    mergeRels :: BOOLEAN,\n    selfRef :: BOOLEAN,\n    produceSelfRef = true :: BOOLEAN,\n    preserveExistingSelfRels = true :: BOOLEAN,\n    countMerge = true :: BOOLEAN,\n    collapsedLabel :: BOOLEAN,\n    singleElementAsArray = false :: BOOLEAN,\n    avoidDuplicates = false :: BOOLEAN,\n    relationshipSelectionStrategy = "incoming" :: ["incoming", "outgoing", "merge"]\n    properties :: ["overwrite", ""discard", "combine"]\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The merged node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.refactor.mergeRelationships': {
        name: 'apoc.refactor.mergeRelationships',
        description:
          'Merges the given `LIST<RELATIONSHIP>` onto the first `RELATIONSHIP` in the `LIST<RELATIONSHIP>`.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.refactor.mergeRelationships(rels :: LIST<RELATIONSHIP>, config = {} :: MAP) :: (rel :: RELATIONSHIP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The relationships to be merged onto the first relationship.',
            name: 'rels',
            type: 'LIST<RELATIONSHIP>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    mergeRels :: BOOLEAN,\n    selfRef :: BOOLEAN,\n    produceSelfRef = true :: BOOLEAN,\n    preserveExistingSelfRels = true :: BOOLEAN,\n    countMerge = true :: BOOLEAN,\n    collapsedLabel :: BOOLEAN,\n    singleElementAsArray = false :: BOOLEAN,\n    avoidDuplicates = false :: BOOLEAN,\n    relationshipSelectionStrategy = "incoming" :: ["incoming", "outgoing", "merge"]\n    properties :: ["overwrite", "discard", "combine"]\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The merged relationship.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.refactor.normalizeAsBoolean': {
        name: 'apoc.refactor.normalizeAsBoolean',
        description: 'Refactors the given property to a `BOOLEAN`.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.refactor.normalizeAsBoolean(entity :: ANY, propertyKey :: STRING, trueValues :: LIST<ANY>, falseValues :: LIST<ANY>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The node or relationship whose properties will be normalized to booleans.',
            name: 'entity',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The name of the property key to normalize.',
            name: 'propertyKey',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The possible representations of true values.',
            name: 'trueValues',
            type: 'LIST<ANY>',
          },
          {
            isDeprecated: false,
            description: 'The possible representations of false values.',
            name: 'falseValues',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.refactor.rename.label': {
        name: 'apoc.refactor.rename.label',
        description:
          'Renames the given label from `oldLabel` to `newLabel` for all `NODE` values.\nIf a `LIST<NODE>` is provided, the renaming is applied to the `NODE` values within this `LIST<NODE>` only.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.refactor.rename.label(oldLabel :: STRING, newLabel :: STRING, nodes = [] :: LIST<NODE>) :: (batches :: INTEGER, total :: INTEGER, timeTaken :: INTEGER, committedOperations :: INTEGER, failedOperations :: INTEGER, failedBatches :: INTEGER, retries :: INTEGER, errorMessages :: MAP, batch :: MAP, operations :: MAP, constraints :: LIST<STRING>, indexes :: LIST<STRING>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The label to rename.',
            name: 'oldLabel',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The new name to give the label.',
            name: 'newLabel',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[], type=LIST<NODE>}',
            description:
              'The nodes to apply the new name to. If this list is empty, all nodes with the old label will be renamed.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The number of batches the operation was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of renamings performed.',
            name: 'total',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The time taken to complete the operation.',
            name: 'timeTaken',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of committed operations.',
            name: 'committedOperations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of failed operations.',
            name: 'failedOperations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of failed batches.',
            name: 'failedBatches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of retries.',
            name: 'retries',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The collected error messages.',
            name: 'errorMessages',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              '{\n     total :: INTEGER,\n     failed :: INTEGER,\n     committed :: INTEGER,\n     errors :: MAP\n}\n',
            name: 'batch',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              '{\n     total :: INTEGER,\n     failed :: INTEGER,\n     committed :: INTEGER,\n     errors :: MAP\n}\n',
            name: 'operations',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'Constraints associated with the given label or type.',
            name: 'constraints',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'Indexes associated with the given label or type.',
            name: 'indexes',
            type: 'LIST<STRING>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.refactor.rename.nodeProperty': {
        name: 'apoc.refactor.rename.nodeProperty',
        description:
          'Renames the given property from `oldName` to `newName` for all `NODE` values.\nIf a `LIST<NODE>` is provided, the renaming is applied to the `NODE` values within this `LIST<NODE>` only.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.refactor.rename.nodeProperty(oldName :: STRING, newName :: STRING, nodes = [] :: LIST<NODE>, config = {} :: MAP) :: (batches :: INTEGER, total :: INTEGER, timeTaken :: INTEGER, committedOperations :: INTEGER, failedOperations :: INTEGER, failedBatches :: INTEGER, retries :: INTEGER, errorMessages :: MAP, batch :: MAP, operations :: MAP, constraints :: LIST<STRING>, indexes :: LIST<STRING>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The property to rename.',
            name: 'oldName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The new name to give the property.',
            name: 'newName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[], type=LIST<NODE>}',
            description:
              'The nodes to apply the new name to. If this list is empty, all nodes with the old property name will be renamed.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    batchSize = 100000 :: INTEGER,\n    concurrency :: INTEGER,\n    retries = 0 :: INTEGER,\n    parallel = true :: BOOLEAN,\n    batchMode = "BATCH" :: STRING\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The number of batches the operation was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of renamings performed.',
            name: 'total',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The time taken to complete the operation.',
            name: 'timeTaken',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of committed operations.',
            name: 'committedOperations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of failed operations.',
            name: 'failedOperations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of failed batches.',
            name: 'failedBatches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of retries.',
            name: 'retries',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The collected error messages.',
            name: 'errorMessages',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              '{\n     total :: INTEGER,\n     failed :: INTEGER,\n     committed :: INTEGER,\n     errors :: MAP\n}\n',
            name: 'batch',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              '{\n     total :: INTEGER,\n     failed :: INTEGER,\n     committed :: INTEGER,\n     errors :: MAP\n}\n',
            name: 'operations',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'Constraints associated with the given label or type.',
            name: 'constraints',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'Indexes associated with the given label or type.',
            name: 'indexes',
            type: 'LIST<STRING>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.refactor.rename.type': {
        name: 'apoc.refactor.rename.type',
        description:
          'Renames all `RELATIONSHIP` values with type `oldType` to `newType`.\nIf a `LIST<RELATIONSHIP>` is provided, the renaming is applied to the `RELATIONSHIP` values within this `LIST<RELATIONSHIP>` only.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.refactor.rename.type(oldType :: STRING, newType :: STRING, rels = [] :: LIST<RELATIONSHIP>, config = {} :: MAP) :: (batches :: INTEGER, total :: INTEGER, timeTaken :: INTEGER, committedOperations :: INTEGER, failedOperations :: INTEGER, failedBatches :: INTEGER, retries :: INTEGER, errorMessages :: MAP, batch :: MAP, operations :: MAP, constraints :: LIST<STRING>, indexes :: LIST<STRING>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The type to rename.',
            name: 'oldType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The new type for the relationship.',
            name: 'newType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[], type=LIST<RELATIONSHIP>}',
            description:
              'The relationships to apply the new name to. If this list is empty, all relationships with the old type will be renamed.',
            name: 'rels',
            type: 'LIST<RELATIONSHIP>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    batchSize = 100000 :: INTEGER,\n    concurrency :: INTEGER,\n    retries = 0 :: INTEGER,\n    parallel = true :: BOOLEAN,\n    batchMode = "BATCH" :: STRING\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The number of batches the operation was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of renamings performed.',
            name: 'total',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The time taken to complete the operation.',
            name: 'timeTaken',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of committed operations.',
            name: 'committedOperations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of failed operations.',
            name: 'failedOperations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of failed batches.',
            name: 'failedBatches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of retries.',
            name: 'retries',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The collected error messages.',
            name: 'errorMessages',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              '{\n     total :: INTEGER,\n     failed :: INTEGER,\n     committed :: INTEGER,\n     errors :: MAP\n}\n',
            name: 'batch',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              '{\n     total :: INTEGER,\n     failed :: INTEGER,\n     committed :: INTEGER,\n     errors :: MAP\n}\n',
            name: 'operations',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'Constraints associated with the given label or type.',
            name: 'constraints',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'Indexes associated with the given label or type.',
            name: 'indexes',
            type: 'LIST<STRING>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.refactor.rename.typeProperty': {
        name: 'apoc.refactor.rename.typeProperty',
        description:
          'Renames the given property from `oldName` to `newName` for all `RELATIONSHIP` values.\nIf a `LIST<RELATIONSHIP>` is provided, the renaming is applied to the `RELATIONSHIP` values within this `LIST<RELATIONSHIP>` only.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.refactor.rename.typeProperty(oldName :: STRING, newName :: STRING, rels = [] :: LIST<RELATIONSHIP>, config = {} :: MAP) :: (batches :: INTEGER, total :: INTEGER, timeTaken :: INTEGER, committedOperations :: INTEGER, failedOperations :: INTEGER, failedBatches :: INTEGER, retries :: INTEGER, errorMessages :: MAP, batch :: MAP, operations :: MAP, constraints :: LIST<STRING>, indexes :: LIST<STRING>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The property to rename.',
            name: 'oldName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The new name to give the property.',
            name: 'newName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[], type=LIST<RELATIONSHIP>}',
            description:
              'The relationships to apply the new name to. If this list is empty, all relationships with the old properties name will be renamed.',
            name: 'rels',
            type: 'LIST<RELATIONSHIP>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    batchSize = 100000 :: INTEGER,\n    concurrency :: INTEGER,\n    retries = 0 :: INTEGER,\n    parallel = true :: BOOLEAN,\n    batchMode = "BATCH" :: STRING\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The number of batches the operation was run in.',
            name: 'batches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of renamings performed.',
            name: 'total',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The time taken to complete the operation.',
            name: 'timeTaken',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of committed operations.',
            name: 'committedOperations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of failed operations.',
            name: 'failedOperations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of failed batches.',
            name: 'failedBatches',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The total number of retries.',
            name: 'retries',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The collected error messages.',
            name: 'errorMessages',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              '{\n     total :: INTEGER,\n     failed :: INTEGER,\n     committed :: INTEGER,\n     errors :: MAP\n}\n',
            name: 'batch',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              '{\n     total :: INTEGER,\n     failed :: INTEGER,\n     committed :: INTEGER,\n     errors :: MAP\n}\n',
            name: 'operations',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'Constraints associated with the given label or type.',
            name: 'constraints',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'Indexes associated with the given label or type.',
            name: 'indexes',
            type: 'LIST<STRING>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.refactor.setType': {
        name: 'apoc.refactor.setType',
        description: 'Changes the type of the given `RELATIONSHIP`.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.refactor.setType(rel :: RELATIONSHIP, newType :: STRING) :: (input :: INTEGER, output :: RELATIONSHIP, error :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The relationship to change the type of.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description: 'The new type for the relationship.',
            name: 'newType',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The id of the given relationship.',
            name: 'input',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'The id of the new relationship with the updated type.',
            name: 'output',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description: 'The message if an error occurred.',
            name: 'error',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.refactor.to': {
        name: 'apoc.refactor.to',
        description:
          'Redirects the given `RELATIONSHIP` to the given end `NODE`.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'apoc.refactor.to(rel :: RELATIONSHIP, endNode :: NODE) :: (input :: INTEGER, output :: RELATIONSHIP, error :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The relationship to redirect.',
            name: 'rel',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description: 'The new end node the relationship should point to.',
            name: 'endNode',
            type: 'NODE',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The id of the given relationship.',
            name: 'input',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'The id of the new relationship with the updated type.',
            name: 'output',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description: 'The message if an error occurred.',
            name: 'error',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.schema.assert': {
        name: 'apoc.schema.assert',
        description:
          'Drops all other existing indexes and constraints when `dropExisting` is `true` (default is `true`).\nAsserts at the end of the operation that the given indexes and unique constraints are there.',
        mode: 'SCHEMA',
        worksOnSystem: false,
        signature:
          'apoc.schema.assert(indexes :: MAP, constraints :: MAP, dropExisting = true :: BOOLEAN) :: (label :: ANY, key :: STRING, keys :: LIST<STRING>, unique :: BOOLEAN, action :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A map that pairs labels with lists of properties to create indexes from.',
            name: 'indexes',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description:
              'A map that pairs labels with lists of properties to create constraints from.',
            name: 'constraints',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=true, type=BOOLEAN}',
            description:
              'Whether or not to drop all other existing indexes and constraints.',
            name: 'dropExisting',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The label associated with the constraint or index.',
            name: 'label',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'The property key associated with the constraint or index.',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The property keys associated with the constraint or index.',
            name: 'keys',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'Whether or not this is a uniqueness constraint.',
            name: 'unique',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description:
              'The action applied to this constraint or index; can be ["KEPT", "CREATED", "DROPPED"]',
            name: 'action',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.schema.nodes': {
        name: 'apoc.schema.nodes',
        description:
          'Returns all indexes and constraints information for all `NODE` labels in the database.\nIt is possible to define a set of labels to include or exclude in the config parameters.',
        mode: 'SCHEMA',
        worksOnSystem: false,
        signature:
          'apoc.schema.nodes(config = {} :: MAP) :: (name :: STRING, label :: ANY, properties :: LIST<STRING>, status :: STRING, type :: STRING, failure :: STRING, populationProgress :: FLOAT, size :: INTEGER, valuesSelectivity :: FLOAT, userDescription :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    labels :: LIST<STRING>,\n    excludeLabels :: LIST<STRING>,\n    relationships :: LIST<STRING>,\n    excludeRelationships :: LIST<STRING>\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A generated name for the index or constraint.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The label associated with the constraint or index.',
            name: 'label',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'The property keys associated with the constraint or index.',
            name: 'properties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The status of the constraint or index.',
            name: 'status',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The type of the index or constraint.',
            name: 'type',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'If a failure has occurred.',
            name: 'failure',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The percentage of the constraint or index population. ',
            name: 'populationProgress',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description:
              'The number of entries in the given constraint or index.',
            name: 'size',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'A ratio between 0.0 and 1.0, representing how many unique values were seen from the sampling.',
            name: 'valuesSelectivity',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'A descriptor of the constraint or index.',
            name: 'userDescription',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.schema.properties.distinct': {
        name: 'apoc.schema.properties.distinct',
        description:
          'Returns all distinct `NODE` property values for the given key.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.schema.properties.distinct(label :: STRING, key :: STRING) :: (value :: LIST<ANY>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The node label to find distinct properties on.',
            name: 'label',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the property to find distinct values of.',
            name: 'key',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The list of distinct values for the given property.',
            name: 'value',
            type: 'LIST<ANY>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.schema.properties.distinctCount': {
        name: 'apoc.schema.properties.distinctCount',
        description:
          'Returns all distinct property values and counts for the given key.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.schema.properties.distinctCount(label =  :: STRING, key =  :: STRING) :: (label :: STRING, key :: STRING, value :: ANY, count :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'The node label to count distinct properties on.',
            name: 'label',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              'The name of the property to count distinct values of.',
            name: 'key',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The label of the node.',
            name: 'label',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the property key.',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The distinct value.',
            name: 'value',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'The number of occurrences of the value.',
            name: 'count',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.schema.relationships': {
        name: 'apoc.schema.relationships',
        description:
          'Returns the indexes and constraints information for all the relationship types in the database.\nIt is possible to define a set of relationship types to include or exclude in the config parameters.',
        mode: 'SCHEMA',
        worksOnSystem: false,
        signature:
          'apoc.schema.relationships(config = {} :: MAP) :: (name :: STRING, type :: STRING, properties :: LIST<STRING>, status :: STRING, relationshipType :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{\n    labels :: LIST<STRING>,\n    excludeLabels :: LIST<STRING>,\n    relationships :: LIST<STRING>,\n    excludeRelationships :: LIST<STRING>\n}\n',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A generated name for the index or constraint.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The type of the index or constraint.',
            name: 'type',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The property keys associated with the constraint or index.',
            name: 'properties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The status of the constraint or index.',
            name: 'status',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The relationship type associated with the constraint or index.',
            name: 'relationshipType',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.search.multiSearchReduced': {
        name: 'apoc.search.multiSearchReduced',
        description:
          'Returns a reduced representation of the `NODE` values found after a parallel search over multiple indexes.\nThe reduced `NODE` values representation includes: node id, node labels, and the searched properties.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.search.multiSearchReduced(labelPropertyMap :: ANY, operator :: STRING, value :: STRING) :: (id :: INTEGER, labels :: LIST<STRING>, values :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A map that pairs labels with lists of properties. This can also be represented as a JSON string.',
            name: 'labelPropertyMap',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'The search operator, can be one of: ["exact", "starts with", "ends with", "contains", "<", ">", "=", "<>", "<=", ">=", "=~"].',
            name: 'operator',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The search value.',
            name: 'value',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The id of the found node.',
            name: 'id',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The labels of the found node.',
            name: 'labels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The matched values of the found node.',
            name: 'values',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.search.node': {
        name: 'apoc.search.node',
        description:
          'Returns all the distinct `NODE` values found after a parallel search over multiple indexes.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.search.node(labelPropertyMap :: ANY, operator :: STRING, value :: STRING) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A map that pairs labels with lists of properties. This can also be represented as a JSON string.',
            name: 'labelPropertyMap',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'The search operator, can be one of: ["exact", "starts with", "ends with", "contains", "<", ">", "=", "<>", "<=", ">=", "=~"].',
            name: 'operator',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The search value.',
            name: 'value',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The found node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.search.nodeAll': {
        name: 'apoc.search.nodeAll',
        description:
          'Returns all the `NODE` values found after a parallel search over multiple indexes.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.search.nodeAll(labelPropertyMap :: ANY, operator :: STRING, value :: STRING) :: (node :: NODE)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A map that pairs labels with lists of properties. This can also be represented as a JSON string.',
            name: 'labelPropertyMap',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'The search operator, can be one of: ["exact", "starts with", "ends with", "contains", "<", ">", "=", "<>", "<=", ">=", "=~"].',
            name: 'operator',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The search value.',
            name: 'value',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The found node.',
            name: 'node',
            type: 'NODE',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.search.nodeAllReduced': {
        name: 'apoc.search.nodeAllReduced',
        description:
          'Returns a reduced representation of the `NODE` values found after a parallel search over multiple indexes.\nThe reduced `NODE` values representation includes: node id, node labels, and the searched properties.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.search.nodeAllReduced(labelPropertyMap :: ANY, operator :: STRING, value :: ANY) :: (id :: INTEGER, labels :: LIST<STRING>, values :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A map that pairs labels with lists of properties. This can also be represented as a JSON string.',
            name: 'labelPropertyMap',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'The search operator, can be one of: ["exact", "starts with", "ends with", "contains", "<", ">", "=", "<>", "<=", ">=", "=~"].',
            name: 'operator',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The search value.',
            name: 'value',
            type: 'ANY',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The id of the found node.',
            name: 'id',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The labels of the found node.',
            name: 'labels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The matched values of the found node.',
            name: 'values',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.search.nodeReduced': {
        name: 'apoc.search.nodeReduced',
        description:
          'Returns a reduced representation of the distinct `NODE` values found after a parallel search over multiple indexes.\nThe reduced `NODE` values representation includes: node id, node labels, and the searched properties.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.search.nodeReduced(labelPropertyMap :: ANY, operator :: STRING, value :: STRING) :: (id :: INTEGER, labels :: LIST<STRING>, values :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A map that pairs labels with lists of properties. This can also be represented as a JSON string.',
            name: 'labelPropertyMap',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description:
              'The search operator, can be one of: ["exact", "starts with", "ends with", "contains", "<", ">", "=", "<>", "<=", ">=", "=~"].',
            name: 'operator',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The search value.',
            name: 'value',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The id of the found node.',
            name: 'id',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The labels of the found node.',
            name: 'labels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The matched values of the found node.',
            name: 'values',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.spatial.geocode': {
        name: 'apoc.spatial.geocode',
        description:
          'Returns the geographic location (latitude, longitude, and description) of the given address using a geocoding service (default: OpenStreetMap).',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.spatial.geocode(location :: STRING, maxResults = 100 :: INTEGER, quotaException = false :: BOOLEAN, config = {} :: MAP) :: (location :: MAP, data :: MAP, latitude :: FLOAT, longitude :: FLOAT, description :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The location to search for.',
            name: 'location',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=100, type=INTEGER}',
            description: 'The maximum number of returned results.',
            name: 'maxResults',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=false, type=BOOLEAN}',
            description:
              'Whether or not to throw an exception when the maximum request quota is reached.',
            name: 'quotaException',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              "{\n        provider = 'osm' :: STRING,\n        url :: STRING,\n        reverseUrl: :: STRING,\n        key :: STRING\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A detailed map of information on the found location.',
            name: 'location',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'A map of returned data from the given provider.',
            name: 'data',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The latitude of the found location.',
            name: 'latitude',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'The longitude of the found location.',
            name: 'longitude',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'A description of the found location.',
            name: 'description',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.spatial.geocodeOnce': {
        name: 'apoc.spatial.geocodeOnce',
        description:
          'Returns the geographic location (latitude, longitude, and description) of the given address using a geocoding service (default: OpenStreetMap).\nThis procedure returns at most one result.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.spatial.geocodeOnce(location :: STRING, config = {} :: MAP) :: (location :: MAP, data :: MAP, latitude :: FLOAT, longitude :: FLOAT, description :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The location to search for.',
            name: 'location',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              "{\n        provider = 'osm' :: STRING,\n        url :: STRING,\n        reverseUrl: :: STRING,\n        key :: STRING\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A detailed map of information on the found location.',
            name: 'location',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'A map of returned data from the given provider.',
            name: 'data',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The latitude of the found location.',
            name: 'latitude',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'The longitude of the found location.',
            name: 'longitude',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'A description of the found location.',
            name: 'description',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.spatial.reverseGeocode': {
        name: 'apoc.spatial.reverseGeocode',
        description:
          'Returns a textual address from the given geographic location (latitude, longitude) using a geocoding service (default: OpenStreetMap).\nThis procedure returns at most one result.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.spatial.reverseGeocode(latitude :: FLOAT, longitude :: FLOAT, quotaException = false :: BOOLEAN, config = {} :: MAP) :: (location :: MAP, data :: MAP, latitude :: FLOAT, longitude :: FLOAT, description :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The latitude of the location.',
            name: 'latitude',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'The longitude of the location.',
            name: 'longitude',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=false, type=BOOLEAN}',
            description:
              'Whether or not to throw an exception when the maximum request quota is reached.',
            name: 'quotaException',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              "{\n        provider = 'osm' :: STRING,\n        url :: STRING,\n        reverseUrl: :: STRING,\n        key :: STRING\n}\n",
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A detailed map of information on the found location.',
            name: 'location',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'A map of returned data from the given provider.',
            name: 'data',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The latitude of the found location.',
            name: 'latitude',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'The longitude of the found location.',
            name: 'longitude',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'A description of the found location.',
            name: 'description',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.spatial.sortByDistance': {
        name: 'apoc.spatial.sortByDistance',
        description:
          'Sorts the given collection of `PATH` values by the sum of their distance based on the latitude/longitude values in the `NODE` values.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.spatial.sortByDistance(paths :: LIST<PATH>) :: (path :: PATH, distance :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'A list of paths to be sorted by the sum of distances, calculated based on the latitude/longitude values in the nodes.',
            name: 'paths',
            type: 'LIST<PATH>',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The sorted path result.',
            name: 'path',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            description: 'The distance between the nodes.',
            name: 'distance',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.stats.degrees': {
        name: 'apoc.stats.degrees',
        description:
          'Returns the percentile groupings of the degrees on the `NODE` values connected by the given `RELATIONSHIP` types.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.stats.degrees(relTypes =  :: STRING) :: (type :: STRING, direction :: STRING, total :: INTEGER, p50 :: INTEGER, p75 :: INTEGER, p90 :: INTEGER, p95 :: INTEGER, p99 :: INTEGER, p999 :: INTEGER, max :: INTEGER, min :: INTEGER, mean :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              'The relationship types to calculate the percentile grouping over. If this is empty or omitted, all relationships are used.',
            name: 'relTypes',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The type of the relationship.',
            name: 'type',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The direction of the relationship.',
            name: 'direction',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The total observed relationships.',
            name: 'total',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The 50th percentile grouping.',
            name: 'p50',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The 75th percentile grouping.',
            name: 'p75',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The 90th percentile grouping.',
            name: 'p90',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The 95th percentile grouping.',
            name: 'p95',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The 99th percentile grouping.',
            name: 'p99',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The 99.9th percentile grouping.',
            name: 'p999',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The max value.',
            name: 'max',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The min value.',
            name: 'min',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The mean value.',
            name: 'mean',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.text.phoneticDelta': {
        name: 'apoc.text.phoneticDelta',
        description:
          'Returns the US_ENGLISH soundex character difference between the two given `STRING` values.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.text.phoneticDelta(text1 :: STRING, text2 :: STRING) :: (phonetic1 :: STRING, phonetic2 :: STRING, delta :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The first string to be compared against the second.',
            name: 'text1',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The second string to be compared against the first.',
            name: 'text2',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The phonetic representation of the first string.',
            name: 'phonetic1',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The phonetic representation of the second string.',
            name: 'phonetic2',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The soundex character difference between the two given strings.',
            name: 'delta',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.trigger.drop': {
        name: 'apoc.trigger.drop',
        description: 'Eventually removes the given trigger.',
        mode: 'WRITE',
        worksOnSystem: true,
        signature:
          'apoc.trigger.drop(databaseName :: STRING, name :: STRING) :: (name :: STRING, query :: STRING, selector :: MAP, params :: MAP, installed :: BOOLEAN, paused :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the database to drop the trigger from.',
            name: 'databaseName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the trigger to drop.',
            name: 'name',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the trigger.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The query belonging to the trigger.',
            name: 'query',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              '{ phase = "before" :: ["before", "rollback", "after", "afterAsync"] }',
            name: 'selector',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The parameters for the given Cypher statement.',
            name: 'params',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was installed.',
            name: 'installed',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was paused.',
            name: 'paused',
            type: 'BOOLEAN',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.trigger.dropAll': {
        name: 'apoc.trigger.dropAll',
        description: 'Eventually removes all triggers from the given database.',
        mode: 'WRITE',
        worksOnSystem: true,
        signature:
          'apoc.trigger.dropAll(databaseName :: STRING) :: (name :: STRING, query :: STRING, selector :: MAP, params :: MAP, installed :: BOOLEAN, paused :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the database to drop the triggers from.',
            name: 'databaseName',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the trigger.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The query belonging to the trigger.',
            name: 'query',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              '{ phase = "before" :: ["before", "rollback", "after", "afterAsync"] }',
            name: 'selector',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The parameters for the given Cypher statement.',
            name: 'params',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was installed.',
            name: 'installed',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was paused.',
            name: 'paused',
            type: 'BOOLEAN',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.trigger.install': {
        name: 'apoc.trigger.install',
        description:
          'Eventually adds a trigger for a given database which is invoked when a successful transaction occurs.',
        mode: 'WRITE',
        worksOnSystem: true,
        signature:
          'apoc.trigger.install(databaseName :: STRING, name :: STRING, statement :: STRING, selector :: MAP, config = {} :: MAP) :: (name :: STRING, query :: STRING, selector :: MAP, params :: MAP, installed :: BOOLEAN, paused :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the database to add the trigger to.',
            name: 'databaseName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the trigger to add.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The query to run when triggered.',
            name: 'statement',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              '{ phase = "before" :: ["before", "rollback", "after", "afterAsync"] }',
            name: 'selector',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'The parameters for the given Cypher statement.',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the trigger.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The query belonging to the trigger.',
            name: 'query',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              '{ phase = "before" :: ["before", "rollback", "after", "afterAsync"] }',
            name: 'selector',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The parameters for the given Cypher statement.',
            name: 'params',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was installed.',
            name: 'installed',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was paused.',
            name: 'paused',
            type: 'BOOLEAN',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.trigger.list': {
        name: 'apoc.trigger.list',
        description:
          'Lists all currently installed triggers for the session database.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'apoc.trigger.list() :: (name :: STRING, query :: STRING, selector :: MAP, params :: MAP, installed :: BOOLEAN, paused :: BOOLEAN)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the trigger.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The query belonging to the trigger.',
            name: 'query',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              '{ phase = "before" :: ["before", "rollback", "after", "afterAsync"] }',
            name: 'selector',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The parameters for the given Cypher statement.',
            name: 'params',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was installed.',
            name: 'installed',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was paused.',
            name: 'paused',
            type: 'BOOLEAN',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.trigger.show': {
        name: 'apoc.trigger.show',
        description: 'Lists all eventually installed triggers for a database.',
        mode: 'READ',
        worksOnSystem: true,
        signature:
          'apoc.trigger.show(databaseName :: STRING) :: (name :: STRING, query :: STRING, selector :: MAP, params :: MAP, installed :: BOOLEAN, paused :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the database to show triggers on.',
            name: 'databaseName',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the trigger.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The query belonging to the trigger.',
            name: 'query',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              '{ phase = "before" :: ["before", "rollback", "after", "afterAsync"] }',
            name: 'selector',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The parameters for the given Cypher statement.',
            name: 'params',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was installed.',
            name: 'installed',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was paused.',
            name: 'paused',
            type: 'BOOLEAN',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.trigger.start': {
        name: 'apoc.trigger.start',
        description: 'Eventually restarts the given paused trigger.',
        mode: 'WRITE',
        worksOnSystem: true,
        signature:
          'apoc.trigger.start(databaseName :: STRING, name :: STRING) :: (name :: STRING, query :: STRING, selector :: MAP, params :: MAP, installed :: BOOLEAN, paused :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the database the trigger is on.',
            name: 'databaseName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the trigger to resume.',
            name: 'name',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the trigger.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The query belonging to the trigger.',
            name: 'query',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              '{ phase = "before" :: ["before", "rollback", "after", "afterAsync"] }',
            name: 'selector',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The parameters for the given Cypher statement.',
            name: 'params',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was installed.',
            name: 'installed',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was paused.',
            name: 'paused',
            type: 'BOOLEAN',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.trigger.stop': {
        name: 'apoc.trigger.stop',
        description: 'Eventually stops the given trigger.',
        mode: 'WRITE',
        worksOnSystem: true,
        signature:
          'apoc.trigger.stop(databaseName :: STRING, name :: STRING) :: (name :: STRING, query :: STRING, selector :: MAP, params :: MAP, installed :: BOOLEAN, paused :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the database the trigger is on.',
            name: 'databaseName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the trigger to drop.',
            name: 'name',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the trigger.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The query belonging to the trigger.',
            name: 'query',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              '{ phase = "before" :: ["before", "rollback", "after", "afterAsync"] }',
            name: 'selector',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The parameters for the given Cypher statement.',
            name: 'params',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was installed.',
            name: 'installed',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the trigger was paused.',
            name: 'paused',
            type: 'BOOLEAN',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.util.sleep': {
        name: 'apoc.util.sleep',
        description:
          'Causes the currently running Cypher to sleep for the given duration of milliseconds (the transaction termination is honored).',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature: 'apoc.util.sleep(duration :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The milliseconds to sleep.',
            name: 'duration',
            type: 'INTEGER',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.util.validate': {
        name: 'apoc.util.validate',
        description: 'If the given predicate is true an exception is thrown.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.util.validate(predicate :: BOOLEAN, message :: STRING, params :: LIST<ANY>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The predicate to check against.',
            name: 'predicate',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description:
              'The error message to throw if the given predicate evaluates to true.',
            name: 'message',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The parameters for the given error message.',
            name: 'params',
            type: 'LIST<ANY>',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'apoc.when': {
        name: 'apoc.when',
        description:
          'This procedure will run the read-only `ifQuery` if the conditional has evaluated to true, otherwise the `elseQuery` will run.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'apoc.when(condition :: BOOLEAN, ifQuery :: STRING, elseQuery =  :: STRING, params = {} :: MAP) :: (value :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The predicate deciding if to run the `ifQuery`or not.',
            name: 'condition',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description:
              'The Cypher statement to run if the condition is true.',
            name: 'ifQuery',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              'The Cypher statement to run if the condition is false.',
            name: 'elseQuery',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'The parameters for the given Cypher statement.',
            name: 'params',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The result returned from the evaluated Cypher query.',
            name: 'value',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'cdc.current': {
        name: 'cdc.current',
        description:
          'Returns the current change identifier that can be used to stream changes from.',
        mode: 'READ',
        worksOnSystem: false,
        signature: 'cdc.current() :: (id :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The change identifier.',
            name: 'id',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy: 'db.cdc.current',
        option: {
          deprecated: true,
        },
      },
      'cdc.earliest': {
        name: 'cdc.earliest',
        description:
          'Returns the earliest change identifier that can be used to stream changes from.',
        mode: 'READ',
        worksOnSystem: false,
        signature: 'cdc.earliest() :: (id :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The change identifier.',
            name: 'id',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy: 'db.cdc.earliest',
        option: {
          deprecated: true,
        },
      },
      'cdc.query': {
        name: 'cdc.query',
        description:
          'Query changes happened from the provided change identifier.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'cdc.query(from =  :: STRING, selectors = [] :: LIST<MAP>) :: (id :: STRING, txId :: INTEGER, seq :: INTEGER, metadata :: MAP, event :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'The change identifier to query changes from.',
            name: 'from',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[], type=LIST<MAP>}',
            description: 'An optional list of selectors to filter out changes.',
            name: 'selectors',
            type: 'LIST<MAP>',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'The change identifier for this change event. Used to continue querying from this change event.',
            name: 'id',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'A number identifying which transaction the change happened in, unique in combination with seq.',
            name: 'txId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'A number used for ordering changes that happened in the same transaction.',
            name: 'seq',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'Metadata from the transaction that caused this change event.',
            name: 'metadata',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The retrieved changes on the affected entity.',
            name: 'event',
            type: 'MAP',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy: 'db.cdc.query',
        option: {
          deprecated: true,
        },
      },
      'db.awaitIndex': {
        name: 'db.awaitIndex',
        description:
          'Wait for an index to come online (for example: CALL db.awaitIndex("MyIndex", 300)).',
        mode: 'READ',
        worksOnSystem: true,
        signature:
          'db.awaitIndex(indexName :: STRING, timeOutSeconds = 300 :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the awaited index.',
            name: 'indexName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=300, type=INTEGER}',
            description: 'The maximum time to wait in seconds.',
            name: 'timeOutSeconds',
            type: 'INTEGER',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.awaitIndexes': {
        name: 'db.awaitIndexes',
        description:
          'Wait for all indexes to come online (for example: CALL db.awaitIndexes(300)).',
        mode: 'READ',
        worksOnSystem: true,
        signature: 'db.awaitIndexes(timeOutSeconds = 300 :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=300, type=INTEGER}',
            description: 'The maximum time to wait in seconds.',
            name: 'timeOutSeconds',
            type: 'INTEGER',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.cdc.current': {
        name: 'db.cdc.current',
        description:
          'Returns the current change identifier that can be used to stream changes from.',
        mode: 'READ',
        worksOnSystem: false,
        signature: 'db.cdc.current() :: (id :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The change identifier.',
            name: 'id',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.cdc.earliest': {
        name: 'db.cdc.earliest',
        description:
          'Returns the earliest change identifier that can be used to stream changes from.',
        mode: 'READ',
        worksOnSystem: false,
        signature: 'db.cdc.earliest() :: (id :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The change identifier.',
            name: 'id',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.cdc.query': {
        name: 'db.cdc.query',
        description:
          'Query changes happened from the provided change identifier.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'db.cdc.query(from =  :: STRING, selectors = [] :: LIST<MAP>) :: (id :: STRING, txId :: INTEGER, seq :: INTEGER, metadata :: MAP, event :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'The change identifier to query changes from.',
            name: 'from',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[], type=LIST<MAP>}',
            description: 'An optional list of selectors to filter out changes.',
            name: 'selectors',
            type: 'LIST<MAP>',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'The change identifier for this change event. Used to continue querying from this change event.',
            name: 'id',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'A number identifying which transaction the change happened in, unique in combination with seq.',
            name: 'txId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'A number used for ordering changes that happened in the same transaction.',
            name: 'seq',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'Metadata from the transaction that caused this change event.',
            name: 'metadata',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'The retrieved changes on the affected entity.',
            name: 'event',
            type: 'MAP',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.checkpoint': {
        name: 'db.checkpoint',
        description:
          'Initiate and wait for a new check point, or wait any already on-going check point to complete. Note that this temporarily disables the `db.checkpoint.iops.limit` setting in order to make the check point complete faster. This might cause transaction throughput to degrade slightly, due to increased IO load.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature: 'db.checkpoint() :: (success :: BOOLEAN, message :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'Whether the checkpoint has successfully completed.',
            name: 'success',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'Details about the outcome of the procedure.',
            name: 'message',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.clearQueryCaches': {
        name: 'db.clearQueryCaches',
        description: 'Clears all query caches.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature: 'db.clearQueryCaches() :: (value :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'Information about the number of cleared query caches.',
            name: 'value',
            type: 'STRING',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.create.setNodeVectorProperty': {
        name: 'db.create.setNodeVectorProperty',
        description:
          "Set a vector property on a given node in a more space efficient representation than Cypher's SET.",
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'db.create.setNodeVectorProperty(node :: NODE, key :: STRING, vector :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The node on which the new property will be stored.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description: 'The name of the new property.',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The object containing the embedding.',
            name: 'vector',
            type: 'ANY',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.create.setRelationshipVectorProperty': {
        name: 'db.create.setRelationshipVectorProperty',
        description:
          "Set a vector property on a given relationship in a more space efficient representation than Cypher's SET.",
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'db.create.setRelationshipVectorProperty(relationship :: RELATIONSHIP, key :: STRING, vector :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The relationship on which the new property will be stored.',
            name: 'relationship',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description: 'The name of the new property.',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The object containing the embedding.',
            name: 'vector',
            type: 'ANY',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.createLabel': {
        name: 'db.createLabel',
        description: 'Create a label',
        mode: 'WRITE',
        worksOnSystem: false,
        signature: 'db.createLabel(newLabel :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'Label name.',
            name: 'newLabel',
            type: 'STRING',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.createProperty': {
        name: 'db.createProperty',
        description: 'Create a Property',
        mode: 'WRITE',
        worksOnSystem: false,
        signature: 'db.createProperty(newProperty :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'Property name.',
            name: 'newProperty',
            type: 'STRING',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.createRelationshipType': {
        name: 'db.createRelationshipType',
        description: 'Create a RelationshipType',
        mode: 'WRITE',
        worksOnSystem: false,
        signature: 'db.createRelationshipType(newRelationshipType :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'Relationship type name.',
            name: 'newRelationshipType',
            type: 'STRING',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.index.fulltext.awaitEventuallyConsistentIndexRefresh': {
        name: 'db.index.fulltext.awaitEventuallyConsistentIndexRefresh',
        description:
          'Wait for the updates from recently committed transactions to be applied to any eventually-consistent full-text indexes.',
        mode: 'READ',
        worksOnSystem: true,
        signature: 'db.index.fulltext.awaitEventuallyConsistentIndexRefresh()',
        argumentDescription: [],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.index.fulltext.listAvailableAnalyzers': {
        name: 'db.index.fulltext.listAvailableAnalyzers',
        description:
          'List the available analyzers that the full-text indexes can be configured with.',
        mode: 'READ',
        worksOnSystem: true,
        signature:
          'db.index.fulltext.listAvailableAnalyzers() :: (analyzer :: STRING, description :: STRING, stopwords :: LIST<STRING>)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the analyzer.',
            name: 'analyzer',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The  description of the analyzer.',
            name: 'description',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The stopwords used by the analyzer to tokenize strings.',
            name: 'stopwords',
            type: 'LIST<STRING>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.index.fulltext.queryNodes': {
        name: 'db.index.fulltext.queryNodes',
        description:
          "Query the given full-text index. Returns the matching nodes and their Lucene query score, ordered by score.\nValid _key: value_ pairs for the `options` map are:\n\n* 'skip' -- to skip the top N results.\n* 'limit' -- to limit the number of results returned.\n* 'analyzer' -- to use the specified analyzer as a search analyzer for this query.\n\nThe `options` map and any of the keys are optional.\nAn example of the `options` map: `{skip: 30, limit: 10, analyzer: 'whitespace'}`\n",
        mode: 'READ',
        worksOnSystem: true,
        signature:
          'db.index.fulltext.queryNodes(indexName :: STRING, queryString :: STRING, options = {} :: MAP) :: (node :: NODE, score :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the full-text index.',
            name: 'indexName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The string to find approximate matches for.',
            name: 'queryString',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{skip :: INTEGER, limit :: INTEGER, analyzer :: STRING}',
            name: 'options',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'A node which contains a property similar to the query string.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description:
              'The score measuring how similar the node property is to the query string.',
            name: 'score',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.index.fulltext.queryRelationships': {
        name: 'db.index.fulltext.queryRelationships',
        description:
          "Query the given full-text index. Returns the matching relationships and their Lucene query score, ordered by score.\nValid _key: value_ pairs for the `options` map are:\n\n* 'skip' -- to skip the top N results.\n* 'limit' -- to limit the number of results returned.\n* 'analyzer' -- to use the specified analyzer as a search analyzer for this query.\n\nThe `options` map and any of the keys are optional.\nAn example of the `options` map: `{skip: 30, limit: 10, analyzer: 'whitespace'}`\n",
        mode: 'READ',
        worksOnSystem: true,
        signature:
          'db.index.fulltext.queryRelationships(indexName :: STRING, queryString :: STRING, options = {} :: MAP) :: (relationship :: RELATIONSHIP, score :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the full-text index.',
            name: 'indexName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The string to find approximate matches for.',
            name: 'queryString',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description:
              '{skip :: INTEGER, limit :: INTEGER, analyzer :: STRING}',
            name: 'options',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'A relationship which contains a property similar to the query string.',
            name: 'relationship',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description:
              'The score measuring how similar the relationship property is to the query string.',
            name: 'score',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.index.vector.queryNodes': {
        name: 'db.index.vector.queryNodes',
        description:
          'Query the given node vector index.\nReturns requested number of nearest neighbors to the provided query vector,\nand their similarity score to that query vector, based on the configured similarity function for the index.\nThe similarity score is a value between [0, 1]; where 0 indicates least similar, 1 most similar.\n',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'db.index.vector.queryNodes(indexName :: STRING, numberOfNearestNeighbours :: INTEGER, query :: ANY) :: (node :: NODE, score :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the vector index.',
            name: 'indexName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The size of the vector neighbourhood.',
            name: 'numberOfNearestNeighbours',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The object to find approximate matches for.',
            name: 'query',
            type: 'ANY',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'A node which contains a vector property similar to the query object.',
            name: 'node',
            type: 'NODE',
          },
          {
            isDeprecated: false,
            description:
              'The score measuring how similar the node property is to the query object.',
            name: 'score',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.index.vector.queryRelationships': {
        name: 'db.index.vector.queryRelationships',
        description:
          'Query the given relationship vector index.\nReturns requested number of nearest neighbors to the provided query vector,\nand their similarity score to that query vector, based on the configured similarity function for the index.\nThe similarity score is a value between [0, 1]; where 0 indicates least similar, 1 most similar.\n',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'db.index.vector.queryRelationships(indexName :: STRING, numberOfNearestNeighbours :: INTEGER, query :: ANY) :: (relationship :: RELATIONSHIP, score :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the vector index.',
            name: 'indexName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The size of the vector neighbourhood.',
            name: 'numberOfNearestNeighbours',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The object to find approximate matches for.',
            name: 'query',
            type: 'ANY',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'A relationship which contains a vector property similar to the query object.',
            name: 'relationship',
            type: 'RELATIONSHIP',
          },
          {
            isDeprecated: false,
            description:
              'The score measuring how similar the relationship property is to the query object.',
            name: 'score',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.info': {
        name: 'db.info',
        description: 'Provides information regarding the database.',
        mode: 'READ',
        worksOnSystem: true,
        signature:
          'db.info() :: (id :: STRING, name :: STRING, creationDate :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The id of the database.',
            name: 'id',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the database.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The creation date of the database, formatted according to the ISO-8601 Standard.',
            name: 'creationDate',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.labels': {
        name: 'db.labels',
        description:
          "List all labels attached to nodes within a database according to the user's access rights. The procedure returns empty results if the user is not authorized to view those labels.",
        mode: 'READ',
        worksOnSystem: true,
        signature: 'db.labels() :: (label :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A label within the database.',
            name: 'label',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.listLocks': {
        name: 'db.listLocks',
        description: 'List all locks at this database.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'db.listLocks() :: (mode :: STRING, resourceType :: STRING, resourceId :: INTEGER, transactionId :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'The locking mode this lock is using, either "SHARED" or "EXCLUSIVE".',
            name: 'mode',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The type of resource (e.g. nodes, relationships, labels) this lock protects.',
            name: 'resourceType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The id of the resource this lock protects.',
            name: 'resourceId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The id of the transaction that owns this lock.',
            name: 'transactionId',
            type: 'STRING',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.ping': {
        name: 'db.ping',
        description:
          'This procedure can be used by client side tooling to test whether they are correctly connected to a database. The procedure is available in all databases and always returns true. A faulty connection can be detected by not being able to call this procedure.',
        mode: 'READ',
        worksOnSystem: true,
        signature: 'db.ping() :: (success :: BOOLEAN)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'Whether or not the connection call to the database has been successful.',
            name: 'success',
            type: 'BOOLEAN',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.prepareForReplanning': {
        name: 'db.prepareForReplanning',
        description:
          'Triggers an index resample and waits for it to complete, and after that clears query caches. After this procedure has finished queries will be planned using the latest database statistics.',
        mode: 'READ',
        worksOnSystem: true,
        signature: 'db.prepareForReplanning(timeOutSeconds = 300 :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=300, type=INTEGER}',
            description: 'The maximum time to wait in seconds.',
            name: 'timeOutSeconds',
            type: 'INTEGER',
          },
        ],
        returnDescription: [],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.propertyKeys': {
        name: 'db.propertyKeys',
        description: 'List all property keys in the database.',
        mode: 'READ',
        worksOnSystem: true,
        signature: 'db.propertyKeys() :: (propertyKey :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A property key in the database.',
            name: 'propertyKey',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.relationshipTypes': {
        name: 'db.relationshipTypes',
        description:
          "List all types attached to relationships within a database according to the user's access rights. The procedure returns empty results if the user is not authorized to view those relationship types.",
        mode: 'READ',
        worksOnSystem: true,
        signature: 'db.relationshipTypes() :: (relationshipType :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A relationship type in the database.',
            name: 'relationshipType',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.resampleIndex': {
        name: 'db.resampleIndex',
        description:
          'Schedule resampling of an index (for example: CALL db.resampleIndex("MyIndex")).',
        mode: 'READ',
        worksOnSystem: true,
        signature: 'db.resampleIndex(indexName :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the index.',
            name: 'indexName',
            type: 'STRING',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.resampleOutdatedIndexes': {
        name: 'db.resampleOutdatedIndexes',
        description: 'Schedule resampling of all outdated indexes.',
        mode: 'READ',
        worksOnSystem: true,
        signature: 'db.resampleOutdatedIndexes()',
        argumentDescription: [],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.schema.nodeTypeProperties': {
        name: 'db.schema.nodeTypeProperties',
        description:
          'Show the derived property schema of the nodes in tabular form.',
        mode: 'READ',
        worksOnSystem: true,
        signature:
          'db.schema.nodeTypeProperties() :: (nodeType :: STRING, nodeLabels :: LIST<STRING>, propertyName :: STRING, propertyTypes :: LIST<STRING>, mandatory :: BOOLEAN)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A name generated from the labels on the node.',
            name: 'nodeType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'A list containing the labels on a category of node.',
            name: 'nodeLabels',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'A property key on a category of node.',
            name: 'propertyName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'All types of a property belonging to a node category.',
            name: 'propertyTypes',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description:
              'Whether or not the property is present on all nodes belonging to a node category.',
            name: 'mandatory',
            type: 'BOOLEAN',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.schema.relTypeProperties': {
        name: 'db.schema.relTypeProperties',
        description:
          'Show the derived property schema of the relationships in tabular form.',
        mode: 'READ',
        worksOnSystem: true,
        signature:
          'db.schema.relTypeProperties() :: (relType :: STRING, propertyName :: STRING, propertyTypes :: LIST<STRING>, mandatory :: BOOLEAN)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'A name generated from the type on the relationship.',
            name: 'relType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'A property key on a category of relationship.',
            name: 'propertyName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'All types of a property belonging to a relationship category.',
            name: 'propertyTypes',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description:
              'Whether or not the property is present on all relationships belonging to a relationship category.',
            name: 'mandatory',
            type: 'BOOLEAN',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.schema.visualization': {
        name: 'db.schema.visualization',
        description:
          'Visualizes the schema of the data based on available statistics. A new node is returned for each label. The properties represented on the node include: `name` (label name), `indexes` (list of indexes), and `constraints` (list of constraints). A relationship of a given type is returned for all possible combinations of start and end nodes. The properties represented on the relationship include: `name` (type name). Note that this may include additional relationships that do not exist in the data due to the information available in the count store. ',
        mode: 'READ',
        worksOnSystem: true,
        signature:
          'db.schema.visualization() :: (nodes :: LIST<NODE>, relationships :: LIST<RELATIONSHIP>)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'A list of virtual nodes representing each label in the database.',
            name: 'nodes',
            type: 'LIST<NODE>',
          },
          {
            isDeprecated: false,
            description:
              'A list of virtual relationships representing all combinations between start and end nodes in the database.',
            name: 'relationships',
            type: 'LIST<RELATIONSHIP>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.stats.clear': {
        name: 'db.stats.clear',
        description:
          "Clear collected data of a given data section. Valid sections are 'QUERIES'",
        mode: 'READ',
        worksOnSystem: true,
        signature:
          'db.stats.clear(section :: STRING) :: (section :: STRING, success :: BOOLEAN, message :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              "The section to clear. The only available section is: 'QUERIES'.",
            name: 'section',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The section cleared.',
            name: 'section',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Whether the section was successfully cleared.',
            name: 'success',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'Details about the outcome of the procedure.',
            name: 'message',
            type: 'STRING',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.stats.collect': {
        name: 'db.stats.collect',
        description:
          "Start data collection of a given data section. Valid sections are 'QUERIES'",
        mode: 'READ',
        worksOnSystem: true,
        signature:
          'db.stats.collect(section :: STRING, config = {} :: MAP) :: (section :: STRING, success :: BOOLEAN, message :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              "The section to collect. The only available section is: 'QUERIES'.",
            name: 'section',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: '{durationSeconds = -1 :: INTEGER}',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The section collected.',
            name: 'section',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Whether the section was successfully collected.',
            name: 'success',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'Details about the outcome of the procedure.',
            name: 'message',
            type: 'STRING',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.stats.retrieve': {
        name: 'db.stats.retrieve',
        description:
          "Retrieve statistical data about the current database. Valid sections are 'GRAPH COUNTS', 'TOKENS', 'QUERIES', 'META'",
        mode: 'READ',
        worksOnSystem: true,
        signature:
          'db.stats.retrieve(section :: STRING, config = {} :: MAP) :: (section :: STRING, data :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              "A section of stats to retrieve: ('GRAPH COUNTS', 'TOKENS', 'QUERIES', 'META').",
            name: 'section',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: '{maxInvocations = 100 :: INTEGER}',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The section retrieved.',
            name: 'section',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Data pertaining to the retrieved statistics.',
            name: 'data',
            type: 'MAP',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.stats.retrieveAllAnonymized': {
        name: 'db.stats.retrieveAllAnonymized',
        description:
          'Retrieve all available statistical data about the current database, in an anonymized form.',
        mode: 'READ',
        worksOnSystem: true,
        signature:
          'db.stats.retrieveAllAnonymized(graphToken :: STRING, config = {} :: MAP) :: (section :: STRING, data :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the graph token.',
            name: 'graphToken',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: '{maxInvocations = 100 :: INTEGER}',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The section retrieved.',
            name: 'section',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Data pertaining to the retrieved statistics.',
            name: 'data',
            type: 'MAP',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.stats.status': {
        name: 'db.stats.status',
        description:
          'Retrieve the status of all available collector daemons, for this database.',
        mode: 'READ',
        worksOnSystem: true,
        signature:
          'db.stats.status() :: (section :: STRING, status :: STRING, data :: MAP)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'String with the message "QUERIES".',
            name: 'section',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The status of the QueryCollector: "idle" or "collecting".',
            name: 'status',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'data :: MAP',
            name: 'data',
            type: 'MAP',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'db.stats.stop': {
        name: 'db.stats.stop',
        description:
          "Stop data collection of a given data section. Valid sections are 'QUERIES'",
        mode: 'READ',
        worksOnSystem: true,
        signature:
          'db.stats.stop(section :: STRING) :: (section :: STRING, success :: BOOLEAN, message :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              "The section to stop. The only available section is: 'QUERIES'.",
            name: 'section',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The stopped section.',
            name: 'section',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Whether the section was successfully stopped.',
            name: 'success',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'Details about the outcome of the procedure.',
            name: 'message',
            type: 'STRING',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.checkConfigValue': {
        name: 'dbms.checkConfigValue',
        description: 'Check if a potential config setting value is valid.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.checkConfigValue(setting :: STRING, value :: STRING) :: (valid :: BOOLEAN, message :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the setting.',
            name: 'setting',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The setting value to verify.',
            name: 'value',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'Whether or not the setting value is valid.',
            name: 'valid',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'Details about the outcome of the procedure.',
            name: 'message',
            type: 'STRING',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.cluster.checkConnectivity': {
        name: 'dbms.cluster.checkConnectivity',
        description:
          "Check the connectivity of this instance to other cluster members. Not all ports are relevant to all members. Valid values for 'port-name' are: [CLUSTER, INTRA_BOLT, RAFT]",
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.cluster.checkConnectivity(port-name = null :: STRING, server = null :: STRING) :: (serverId :: STRING, name :: STRING, address :: STRING, mode-constraint :: STRING, port-name :: STRING, port-address :: STRING, result :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=STRING}',
            description: "The name of the port: ('CLUSTER', 'RAFT').",
            name: 'port-name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=STRING}',
            description: 'The id of the server to check connectivity of.',
            name: 'server',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The id of the checked server.',
            name: 'serverId',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'address :: STRING',
            name: 'address',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The instance mode constraint of the server.',
            name: 'mode-constraint',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the checked port.',
            name: 'port-name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The address of the checked port.',
            name: 'port-address',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Whether the check was successful or not.',
            name: 'result',
            type: 'STRING',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.cluster.cordonServer': {
        name: 'dbms.cluster.cordonServer',
        description:
          'Mark a server in the topology as not suitable for new allocations. It will not force current allocations off the server. This is useful when deallocating databases when you have multiple unavailable servers.',
        mode: 'WRITE',
        worksOnSystem: true,
        signature: 'dbms.cluster.cordonServer(server :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name or id of the server to be cordoned.',
            name: 'server',
            type: 'STRING',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.cluster.deallocateDatabaseFromServer': {
        name: 'dbms.cluster.deallocateDatabaseFromServer',
        description:
          'Deallocate a specific user database from a specific server.',
        mode: 'WRITE',
        worksOnSystem: true,
        signature:
          'dbms.cluster.deallocateDatabaseFromServer(server :: STRING, database :: STRING, dryrun = false :: BOOLEAN) :: (database :: STRING, fromServerName :: STRING, fromServerId :: STRING, toServerName :: STRING, toServerId :: STRING, mode :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The id of the server to deallocate from.',
            name: 'server',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the database to deallocate.',
            name: 'database',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=false, type=BOOLEAN}',
            description: 'Set to `true` to dry run the procedure.',
            name: 'dryrun',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the database.',
            name: 'database',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the server.',
            name: 'fromServerName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The id of the server.',
            name: 'fromServerId',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the server.',
            name: 'toServerName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The id of the server.',
            name: 'toServerId',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The mode in which the database is hosted.',
            name: 'mode',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.cluster.deallocateDatabaseFromServers': {
        name: 'dbms.cluster.deallocateDatabaseFromServers',
        description:
          'Deallocate a specific user database from a list of servers.',
        mode: 'WRITE',
        worksOnSystem: true,
        signature:
          'dbms.cluster.deallocateDatabaseFromServers(servers :: LIST<STRING>, database :: STRING, dryrun = false :: BOOLEAN) :: (database :: STRING, fromServerName :: STRING, fromServerId :: STRING, toServerName :: STRING, toServerId :: STRING, mode :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The ids of the servers to deallocate from.',
            name: 'servers',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The id of the database to deallocate.',
            name: 'database',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=false, type=BOOLEAN}',
            description: 'Set to `true` to dry run the procedure.',
            name: 'dryrun',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the database.',
            name: 'database',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the server.',
            name: 'fromServerName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The id of the server.',
            name: 'fromServerId',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the server.',
            name: 'toServerName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The id of the server.',
            name: 'toServerId',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The mode in which the database is hosted.',
            name: 'mode',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.cluster.deallocateNumberOfDatabases': {
        name: 'dbms.cluster.deallocateNumberOfDatabases',
        description:
          'Deallocate a number of user databases from a specific server.',
        mode: 'WRITE',
        worksOnSystem: true,
        signature:
          'dbms.cluster.deallocateNumberOfDatabases(server :: STRING, number :: INTEGER, dryrun = false :: BOOLEAN) :: (database :: STRING, fromServerName :: STRING, fromServerId :: STRING, toServerName :: STRING, toServerId :: STRING, mode :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The id of the server to deallocate from.',
            name: 'server',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of databases to deallocate.',
            name: 'number',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=false, type=BOOLEAN}',
            description: 'Set to `true` to dry run the procedure.',
            name: 'dryrun',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the database.',
            name: 'database',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the server.',
            name: 'fromServerName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The id of the server.',
            name: 'fromServerId',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the server.',
            name: 'toServerName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The id of the server.',
            name: 'toServerId',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The mode in which the database is hosted.',
            name: 'mode',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.cluster.moveToNextDiscoveryVersion': {
        name: 'dbms.cluster.moveToNextDiscoveryVersion',
        description:
          "The procedure triggers a switch to the next discovery service version for all known members of the cluster (as listed in the system database and discovery). For example, if the current member's discovery version is V1_ONLY, it will switch all members to V1_OVER_V2. In case of failure, the user must manually resolve the issue.",
        mode: 'DBMS',
        worksOnSystem: true,
        signature: 'dbms.cluster.moveToNextDiscoveryVersion()',
        argumentDescription: [],
        returnDescription: [],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.cluster.protocols': {
        name: 'dbms.cluster.protocols',
        description: 'Overview of installed protocols',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.cluster.protocols() :: (orientation :: STRING, remoteAddress :: STRING, applicationProtocol :: STRING, applicationProtocolVersion :: INTEGER, modifierProtocols :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'Direction of the protocol (inbound or outbound).',
            name: 'orientation',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The socket address this protocol is available on.',
            name: 'remoteAddress',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the protocol.',
            name: 'applicationProtocol',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The version of the protocol.',
            name: 'applicationProtocolVersion',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'Installed modifier protocols, for example, compression.',
            name: 'modifierProtocols',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.cluster.readReplicaToggle': {
        name: 'dbms.cluster.readReplicaToggle',
        description:
          'The toggle can pause or resume read replica (deprecated in favor of dbms.cluster.secondaryReplicationDisable)',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.cluster.readReplicaToggle(databaseName :: STRING, pause :: BOOLEAN) :: (state :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The name of the database to toggle the secondary replication process for.',
            name: 'databaseName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'Whether or not to enable/disable the secondary replication process.',
            name: 'pause',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'The current state of the secondary replication process.',
            name: 'state',
            type: 'STRING',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy: 'dbms.cluster.secondaryReplicationDisable',
        option: {
          deprecated: true,
        },
      },
      'dbms.cluster.reallocateDatabase': {
        name: 'dbms.cluster.reallocateDatabase',
        description: 'Reallocate a specific database.',
        mode: 'WRITE',
        worksOnSystem: true,
        signature:
          'dbms.cluster.reallocateDatabase(database :: STRING, dryrun = false :: BOOLEAN) :: (database :: STRING, fromServerName :: STRING, fromServerId :: STRING, toServerName :: STRING, toServerId :: STRING, mode :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the database to reallocate.',
            name: 'database',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=false, type=BOOLEAN}',
            description: 'Set to `true` to dry run the procedure.',
            name: 'dryrun',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the database.',
            name: 'database',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the server.',
            name: 'fromServerName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The id of the server.',
            name: 'fromServerId',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the server.',
            name: 'toServerName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The id of the server.',
            name: 'toServerId',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The mode in which the database is hosted.',
            name: 'mode',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.cluster.reallocateNumberOfDatabases': {
        name: 'dbms.cluster.reallocateNumberOfDatabases',
        description: 'Reallocate a specified number of user databases.',
        mode: 'WRITE',
        worksOnSystem: true,
        signature:
          'dbms.cluster.reallocateNumberOfDatabases(number :: INTEGER, dryrun = false :: BOOLEAN) :: (database :: STRING, fromServerName :: STRING, fromServerId :: STRING, toServerName :: STRING, toServerId :: STRING, mode :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The number of databases to reallocate.',
            name: 'number',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=false, type=BOOLEAN}',
            description: 'Set to `true` to dry run the procedure.',
            name: 'dryrun',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the database.',
            name: 'database',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the server.',
            name: 'fromServerName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The id of the server.',
            name: 'fromServerId',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the server.',
            name: 'toServerName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The id of the server.',
            name: 'toServerId',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The mode in which the database is hosted.',
            name: 'mode',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.cluster.recreateDatabase': {
        name: 'dbms.cluster.recreateDatabase',
        description:
          'Recreates a database while keeping all RBAC settings. The procedure initiates a process, which when complete, will have synchronized and started all database instances within the cluster.',
        mode: 'WRITE',
        worksOnSystem: true,
        signature:
          'dbms.cluster.recreateDatabase(database :: STRING, options = {} :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'database :: STRING',
            name: 'database',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'options = {} :: MAP',
            name: 'options',
            type: 'MAP',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.cluster.routing.getRoutingTable': {
        name: 'dbms.cluster.routing.getRoutingTable',
        description:
          "Returns the advertised bolt capable endpoints for a given database, divided by each endpoint's capabilities. For example, an endpoint may serve read queries, write queries, and/or future `getRoutingTable` requests.",
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.cluster.routing.getRoutingTable(context :: MAP, database = null :: STRING) :: (ttl :: INTEGER, servers :: LIST<MAP>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'Routing context, for example, routing policies.',
            name: 'context',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=STRING}',
            description: 'The database to get a routing table for.',
            name: 'database',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'Time to live (in seconds) for the routing table.',
            name: 'ttl',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'Servers grouped by whether they are readers, writers, or routers.',
            name: 'servers',
            type: 'LIST<MAP>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy: 'dbms.routing.getRoutingTable',
        option: {
          deprecated: true,
        },
      },
      'dbms.cluster.secondaryReplicationDisable': {
        name: 'dbms.cluster.secondaryReplicationDisable',
        description:
          'The toggle can pause or resume the secondary replication process.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.cluster.secondaryReplicationDisable(databaseName :: STRING, pause :: BOOLEAN) :: (state :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The name of the database to toggle the secondary replication process for.',
            name: 'databaseName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'Whether or not to enable/disable the secondary replication process.',
            name: 'pause',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'The current state of the secondary replication process.',
            name: 'state',
            type: 'STRING',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.cluster.setAutomaticallyEnableFreeServers': {
        name: 'dbms.cluster.setAutomaticallyEnableFreeServers',
        description:
          'With this method you can set whether free servers are automatically enabled.',
        mode: 'WRITE',
        worksOnSystem: true,
        signature:
          'dbms.cluster.setAutomaticallyEnableFreeServers(autoEnable :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'Whether or not to automatically enable free servers.',
            name: 'autoEnable',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.cluster.showParallelDiscoveryState': {
        name: 'dbms.cluster.showParallelDiscoveryState',
        description:
          'Compare the states of Discovery service V1 and Discovery service V2.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.cluster.showParallelDiscoveryState() :: (mode :: STRING, stateComparison :: STRING, v1ServerCount :: STRING, v2ServerCount :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'mode :: STRING',
            name: 'mode',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'stateComparison :: STRING',
            name: 'stateComparison',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'v1ServerCount :: STRING',
            name: 'v1ServerCount',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'v2ServerCount :: STRING',
            name: 'v2ServerCount',
            type: 'STRING',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.cluster.statusCheck': {
        name: 'dbms.cluster.statusCheck',
        description: 'Performs a rafted status check.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.cluster.statusCheck(databases :: LIST<STRING>, timeoutMilliseconds = null :: INTEGER) :: (database :: STRING, serverId :: STRING, serverName :: STRING, address :: STRING, replicationSuccessful :: BOOLEAN, memberStatus :: STRING, recognisedLeader :: STRING, recognisedLeaderTerm :: INTEGER, requester :: BOOLEAN, error :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'databases :: LIST<STRING>',
            name: 'databases',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=INTEGER}',
            description: 'timeoutMilliseconds = null :: INTEGER',
            name: 'timeoutMilliseconds',
            type: 'INTEGER',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'database :: STRING',
            name: 'database',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'serverId :: STRING',
            name: 'serverId',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'serverName :: STRING',
            name: 'serverName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'address :: STRING',
            name: 'address',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'replicationSuccessful :: BOOLEAN',
            name: 'replicationSuccessful',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'memberStatus :: STRING',
            name: 'memberStatus',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'recognisedLeader :: STRING',
            name: 'recognisedLeader',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'recognisedLeaderTerm :: INTEGER',
            name: 'recognisedLeaderTerm',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'requester :: BOOLEAN',
            name: 'requester',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'error :: STRING',
            name: 'error',
            type: 'STRING',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.cluster.switchDiscoveryServiceVersion': {
        name: 'dbms.cluster.switchDiscoveryServiceVersion',
        description:
          'Allows you to select which discovery service should be started.\nPossible values are:\n\n* `V1_ONLY` -- it runs only discovery service v1.\n* `V1_OVER_V2` -- it runs both Discovery Service V1 and Discovery Service V2, where V1 is the main service and V2 runs in the background.\n* `V2_OVER_V1` -- it runs both Discovery Service V1 and Discovery Service V2, where V2 is the main service and V1 runs in the background.\n* `V2_ONLY` -- it runs only discovery service v2.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature: 'dbms.cluster.switchDiscoveryServiceVersion(mode :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'mode :: STRING',
            name: 'mode',
            type: 'STRING',
          },
        ],
        returnDescription: [],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.components': {
        name: 'dbms.components',
        description: 'List DBMS components and their versions.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.components() :: (name :: STRING, versions :: LIST<STRING>, edition :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the component.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The installed versions of the component.',
            name: 'versions',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The Neo4j edition of the DBMS.',
            name: 'edition',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.info': {
        name: 'dbms.info',
        description: 'Provides information regarding the DBMS.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.info() :: (id :: STRING, name :: STRING, creationDate :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The id of the DBMS.',
            name: 'id',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the DBMS.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The creation date of the DBMS.',
            name: 'creationDate',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.killConnection': {
        name: 'dbms.killConnection',
        description: 'Kill network connection with the given connection id.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.killConnection(id :: STRING) :: (connectionId :: STRING, username :: STRING, message :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The id of the connection to kill.',
            name: 'id',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The id of the connection killed.',
            name: 'connectionId',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The username of the user of the killed connection.',
            name: 'username',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Details about the outcome of the procedure.',
            name: 'message',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.killConnections': {
        name: 'dbms.killConnections',
        description:
          'Kill all network connections with the given connection ids.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.killConnections(ids :: LIST<STRING>) :: (connectionId :: STRING, username :: STRING, message :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The ids of the connections to kill.',
            name: 'ids',
            type: 'LIST<STRING>',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The id of the connection killed.',
            name: 'connectionId',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The username of the user of the killed connection.',
            name: 'username',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Details about the outcome of the procedure.',
            name: 'message',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.listActiveLocks': {
        name: 'dbms.listActiveLocks',
        description:
          'List the active lock requests granted for the transaction executing the query with the given query id.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.listActiveLocks(queryId :: STRING) :: (mode :: STRING, resourceType :: STRING, resourceId :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The id of the query to check for active locks on.',
            name: 'queryId',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: "The lock type: ('SHARED', 'EXCLUSIVE').",
            name: 'mode',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The locked resource.',
            name: 'resourceType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The id of the locked resource.',
            name: 'resourceId',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.listCapabilities': {
        name: 'dbms.listCapabilities',
        description: 'List capabilities.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.listCapabilities() :: (name :: STRING, description :: STRING, value :: ANY)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description:
              'The full name of the capability (e.g. "dbms.instance.version").',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The capability description (e.g. "Neo4j version this instance is running").',
            name: 'description',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The capability object if it is present in the system (e.g. "5.20.0").',
            name: 'value',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.listConfig': {
        name: 'dbms.listConfig',
        description:
          'List the currently active configuration settings of Neo4j.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.listConfig(searchString =  :: STRING) :: (name :: STRING, description :: STRING, value :: STRING, dynamic :: BOOLEAN, defaultValue :: STRING, startupValue :: STRING, explicitlySet :: BOOLEAN, validValues :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description:
              'A string that filters on the name of config settings.',
            name: 'searchString',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the setting.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The description of the setting.',
            name: 'description',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The set value of the setting.',
            name: 'value',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'If the setting can be set dynamically or not.',
            name: 'dynamic',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'The default value of the setting.',
            name: 'defaultValue',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The value of the setting when the database started.',
            name: 'startupValue',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the setting was explicitly set.',
            name: 'explicitlySet',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'A description of the valid values.',
            name: 'validValues',
            type: 'STRING',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.listConnections': {
        name: 'dbms.listConnections',
        description:
          'List all accepted network connections at this instance that are visible to the user.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.listConnections() :: (connectionId :: STRING, connectTime :: STRING, connector :: STRING, username :: STRING, userAgent :: STRING, serverAddress :: STRING, clientAddress :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The id of the connection.',
            name: 'connectionId',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'The time the connection was established, formatted according to the ISO-8601 Standard.',
            name: 'connectTime',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The protocol of the connector.',
            name: 'connector',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The username of the connected user.',
            name: 'username',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The active agent.',
            name: 'userAgent',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The address of the connected server.',
            name: 'serverAddress',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The address of the connected client.',
            name: 'clientAddress',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.listPools': {
        name: 'dbms.listPools',
        description:
          'List all memory pools, including sub pools, currently registered at this instance that are visible to the user.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.listPools() :: (pool :: STRING, databaseName :: STRING, heapMemoryUsed :: STRING, heapMemoryUsedBytes :: STRING, nativeMemoryUsed :: STRING, nativeMemoryUsedBytes :: STRING, freeMemory :: STRING, freeMemoryBytes :: STRING, totalPoolMemory :: STRING, totalPoolMemoryBytes :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the memory pool.',
            name: 'pool',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the database.',
            name: 'databaseName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The amount of heap memory used.',
            name: 'heapMemoryUsed',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The amount of heap memory used in bytes.',
            name: 'heapMemoryUsedBytes',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The amount of native memory used.',
            name: 'nativeMemoryUsed',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The amount of native memory used in bytes.',
            name: 'nativeMemoryUsedBytes',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The amount of free memory.',
            name: 'freeMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The amount of free memory in bytes.',
            name: 'freeMemoryBytes',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The total pool memory.',
            name: 'totalPoolMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The total pool memory in bytes.',
            name: 'totalPoolMemoryBytes',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.quarantineDatabase': {
        name: 'dbms.quarantineDatabase',
        description: 'Place a database into quarantine or remove it from it.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.quarantineDatabase(databaseName :: STRING, setStatus :: BOOLEAN, reason = No reason given :: STRING) :: (databaseName :: STRING, quarantined :: BOOLEAN, result :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              'The name of the database to set the quarantine status of.',
            name: 'databaseName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Whether or not to quarantine the database.',
            name: 'setStatus',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=No reason given, type=STRING}',
            description: 'The reason to quarantine the database.',
            name: 'reason',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the database.',
            name: 'databaseName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Whether or not the database is quarantined.',
            name: 'quarantined',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'Details about the outcome of the procedure.',
            name: 'result',
            type: 'STRING',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.queryJmx': {
        name: 'dbms.queryJmx',
        description:
          'Query JMX management data by domain and name. For instance, use `*:*` to find all JMX beans.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.queryJmx(query :: STRING) :: (name :: STRING, description :: STRING, attributes :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description:
              "A query for MBeans on this MBeanServer (e.g. '*:*,name=*neo4j*' for all metrics in neo4j database).",
            name: 'query',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the metric.',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The description of the metric.',
            name: 'description',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description:
              'A collection with the attributes (values) of that metric.',
            name: 'attributes',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.routing.getRoutingTable': {
        name: 'dbms.routing.getRoutingTable',
        description:
          "Returns the advertised bolt capable endpoints for a given database, divided by each endpoint's capabilities. For example, an endpoint may serve read queries, write queries, and/or future `getRoutingTable` requests.",
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.routing.getRoutingTable(context :: MAP, database = null :: STRING) :: (ttl :: INTEGER, servers :: LIST<MAP>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'Routing context, for example, routing policies.',
            name: 'context',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=null, type=STRING}',
            description: 'The database to get a routing table for.',
            name: 'database',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'Time to live (in seconds) for the routing table.',
            name: 'ttl',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description:
              'Servers grouped by whether they are readers, writers, or routers.',
            name: 'servers',
            type: 'LIST<MAP>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.scheduler.failedJobs': {
        name: 'dbms.scheduler.failedJobs',
        description:
          'List failed job runs. There is a limit for amount of historical data.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.scheduler.failedJobs() :: (jobId :: STRING, group :: STRING, database :: STRING, submitter :: STRING, description :: STRING, type :: STRING, submitted :: STRING, executionStart :: STRING, failureTime :: STRING, failureDescription :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The id of the failed job.',
            name: 'jobId',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The category of the failed job.',
            name: 'group',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the database the job failed in.',
            name: 'database',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The creator of the failed job.',
            name: 'submitter',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Information about the failed job.',
            name: 'description',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The interval of the failed job.',
            name: 'type',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The submission time of the failed job.',
            name: 'submitted',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The start time of the failed job.',
            name: 'executionStart',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The failure time of the failed job.',
            name: 'failureTime',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Information about the job failure.',
            name: 'failureDescription',
            type: 'STRING',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.scheduler.groups': {
        name: 'dbms.scheduler.groups',
        description:
          'List the job groups that are active in the database internal job scheduler.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.scheduler.groups() :: (group :: STRING, threads :: INTEGER)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the job group.',
            name: 'group',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The number of active threads in that job group.',
            name: 'threads',
            type: 'INTEGER',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.scheduler.jobs': {
        name: 'dbms.scheduler.jobs',
        description:
          'List all jobs that are active in the database internal job scheduler.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.scheduler.jobs() :: (jobId :: STRING, group :: STRING, submitted :: STRING, database :: STRING, submitter :: STRING, description :: STRING, type :: STRING, scheduledAt :: STRING, period :: STRING, state :: STRING, currentStateDescription :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The id of the job.',
            name: 'jobId',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The category of the job.',
            name: 'group',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The submission time of the job.',
            name: 'submitted',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The name of the database the job is in.',
            name: 'database',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The creator of the job.',
            name: 'submitter',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Information about the job.',
            name: 'description',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The interval of the job.',
            name: 'type',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The start time of the job.',
            name: 'scheduledAt',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The interval for jobs run periodically.',
            name: 'period',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: "The state of the job: ('EXECUTING', 'SCHEDULED').",
            name: 'state',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'A description of the job state.',
            name: 'currentStateDescription',
            type: 'STRING',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.security.clearAuthCache': {
        name: 'dbms.security.clearAuthCache',
        description: 'Clears authentication and authorization cache.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature: 'dbms.security.clearAuthCache()',
        argumentDescription: [],
        returnDescription: [],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.setConfigValue': {
        name: 'dbms.setConfigValue',
        description:
          'Update a given setting value. Passing an empty value results in removing the configured value and falling back to the default value. Changes do not persist and are lost if the server is restarted. In a clustered environment, `dbms.setConfigValue` affects only the cluster member it is run against.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature: 'dbms.setConfigValue(setting :: STRING, value :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the setting.',
            name: 'setting',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The value to set.',
            name: 'value',
            type: 'STRING',
          },
        ],
        returnDescription: [],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.setDatabaseAllocator': {
        name: 'dbms.setDatabaseAllocator',
        description:
          'With this method you can set the allocator that is responsible for selecting servers for hosting databases.',
        mode: 'WRITE',
        worksOnSystem: true,
        signature: 'dbms.setDatabaseAllocator(allocator :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the allocator.',
            name: 'allocator',
            type: 'STRING',
          },
        ],
        returnDescription: [],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy: 'Functionality is removed',
        option: {
          deprecated: true,
        },
      },
      'dbms.setDefaultAllocationNumbers': {
        name: 'dbms.setDefaultAllocationNumbers',
        description:
          'With this method you can set the default number of primaries and secondaries.',
        mode: 'WRITE',
        worksOnSystem: true,
        signature:
          'dbms.setDefaultAllocationNumbers(primaries :: INTEGER, secondaries :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The default number of primaries.',
            name: 'primaries',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The default number of secondaries.',
            name: 'secondaries',
            type: 'INTEGER',
          },
        ],
        returnDescription: [],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.setDefaultDatabase': {
        name: 'dbms.setDefaultDatabase',
        description:
          'Change the default database to the provided value. The database must exist and the old default database must be stopped.',
        mode: 'WRITE',
        worksOnSystem: true,
        signature:
          'dbms.setDefaultDatabase(databaseName :: STRING) :: (result :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'The name of the database.',
            name: 'databaseName',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'Information about the default database.',
            name: 'result',
            type: 'STRING',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.showCurrentUser': {
        name: 'dbms.showCurrentUser',
        description: 'Show the current user.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature:
          'dbms.showCurrentUser() :: (username :: STRING, roles :: LIST<STRING>, flags :: LIST<STRING>)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the current user.',
            name: 'username',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The roles assigned to the current user.',
            name: 'roles',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'The flags set on the current user.',
            name: 'flags',
            type: 'LIST<STRING>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'dbms.showTopologyGraphConfig': {
        name: 'dbms.showTopologyGraphConfig',
        description:
          'With this method the configuration of the Topology Graph can be displayed.',
        mode: 'READ',
        worksOnSystem: true,
        signature:
          'dbms.showTopologyGraphConfig() :: (allocator :: STRING, defaultPrimariesCount :: INTEGER, defaultSecondariesCount :: INTEGER, defaultDatabase :: STRING, autoEnableFreeServers :: BOOLEAN)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'The name of the allocator.',
            name: 'allocator',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'The default number of primaries.',
            name: 'defaultPrimariesCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The default number of secondaries.',
            name: 'defaultSecondariesCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'The name of the default database.',
            name: 'defaultDatabase',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'Whether or not to automatically enable free servers.',
            name: 'autoEnableFreeServers',
            type: 'BOOLEAN',
          },
        ],
        admin: true,
        rolesExecution: ['admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.allShortestPaths.delta.mutate': {
        name: 'gds.allShortestPaths.delta.mutate',
        description:
          'The Delta Stepping shortest path algorithm computes the shortest (weighted) path between one node and any other node in the graph. The computation is run multi-threaded',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.allShortestPaths.delta.mutate(graphName :: STRING, configuration = {} :: MAP) :: (relationshipsWritten :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.allShortestPaths.delta.mutate.estimate': {
        name: 'gds.allShortestPaths.delta.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.allShortestPaths.delta.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.allShortestPaths.delta.stats': {
        name: 'gds.allShortestPaths.delta.stats',
        description:
          'The Delta Stepping shortest path algorithm computes the shortest (weighted) path between one node and any other node in the graph. The computation is run multi-threaded',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.allShortestPaths.delta.stats(graphName :: STRING, configuration = {} :: MAP) :: (postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.allShortestPaths.delta.stats.estimate': {
        name: 'gds.allShortestPaths.delta.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.allShortestPaths.delta.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.allShortestPaths.delta.stream': {
        name: 'gds.allShortestPaths.delta.stream',
        description:
          'The Delta Stepping shortest path algorithm computes the shortest (weighted) path between one node and any other node in the graph. The computation is run multi-threaded',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.allShortestPaths.delta.stream(graphName :: STRING, configuration = {} :: MAP) :: (index :: INTEGER, sourceNode :: INTEGER, targetNode :: INTEGER, totalCost :: FLOAT, nodeIds :: LIST<INTEGER>, costs :: LIST<FLOAT>, path :: PATH)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'index :: INTEGER',
            name: 'index',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'sourceNode :: INTEGER',
            name: 'sourceNode',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'targetNode :: INTEGER',
            name: 'targetNode',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'totalCost :: FLOAT',
            name: 'totalCost',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'nodeIds :: LIST<INTEGER>',
            name: 'nodeIds',
            type: 'LIST<INTEGER>',
          },
          {
            isDeprecated: false,
            description: 'costs :: LIST<FLOAT>',
            name: 'costs',
            type: 'LIST<FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'path :: PATH',
            name: 'path',
            type: 'PATH',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.allShortestPaths.delta.stream.estimate': {
        name: 'gds.allShortestPaths.delta.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.allShortestPaths.delta.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.allShortestPaths.delta.write': {
        name: 'gds.allShortestPaths.delta.write',
        description:
          'The Delta Stepping shortest path algorithm computes the shortest (weighted) path between one node and any other node in the graph. The computation is run multi-threaded',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.allShortestPaths.delta.write(graphName :: STRING, configuration = {} :: MAP) :: (relationshipsWritten :: INTEGER, writeMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.allShortestPaths.delta.write.estimate': {
        name: 'gds.allShortestPaths.delta.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.allShortestPaths.delta.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.allShortestPaths.dijkstra.mutate': {
        name: 'gds.allShortestPaths.dijkstra.mutate',
        description:
          'The Dijkstra shortest path algorithm computes the shortest (weighted) path between one node and any other node in the graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.allShortestPaths.dijkstra.mutate(graphName :: STRING, configuration = {} :: MAP) :: (relationshipsWritten :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.allShortestPaths.dijkstra.mutate.estimate': {
        name: 'gds.allShortestPaths.dijkstra.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.allShortestPaths.dijkstra.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.allShortestPaths.dijkstra.stream': {
        name: 'gds.allShortestPaths.dijkstra.stream',
        description:
          'The Dijkstra shortest path algorithm computes the shortest (weighted) path between one node and any other node in the graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.allShortestPaths.dijkstra.stream(graphName :: STRING, configuration = {} :: MAP) :: (index :: INTEGER, sourceNode :: INTEGER, targetNode :: INTEGER, totalCost :: FLOAT, nodeIds :: LIST<INTEGER>, costs :: LIST<FLOAT>, path :: PATH)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'index :: INTEGER',
            name: 'index',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'sourceNode :: INTEGER',
            name: 'sourceNode',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'targetNode :: INTEGER',
            name: 'targetNode',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'totalCost :: FLOAT',
            name: 'totalCost',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'nodeIds :: LIST<INTEGER>',
            name: 'nodeIds',
            type: 'LIST<INTEGER>',
          },
          {
            isDeprecated: false,
            description: 'costs :: LIST<FLOAT>',
            name: 'costs',
            type: 'LIST<FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'path :: PATH',
            name: 'path',
            type: 'PATH',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.allShortestPaths.dijkstra.stream.estimate': {
        name: 'gds.allShortestPaths.dijkstra.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.allShortestPaths.dijkstra.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.allShortestPaths.dijkstra.write': {
        name: 'gds.allShortestPaths.dijkstra.write',
        description:
          'The Dijkstra shortest path algorithm computes the shortest (weighted) path between one node and any other node in the graph.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.allShortestPaths.dijkstra.write(graphName :: STRING, configuration = {} :: MAP) :: (relationshipsWritten :: INTEGER, writeMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.allShortestPaths.dijkstra.write.estimate': {
        name: 'gds.allShortestPaths.dijkstra.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.allShortestPaths.dijkstra.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.allShortestPaths.stream': {
        name: 'gds.allShortestPaths.stream',
        description:
          'The All Pairs Shortest Path (APSP) calculates the shortest (weighted) path between all pairs of nodes.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.allShortestPaths.stream(graphName :: STRING, configuration = {} :: MAP) :: (sourceNodeId :: INTEGER, targetNodeId :: INTEGER, distance :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'sourceNodeId :: INTEGER',
            name: 'sourceNodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'targetNodeId :: INTEGER',
            name: 'targetNodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'distance :: FLOAT',
            name: 'distance',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.alpha.ml.splitRelationships.mutate': {
        name: 'gds.alpha.ml.splitRelationships.mutate',
        description:
          'Splits a graph into holdout and remaining relationship types and adds them to the graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.alpha.ml.splitRelationships.mutate(graphName :: STRING, configuration = {} :: MAP) :: (preProcessingMillis :: INTEGER, computeMillis :: INTEGER, mutateMillis :: INTEGER, relationshipsWritten :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.alpha.pipeline.linkPrediction.addMLP': {
        name: 'gds.alpha.pipeline.linkPrediction.addMLP',
        description:
          'Add a multilayer perceptron configuration to the parameter space of the link prediction train pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.alpha.pipeline.linkPrediction.addMLP(pipelineName :: STRING, config = {} :: MAP) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureSteps :: LIST<MAP>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'config = {} :: MAP',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureSteps :: LIST<MAP>',
            name: 'featureSteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: ANY',
            name: 'parameterSpace',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.alpha.pipeline.linkPrediction.configureAutoTuning': {
        name: 'gds.alpha.pipeline.linkPrediction.configureAutoTuning',
        description:
          'Configures the auto-tuning of the link prediction pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.alpha.pipeline.linkPrediction.configureAutoTuning(pipelineName :: STRING, configuration :: MAP) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureSteps :: LIST<MAP>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureSteps :: LIST<MAP>',
            name: 'featureSteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: ANY',
            name: 'parameterSpace',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.alpha.pipeline.nodeClassification.addMLP': {
        name: 'gds.alpha.pipeline.nodeClassification.addMLP',
        description:
          'Add a multilayer perceptron configuration to the parameter space of the node classification train pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.alpha.pipeline.nodeClassification.addMLP(pipelineName :: STRING, config = {} :: MAP) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureProperties :: LIST<STRING>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'config = {} :: MAP',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureProperties :: LIST<STRING>',
            name: 'featureProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: MAP',
            name: 'parameterSpace',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.alpha.pipeline.nodeClassification.configureAutoTuning': {
        name: 'gds.alpha.pipeline.nodeClassification.configureAutoTuning',
        description:
          'Configures the auto-tuning of the node classification pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.alpha.pipeline.nodeClassification.configureAutoTuning(pipelineName :: STRING, configuration :: MAP) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureProperties :: LIST<STRING>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureProperties :: LIST<STRING>',
            name: 'featureProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: MAP',
            name: 'parameterSpace',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.alpha.pipeline.nodeRegression.addLinearRegression': {
        name: 'gds.alpha.pipeline.nodeRegression.addLinearRegression',
        description:
          'Add a linear regression model candidate to a node regression pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.alpha.pipeline.nodeRegression.addLinearRegression(pipelineName :: STRING, configuration = {} :: MAP) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureProperties :: LIST<STRING>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureProperties :: LIST<STRING>',
            name: 'featureProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: MAP',
            name: 'parameterSpace',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.alpha.pipeline.nodeRegression.addNodeProperty': {
        name: 'gds.alpha.pipeline.nodeRegression.addNodeProperty',
        description:
          'Add a node property step to an existing node regression training pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.alpha.pipeline.nodeRegression.addNodeProperty(pipelineName :: STRING, procedureName :: STRING, procedureConfiguration :: MAP) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureProperties :: LIST<STRING>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'procedureName :: STRING',
            name: 'procedureName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'procedureConfiguration :: MAP',
            name: 'procedureConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureProperties :: LIST<STRING>',
            name: 'featureProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: MAP',
            name: 'parameterSpace',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.alpha.pipeline.nodeRegression.addRandomForest': {
        name: 'gds.alpha.pipeline.nodeRegression.addRandomForest',
        description:
          'Add a random forest model candidate to a node regression pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.alpha.pipeline.nodeRegression.addRandomForest(pipelineName :: STRING, configuration :: MAP) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureProperties :: LIST<STRING>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureProperties :: LIST<STRING>',
            name: 'featureProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: MAP',
            name: 'parameterSpace',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.alpha.pipeline.nodeRegression.configureAutoTuning': {
        name: 'gds.alpha.pipeline.nodeRegression.configureAutoTuning',
        description:
          'Configures the auto-tuning of a node regression pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.alpha.pipeline.nodeRegression.configureAutoTuning(pipelineName :: STRING, configuration :: MAP) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureProperties :: LIST<STRING>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureProperties :: LIST<STRING>',
            name: 'featureProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: MAP',
            name: 'parameterSpace',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.alpha.pipeline.nodeRegression.configureSplit': {
        name: 'gds.alpha.pipeline.nodeRegression.configureSplit',
        description:
          'Configures the graph splitting of a node regression pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.alpha.pipeline.nodeRegression.configureSplit(pipelineName :: STRING, configuration :: MAP) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureProperties :: LIST<STRING>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureProperties :: LIST<STRING>',
            name: 'featureProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: MAP',
            name: 'parameterSpace',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.alpha.pipeline.nodeRegression.create': {
        name: 'gds.alpha.pipeline.nodeRegression.create',
        description:
          'Creates a node regression training pipeline in the pipeline catalog.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.alpha.pipeline.nodeRegression.create(pipelineName :: STRING) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureProperties :: LIST<STRING>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureProperties :: LIST<STRING>',
            name: 'featureProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: MAP',
            name: 'parameterSpace',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.alpha.pipeline.nodeRegression.predict.mutate': {
        name: 'gds.alpha.pipeline.nodeRegression.predict.mutate',
        description:
          'Predicts target node property using a previously trained `NodeRegression` model',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.alpha.pipeline.nodeRegression.predict.mutate(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.alpha.pipeline.nodeRegression.predict.stream': {
        name: 'gds.alpha.pipeline.nodeRegression.predict.stream',
        description:
          'Predicts target node property using a previously trained `NodeRegression` model',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.alpha.pipeline.nodeRegression.predict.stream(graphName :: STRING, configuration :: MAP) :: (nodeId :: INTEGER, predictedValue :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'predictedValue :: FLOAT',
            name: 'predictedValue',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.alpha.pipeline.nodeRegression.selectFeatures': {
        name: 'gds.alpha.pipeline.nodeRegression.selectFeatures',
        description:
          'Add one or several features to an existing node regression training pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.alpha.pipeline.nodeRegression.selectFeatures(pipelineName :: STRING, featureProperties :: ANY) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureProperties :: LIST<STRING>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'featureProperties :: ANY',
            name: 'featureProperties',
            type: 'ANY',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureProperties :: LIST<STRING>',
            name: 'featureProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: MAP',
            name: 'parameterSpace',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.alpha.pipeline.nodeRegression.train': {
        name: 'gds.alpha.pipeline.nodeRegression.train',
        description: 'Trains a node classification model based on a pipeline',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.alpha.pipeline.nodeRegression.train(graphName :: STRING, configuration = {} :: MAP) :: (modelSelectionStats :: MAP, trainMillis :: INTEGER, modelInfo :: MAP, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'modelSelectionStats :: MAP',
            name: 'modelSelectionStats',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'trainMillis :: INTEGER',
            name: 'trainMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'modelInfo :: MAP',
            name: 'modelInfo',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.articleRank.mutate': {
        name: 'gds.articleRank.mutate',
        description:
          'Article Rank is a variant of the Page Rank algorithm, which measures the transitive influence or connectivity of nodes.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.articleRank.mutate(graphName :: STRING, configuration = {} :: MAP) :: (mutateMillis :: INTEGER, nodePropertiesWritten :: INTEGER, ranIterations :: INTEGER, didConverge :: BOOLEAN, centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.articleRank.mutate.estimate': {
        name: 'gds.articleRank.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.articleRank.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.articleRank.stats': {
        name: 'gds.articleRank.stats',
        description:
          'Article Rank is a variant of the Page Rank algorithm, which measures the transitive influence or connectivity of nodes.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.articleRank.stats(graphName :: STRING, configuration = {} :: MAP) :: (ranIterations :: INTEGER, didConverge :: BOOLEAN, centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.articleRank.stats.estimate': {
        name: 'gds.articleRank.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.articleRank.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.articleRank.stream': {
        name: 'gds.articleRank.stream',
        description:
          'Article Rank is a variant of the Page Rank algorithm, which measures the transitive influence or connectivity of nodes.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.articleRank.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, score :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'score :: FLOAT',
            name: 'score',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.articleRank.stream.estimate': {
        name: 'gds.articleRank.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.articleRank.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.articleRank.write': {
        name: 'gds.articleRank.write',
        description:
          'Article Rank is a variant of the Page Rank algorithm, which measures the transitive influence or connectivity of nodes.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.articleRank.write(graphName :: STRING, configuration = {} :: MAP) :: (writeMillis :: INTEGER, nodePropertiesWritten :: INTEGER, ranIterations :: INTEGER, didConverge :: BOOLEAN, centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.articleRank.write.estimate': {
        name: 'gds.articleRank.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.articleRank.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.articulationPoints.mutate': {
        name: 'gds.articulationPoints.mutate',
        description:
          'Algorithm that finds nodes that disconnect components if removed',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.articulationPoints.mutate(graphName :: STRING, configuration = {} :: MAP) :: (articulationPointCount :: INTEGER, nodePropertiesWritten :: INTEGER, mutateMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'articulationPointCount :: INTEGER',
            name: 'articulationPointCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.articulationPoints.mutate.estimate': {
        name: 'gds.articulationPoints.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.articulationPoints.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.articulationPoints.stats': {
        name: 'gds.articulationPoints.stats',
        description:
          'Algorithm that finds nodes that disconnect components if removed',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.articulationPoints.stats(graphName :: STRING, configuration = {} :: MAP) :: (articulationPointCount :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'articulationPointCount :: INTEGER',
            name: 'articulationPointCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.articulationPoints.stats.estimate': {
        name: 'gds.articulationPoints.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.articulationPoints.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.articulationPoints.stream': {
        name: 'gds.articulationPoints.stream',
        description:
          'Algorithm that finds nodes that disconnect components if removed',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.articulationPoints.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.articulationPoints.stream.estimate': {
        name: 'gds.articulationPoints.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.articulationPoints.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.articulationPoints.write': {
        name: 'gds.articulationPoints.write',
        description:
          'Algorithm that finds nodes that disconnect components if removed',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.articulationPoints.write(graphName :: STRING, configuration = {} :: MAP) :: (articulationPointCount :: INTEGER, nodePropertiesWritten :: INTEGER, writeMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'articulationPointCount :: INTEGER',
            name: 'articulationPointCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.articulationPoints.write.estimate': {
        name: 'gds.articulationPoints.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.articulationPoints.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.backup': {
        name: 'gds.backup',
        description: 'The back-up procedure persists graphs and models to disk',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.backup(configuration = {} :: MAP) :: (graphName :: STRING, modelName :: STRING, backupTime :: ZONED DATETIME, exportPath :: STRING, exportMillis :: INTEGER, status :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'modelName :: STRING',
            name: 'modelName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'backupTime :: ZONED DATETIME',
            name: 'backupTime',
            type: 'ZONED DATETIME',
          },
          {
            isDeprecated: false,
            description: 'exportPath :: STRING',
            name: 'exportPath',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'exportMillis :: INTEGER',
            name: 'exportMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'status :: STRING',
            name: 'status',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.bellmanFord.mutate': {
        name: 'gds.bellmanFord.mutate',
        description:
          'The Bellman-Ford shortest path algorithm computes the shortest (weighted) path between one node and any other node in the graph without negative cycles.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.bellmanFord.mutate(graphName :: STRING, configuration = {} :: MAP) :: (containsNegativeCycle :: BOOLEAN, relationshipsWritten :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'containsNegativeCycle :: BOOLEAN',
            name: 'containsNegativeCycle',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.bellmanFord.mutate.estimate': {
        name: 'gds.bellmanFord.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.bellmanFord.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.bellmanFord.stats': {
        name: 'gds.bellmanFord.stats',
        description:
          'The Bellman-Ford shortest path algorithm computes the shortest (weighted) path between one node and any other node in the graph without negative cycles.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.bellmanFord.stats(graphName :: STRING, configuration = {} :: MAP) :: (containsNegativeCycle :: BOOLEAN, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'containsNegativeCycle :: BOOLEAN',
            name: 'containsNegativeCycle',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.bellmanFord.stats.estimate': {
        name: 'gds.bellmanFord.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.bellmanFord.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.bellmanFord.stream': {
        name: 'gds.bellmanFord.stream',
        description:
          'The Bellman-Ford shortest path algorithm computes the shortest (weighted) path between one node and any other node in the graph without negative cycles.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.bellmanFord.stream(graphName :: STRING, configuration = {} :: MAP) :: (index :: INTEGER, sourceNode :: INTEGER, targetNode :: INTEGER, totalCost :: FLOAT, nodeIds :: LIST<INTEGER>, costs :: LIST<FLOAT>, route :: PATH, isNegativeCycle :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'index :: INTEGER',
            name: 'index',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'sourceNode :: INTEGER',
            name: 'sourceNode',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'targetNode :: INTEGER',
            name: 'targetNode',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'totalCost :: FLOAT',
            name: 'totalCost',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'nodeIds :: LIST<INTEGER>',
            name: 'nodeIds',
            type: 'LIST<INTEGER>',
          },
          {
            isDeprecated: false,
            description: 'costs :: LIST<FLOAT>',
            name: 'costs',
            type: 'LIST<FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'route :: PATH',
            name: 'route',
            type: 'PATH',
          },
          {
            isDeprecated: false,
            description: 'isNegativeCycle :: BOOLEAN',
            name: 'isNegativeCycle',
            type: 'BOOLEAN',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.bellmanFord.stream.estimate': {
        name: 'gds.bellmanFord.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.bellmanFord.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.bellmanFord.write': {
        name: 'gds.bellmanFord.write',
        description:
          'The Bellman-Ford shortest path algorithm computes the shortest (weighted) path between one node and any other node in the graph without negative cycles.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.bellmanFord.write(graphName :: STRING, configuration = {} :: MAP) :: (relationshipsWritten :: INTEGER, containsNegativeCycle :: BOOLEAN, writeMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'containsNegativeCycle :: BOOLEAN',
            name: 'containsNegativeCycle',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.bellmanFord.write.estimate': {
        name: 'gds.bellmanFord.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.bellmanFord.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.graphSage.mutate': {
        name: 'gds.beta.graphSage.mutate',
        description:
          'The GraphSage algorithm inductively computes embeddings for nodes based on a their features and neighborhoods.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.graphSage.mutate(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, mutateMillis :: INTEGER, nodeCount :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.graphSage.mutate.estimate': {
        name: 'gds.beta.graphSage.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.graphSage.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.graphSage.stream': {
        name: 'gds.beta.graphSage.stream',
        description:
          'The GraphSage algorithm inductively computes embeddings for nodes based on a their features and neighborhoods.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.graphSage.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, embedding :: LIST<FLOAT>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'embedding :: LIST<FLOAT>',
            name: 'embedding',
            type: 'LIST<FLOAT>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.graphSage.stream.estimate': {
        name: 'gds.beta.graphSage.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.graphSage.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.graphSage.train': {
        name: 'gds.beta.graphSage.train',
        description:
          'The GraphSage algorithm inductively computes embeddings for nodes based on a their features and neighborhoods.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.graphSage.train(graphName :: STRING, configuration = {} :: MAP) :: (modelInfo :: MAP, configuration :: MAP, trainMillis :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'modelInfo :: MAP',
            name: 'modelInfo',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'trainMillis :: INTEGER',
            name: 'trainMillis',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.graphSage.train.estimate': {
        name: 'gds.beta.graphSage.train.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.graphSage.train.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.graphSage.write': {
        name: 'gds.beta.graphSage.write',
        description:
          'The GraphSage algorithm inductively computes embeddings for nodes based on a their features and neighborhoods.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.beta.graphSage.write(graphName :: STRING, configuration = {} :: MAP) :: (nodeCount :: INTEGER, nodePropertiesWritten :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, writeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.graphSage.write.estimate': {
        name: 'gds.beta.graphSage.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.graphSage.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.linkPrediction.addFeature': {
        name: 'gds.beta.pipeline.linkPrediction.addFeature',
        description:
          'Add a feature step to an existing link prediction pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.linkPrediction.addFeature(pipelineName :: STRING, featureType :: STRING, configuration :: MAP) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureSteps :: LIST<MAP>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'featureType :: STRING',
            name: 'featureType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureSteps :: LIST<MAP>',
            name: 'featureSteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: ANY',
            name: 'parameterSpace',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.linkPrediction.addLogisticRegression': {
        name: 'gds.beta.pipeline.linkPrediction.addLogisticRegression',
        description:
          'Add a logistic regression configuration to the parameter space of the link prediction train pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.linkPrediction.addLogisticRegression(pipelineName :: STRING, config = {} :: MAP) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureSteps :: LIST<MAP>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'config = {} :: MAP',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureSteps :: LIST<MAP>',
            name: 'featureSteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: ANY',
            name: 'parameterSpace',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.linkPrediction.addNodeProperty': {
        name: 'gds.beta.pipeline.linkPrediction.addNodeProperty',
        description:
          'Add a node property step to an existing link prediction pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.linkPrediction.addNodeProperty(pipelineName :: STRING, procedureName :: STRING, procedureConfiguration :: MAP) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureSteps :: LIST<MAP>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'procedureName :: STRING',
            name: 'procedureName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'procedureConfiguration :: MAP',
            name: 'procedureConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureSteps :: LIST<MAP>',
            name: 'featureSteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: ANY',
            name: 'parameterSpace',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.linkPrediction.addRandomForest': {
        name: 'gds.beta.pipeline.linkPrediction.addRandomForest',
        description:
          'Add a random forest configuration to the parameter space of the link prediction train pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.linkPrediction.addRandomForest(pipelineName :: STRING, config :: MAP) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureSteps :: LIST<MAP>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'config :: MAP',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureSteps :: LIST<MAP>',
            name: 'featureSteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: ANY',
            name: 'parameterSpace',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.linkPrediction.configureSplit': {
        name: 'gds.beta.pipeline.linkPrediction.configureSplit',
        description: 'Configures the split of the link prediction pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.linkPrediction.configureSplit(pipelineName :: STRING, configuration :: MAP) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureSteps :: LIST<MAP>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureSteps :: LIST<MAP>',
            name: 'featureSteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: ANY',
            name: 'parameterSpace',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.linkPrediction.create': {
        name: 'gds.beta.pipeline.linkPrediction.create',
        description:
          'Creates a link prediction pipeline in the pipeline catalog.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.linkPrediction.create(pipelineName :: STRING) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureSteps :: LIST<MAP>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureSteps :: LIST<MAP>',
            name: 'featureSteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: ANY',
            name: 'parameterSpace',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.linkPrediction.predict.mutate': {
        name: 'gds.beta.pipeline.linkPrediction.predict.mutate',
        description:
          'Predicts relationships for all non-connected node pairs based on a previously trained LinkPrediction model.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.linkPrediction.predict.mutate(graphName :: STRING, configuration = {} :: MAP) :: (relationshipsWritten :: INTEGER, probabilityDistribution :: MAP, samplingStats :: MAP, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'probabilityDistribution :: MAP',
            name: 'probabilityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'samplingStats :: MAP',
            name: 'samplingStats',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.linkPrediction.predict.mutate.estimate': {
        name: 'gds.beta.pipeline.linkPrediction.predict.mutate.estimate',
        description:
          'Estimates memory for predicting relationships for all non-connected node pairs based on a previously trained LinkPrediction model',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.linkPrediction.predict.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.linkPrediction.predict.stream': {
        name: 'gds.beta.pipeline.linkPrediction.predict.stream',
        description:
          'Predicts relationships for all non-connected node pairs based on a previously trained LinkPrediction model.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.linkPrediction.predict.stream(graphName :: STRING, configuration = {} :: MAP) :: (node1 :: INTEGER, node2 :: INTEGER, probability :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'node1 :: INTEGER',
            name: 'node1',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'node2 :: INTEGER',
            name: 'node2',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'probability :: FLOAT',
            name: 'probability',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.linkPrediction.predict.stream.estimate': {
        name: 'gds.beta.pipeline.linkPrediction.predict.stream.estimate',
        description:
          'Estimates memory for predicting relationships for all non-connected node pairs based on a previously trained LinkPrediction model',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.linkPrediction.predict.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.linkPrediction.train': {
        name: 'gds.beta.pipeline.linkPrediction.train',
        description: 'Trains a link prediction model based on a pipeline',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.linkPrediction.train(graphName :: STRING, configuration = {} :: MAP) :: (modelSelectionStats :: MAP, trainMillis :: INTEGER, modelInfo :: MAP, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'modelSelectionStats :: MAP',
            name: 'modelSelectionStats',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'trainMillis :: INTEGER',
            name: 'trainMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'modelInfo :: MAP',
            name: 'modelInfo',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.linkPrediction.train.estimate': {
        name: 'gds.beta.pipeline.linkPrediction.train.estimate',
        description: 'Estimates memory for applying a linkPrediction model',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.linkPrediction.train.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.nodeClassification.addLogisticRegression': {
        name: 'gds.beta.pipeline.nodeClassification.addLogisticRegression',
        description:
          'Add a logistic regression configuration to the parameter space of the node classification train pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.nodeClassification.addLogisticRegression(pipelineName :: STRING, config = {} :: MAP) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureProperties :: LIST<STRING>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'config = {} :: MAP',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureProperties :: LIST<STRING>',
            name: 'featureProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: MAP',
            name: 'parameterSpace',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.nodeClassification.addNodeProperty': {
        name: 'gds.beta.pipeline.nodeClassification.addNodeProperty',
        description:
          'Add a node property step to an existing node classification training pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.nodeClassification.addNodeProperty(pipelineName :: STRING, procedureName :: STRING, procedureConfiguration :: MAP) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureProperties :: LIST<STRING>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'procedureName :: STRING',
            name: 'procedureName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'procedureConfiguration :: MAP',
            name: 'procedureConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureProperties :: LIST<STRING>',
            name: 'featureProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: MAP',
            name: 'parameterSpace',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.nodeClassification.addRandomForest': {
        name: 'gds.beta.pipeline.nodeClassification.addRandomForest',
        description:
          'Add a random forest configuration to the parameter space of the node classification train pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.nodeClassification.addRandomForest(pipelineName :: STRING, config :: MAP) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureProperties :: LIST<STRING>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'config :: MAP',
            name: 'config',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureProperties :: LIST<STRING>',
            name: 'featureProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: MAP',
            name: 'parameterSpace',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.nodeClassification.configureSplit': {
        name: 'gds.beta.pipeline.nodeClassification.configureSplit',
        description:
          'Configures the split of the node classification training pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.nodeClassification.configureSplit(pipelineName :: STRING, configuration :: MAP) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureProperties :: LIST<STRING>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureProperties :: LIST<STRING>',
            name: 'featureProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: MAP',
            name: 'parameterSpace',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.nodeClassification.create': {
        name: 'gds.beta.pipeline.nodeClassification.create',
        description:
          'Creates a node classification training pipeline in the pipeline catalog.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.nodeClassification.create(pipelineName :: STRING) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureProperties :: LIST<STRING>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureProperties :: LIST<STRING>',
            name: 'featureProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: MAP',
            name: 'parameterSpace',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.nodeClassification.predict.mutate': {
        name: 'gds.beta.pipeline.nodeClassification.predict.mutate',
        description:
          'Predicts classes for all nodes based on a previously trained pipeline model',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.nodeClassification.predict.mutate(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.nodeClassification.predict.mutate.estimate': {
        name: 'gds.beta.pipeline.nodeClassification.predict.mutate.estimate',
        description:
          'Estimates memory for predicting classes for all nodes based on a previously trained pipeline model',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.nodeClassification.predict.mutate.estimate(graphName :: ANY, configuration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: ANY',
            name: 'graphName',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.nodeClassification.predict.stream': {
        name: 'gds.beta.pipeline.nodeClassification.predict.stream',
        description:
          'Predicts classes for all nodes based on a previously trained pipeline model',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.nodeClassification.predict.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, predictedClass :: INTEGER, predictedProbabilities :: LIST<FLOAT>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'predictedClass :: INTEGER',
            name: 'predictedClass',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'predictedProbabilities :: LIST<FLOAT>',
            name: 'predictedProbabilities',
            type: 'LIST<FLOAT>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.nodeClassification.predict.stream.estimate': {
        name: 'gds.beta.pipeline.nodeClassification.predict.stream.estimate',
        description:
          'Estimates memory for predicting classes for all nodes based on a previously trained pipeline model',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.nodeClassification.predict.stream.estimate(graphName :: ANY, configuration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: ANY',
            name: 'graphName',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.nodeClassification.predict.write': {
        name: 'gds.beta.pipeline.nodeClassification.predict.write',
        description:
          'Predicts classes for all nodes based on a previously trained pipeline model',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.nodeClassification.predict.write(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, writeMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.nodeClassification.predict.write.estimate': {
        name: 'gds.beta.pipeline.nodeClassification.predict.write.estimate',
        description:
          'Estimates memory for predicting classes for all nodes based on a previously trained pipeline model',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.nodeClassification.predict.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.nodeClassification.selectFeatures': {
        name: 'gds.beta.pipeline.nodeClassification.selectFeatures',
        description:
          'Add one or several features to an existing node classification training pipeline.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.nodeClassification.selectFeatures(pipelineName :: STRING, nodeProperties :: ANY) :: (name :: STRING, nodePropertySteps :: LIST<MAP>, featureProperties :: LIST<STRING>, splitConfig :: MAP, autoTuningConfig :: MAP, parameterSpace :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeProperties :: ANY',
            name: 'nodeProperties',
            type: 'ANY',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodePropertySteps :: LIST<MAP>',
            name: 'nodePropertySteps',
            type: 'LIST<MAP>',
          },
          {
            isDeprecated: false,
            description: 'featureProperties :: LIST<STRING>',
            name: 'featureProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'splitConfig :: MAP',
            name: 'splitConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'autoTuningConfig :: MAP',
            name: 'autoTuningConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'parameterSpace :: MAP',
            name: 'parameterSpace',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.nodeClassification.train': {
        name: 'gds.beta.pipeline.nodeClassification.train',
        description: 'Trains a node classification model based on a pipeline',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.nodeClassification.train(graphName :: STRING, configuration = {} :: MAP) :: (modelSelectionStats :: MAP, trainMillis :: INTEGER, modelInfo :: MAP, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'modelSelectionStats :: MAP',
            name: 'modelSelectionStats',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'trainMillis :: INTEGER',
            name: 'trainMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'modelInfo :: MAP',
            name: 'modelInfo',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.beta.pipeline.nodeClassification.train.estimate': {
        name: 'gds.beta.pipeline.nodeClassification.train.estimate',
        description:
          'Estimates memory for training a node classification model based on a pipeline',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.beta.pipeline.nodeClassification.train.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.betweenness.mutate': {
        name: 'gds.betweenness.mutate',
        description:
          'Betweenness centrality measures the relative information flow that passes through a node.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.betweenness.mutate(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, mutateMillis :: INTEGER, centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.betweenness.mutate.estimate': {
        name: 'gds.betweenness.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.betweenness.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.betweenness.stats': {
        name: 'gds.betweenness.stats',
        description:
          'Betweenness centrality measures the relative information flow that passes through a node.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.betweenness.stats(graphName :: STRING, configuration = {} :: MAP) :: (centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.betweenness.stats.estimate': {
        name: 'gds.betweenness.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.betweenness.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.betweenness.stream': {
        name: 'gds.betweenness.stream',
        description:
          'Betweenness centrality measures the relative information flow that passes through a node.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.betweenness.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, score :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'score :: FLOAT',
            name: 'score',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.betweenness.stream.estimate': {
        name: 'gds.betweenness.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.betweenness.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.betweenness.write': {
        name: 'gds.betweenness.write',
        description:
          'Betweenness centrality measures the relative information flow that passes through a node.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.betweenness.write(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, writeMillis :: INTEGER, centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.betweenness.write.estimate': {
        name: 'gds.betweenness.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.betweenness.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.bfs.mutate': {
        name: 'gds.bfs.mutate',
        description:
          'BFS is a traversal algorithm, which explores all of the neighbor nodes at the present depth prior to moving on to the nodes at the next depth level.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.bfs.mutate(graphName :: STRING, configuration = {} :: MAP) :: (relationshipsWritten :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.bfs.mutate.estimate': {
        name: 'gds.bfs.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.bfs.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.bfs.stats': {
        name: 'gds.bfs.stats',
        description:
          'BFS is a traversal algorithm, which explores all of the neighbor nodes at the present depth prior to moving on to the nodes at the next depth level.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.bfs.stats(graphName :: STRING, configuration = {} :: MAP) :: (postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.bfs.stats.estimate': {
        name: 'gds.bfs.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.bfs.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.bfs.stream': {
        name: 'gds.bfs.stream',
        description:
          'BFS is a traversal algorithm, which explores all of the neighbor nodes at the present depth prior to moving on to the nodes at the next depth level.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.bfs.stream(graphName :: STRING, configuration = {} :: MAP) :: (sourceNode :: INTEGER, nodeIds :: LIST<INTEGER>, path :: PATH)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'sourceNode :: INTEGER',
            name: 'sourceNode',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeIds :: LIST<INTEGER>',
            name: 'nodeIds',
            type: 'LIST<INTEGER>',
          },
          {
            isDeprecated: false,
            description: 'path :: PATH',
            name: 'path',
            type: 'PATH',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.bfs.stream.estimate': {
        name: 'gds.bfs.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.bfs.stream.estimate(graphName :: ANY, configuration = {} :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: ANY',
            name: 'graphName',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.bridges.stream': {
        name: 'gds.bridges.stream',
        description:
          'Bridges find relationships that disconnect  components if removed',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.bridges.stream(graphName :: STRING, configuration = {} :: MAP) :: (from :: INTEGER, to :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'from :: INTEGER',
            name: 'from',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'to :: INTEGER',
            name: 'to',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.bridges.stream.estimate': {
        name: 'gds.bridges.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.bridges.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.closeness.harmonic.mutate': {
        name: 'gds.closeness.harmonic.mutate',
        description:
          'Harmonic centrality is a way of detecting nodes that are able to spread information very efficiently through a graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.closeness.harmonic.mutate(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, mutateMillis :: INTEGER, centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.closeness.harmonic.stats': {
        name: 'gds.closeness.harmonic.stats',
        description:
          'Harmonic centrality is a way of detecting nodes that are able to spread information very efficiently through a graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.closeness.harmonic.stats(graphName :: STRING, configuration = {} :: MAP) :: (centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.closeness.harmonic.stream': {
        name: 'gds.closeness.harmonic.stream',
        description:
          'Harmonic centrality is a way of detecting nodes that are able to spread information very efficiently through a graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.closeness.harmonic.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, score :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'score :: FLOAT',
            name: 'score',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.closeness.harmonic.write': {
        name: 'gds.closeness.harmonic.write',
        description:
          'Harmonic centrality is a way of detecting nodes that are able to spread information very efficiently through a graph.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.closeness.harmonic.write(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, writeMillis :: INTEGER, centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.closeness.mutate': {
        name: 'gds.closeness.mutate',
        description:
          'Closeness centrality is a way of detecting nodes that are able to spread information very efficiently through a graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.closeness.mutate(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, mutateMillis :: INTEGER, centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.closeness.stats': {
        name: 'gds.closeness.stats',
        description:
          'Closeness centrality is a way of detecting nodes that are able to spread information very efficiently through a graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.closeness.stats(graphName :: STRING, configuration = {} :: MAP) :: (centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.closeness.stream': {
        name: 'gds.closeness.stream',
        description:
          'Closeness centrality is a way of detecting nodes that are able to spread information very efficiently through a graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.closeness.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, score :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'score :: FLOAT',
            name: 'score',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.closeness.write': {
        name: 'gds.closeness.write',
        description:
          'Closeness centrality is a way of detecting nodes that are able to spread information very efficiently through a graph.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.closeness.write(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, writeMillis :: INTEGER, centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.collapsePath.mutate': {
        name: 'gds.collapsePath.mutate',
        description:
          'Collapse Path algorithm is a traversal algorithm capable of creating relationships between the start and end nodes of a traversal',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.collapsePath.mutate(graphName :: STRING, configuration = {} :: MAP) :: (preProcessingMillis :: INTEGER, computeMillis :: INTEGER, mutateMillis :: INTEGER, relationshipsWritten :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.conductance.stream': {
        name: 'gds.conductance.stream',
        description:
          'Evaluates a division of nodes into communities based on the proportion of relationships that cross community boundaries.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.conductance.stream(graphName :: STRING, configuration = {} :: MAP) :: (community :: INTEGER, conductance :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'community :: INTEGER',
            name: 'community',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'conductance :: FLOAT',
            name: 'conductance',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.config.defaults.list': {
        name: 'gds.config.defaults.list',
        description:
          'List defaults; global by default, but also optionally for a specific user and/ or key',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'gds.config.defaults.list(parameters = {} :: MAP) :: (key :: STRING, value :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'parameters = {} :: MAP',
            name: 'parameters',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'key :: STRING',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'value :: ANY',
            name: 'value',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.config.defaults.set': {
        name: 'gds.config.defaults.set',
        description:
          'Set a default; global by, default, but also optionally for a specific user',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'gds.config.defaults.set(key :: STRING, value :: ANY, username = d81eb72e-c499-4f78-90c7-0c76123606a2 :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'key :: STRING',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'value :: ANY',
            name: 'value',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=d81eb72e-c499-4f78-90c7-0c76123606a2, type=STRING}',
            description:
              'username = d81eb72e-c499-4f78-90c7-0c76123606a2 :: STRING',
            name: 'username',
            type: 'STRING',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.config.limits.list': {
        name: 'gds.config.limits.list',
        description:
          'List limits; global by default, but also optionally for a specific user and/ or key',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'gds.config.limits.list(parameters = {} :: MAP) :: (key :: STRING, value :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'parameters = {} :: MAP',
            name: 'parameters',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'key :: STRING',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'value :: ANY',
            name: 'value',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.config.limits.set': {
        name: 'gds.config.limits.set',
        description:
          'Set a limit; global by, default, but also optionally for a specific user',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'gds.config.limits.set(key :: STRING, value :: ANY, username = d81eb72e-c499-4f78-90c7-0c76123606a2 :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'key :: STRING',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'value :: ANY',
            name: 'value',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=d81eb72e-c499-4f78-90c7-0c76123606a2, type=STRING}',
            description:
              'username = d81eb72e-c499-4f78-90c7-0c76123606a2 :: STRING',
            name: 'username',
            type: 'STRING',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.dag.longestPath.stream': {
        name: 'gds.dag.longestPath.stream',
        description: 'Returns the longest paths ending in given target nodes',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.dag.longestPath.stream(graphName :: STRING, configuration = {} :: MAP) :: (index :: INTEGER, sourceNode :: INTEGER, targetNode :: INTEGER, totalCost :: FLOAT, nodeIds :: LIST<INTEGER>, costs :: LIST<FLOAT>, path :: PATH)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'index :: INTEGER',
            name: 'index',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'sourceNode :: INTEGER',
            name: 'sourceNode',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'targetNode :: INTEGER',
            name: 'targetNode',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'totalCost :: FLOAT',
            name: 'totalCost',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'nodeIds :: LIST<INTEGER>',
            name: 'nodeIds',
            type: 'LIST<INTEGER>',
          },
          {
            isDeprecated: false,
            description: 'costs :: LIST<FLOAT>',
            name: 'costs',
            type: 'LIST<FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'path :: PATH',
            name: 'path',
            type: 'PATH',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.dag.topologicalSort.stream': {
        name: 'gds.dag.topologicalSort.stream',
        description:
          'Returns all the nodes in the graph that are not part of a cycle or depend on a cycle, sorted in a topological order',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.dag.topologicalSort.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, maxDistanceFromSource :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'maxDistanceFromSource :: FLOAT',
            name: 'maxDistanceFromSource',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.debug.arrow': {
        name: 'gds.debug.arrow',
        description:
          'Returns details about the status of the GDS Flight server',
        mode: 'DEFAULT',
        worksOnSystem: true,
        signature:
          'gds.debug.arrow() :: (running :: BOOLEAN, enabled :: BOOLEAN, versions :: LIST<STRING>, listenAddress :: STRING, advertisedListenAddress :: STRING, serverLocation :: STRING, batchSize :: INTEGER, abortionTimeout :: DURATION)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'running :: BOOLEAN',
            name: 'running',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'enabled :: BOOLEAN',
            name: 'enabled',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'versions :: LIST<STRING>',
            name: 'versions',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'listenAddress :: STRING',
            name: 'listenAddress',
            type: 'STRING',
          },
          {
            isDeprecated: true,
            description: 'advertisedListenAddress :: STRING',
            name: 'advertisedListenAddress',
            type: 'STRING',
          },
          {
            isDeprecated: true,
            description: 'serverLocation :: STRING',
            name: 'serverLocation',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'batchSize :: INTEGER',
            name: 'batchSize',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'abortionTimeout :: DURATION',
            name: 'abortionTimeout',
            type: 'DURATION',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.debug.sysInfo': {
        name: 'gds.debug.sysInfo',
        description: 'Returns details about the status of the system',
        mode: 'DEFAULT',
        worksOnSystem: true,
        signature: 'gds.debug.sysInfo() :: (key :: STRING, value :: ANY)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'key :: STRING',
            name: 'key',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'value :: ANY',
            name: 'value',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.degree.mutate': {
        name: 'gds.degree.mutate',
        description:
          'Degree centrality measures the number of incoming and outgoing relationships from a node.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.degree.mutate(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, mutateMillis :: INTEGER, centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.degree.mutate.estimate': {
        name: 'gds.degree.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.degree.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.degree.stats': {
        name: 'gds.degree.stats',
        description:
          'Degree centrality measures the number of incoming and outgoing relationships from a node.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.degree.stats(graphName :: STRING, configuration = {} :: MAP) :: (centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.degree.stats.estimate': {
        name: 'gds.degree.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.degree.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.degree.stream': {
        name: 'gds.degree.stream',
        description:
          'Degree centrality measures the number of incoming and outgoing relationships from a node.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.degree.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, score :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'score :: FLOAT',
            name: 'score',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.degree.stream.estimate': {
        name: 'gds.degree.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.degree.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.degree.write': {
        name: 'gds.degree.write',
        description:
          'Degree centrality measures the number of incoming and outgoing relationships from a node.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.degree.write(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, writeMillis :: INTEGER, centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.degree.write.estimate': {
        name: 'gds.degree.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.degree.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.dfs.mutate': {
        name: 'gds.dfs.mutate',
        description:
          'Depth-first search (DFS) is an algorithm for traversing or searching tree or graph data structures. The algorithm starts at the root node (selecting some arbitrary node as the root node in the case of a graph) and explores as far as possible along each branch before backtracking.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.dfs.mutate(graphName :: STRING, configuration = {} :: MAP) :: (relationshipsWritten :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.dfs.mutate.estimate': {
        name: 'gds.dfs.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.dfs.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.dfs.stream': {
        name: 'gds.dfs.stream',
        description:
          'Depth-first search (DFS) is an algorithm for traversing or searching tree or graph data structures. The algorithm starts at the root node (selecting some arbitrary node as the root node in the case of a graph) and explores as far as possible along each branch before backtracking.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.dfs.stream(graphName :: STRING, configuration = {} :: MAP) :: (sourceNode :: INTEGER, nodeIds :: LIST<INTEGER>, path :: PATH)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'sourceNode :: INTEGER',
            name: 'sourceNode',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeIds :: LIST<INTEGER>',
            name: 'nodeIds',
            type: 'LIST<INTEGER>',
          },
          {
            isDeprecated: false,
            description: 'path :: PATH',
            name: 'path',
            type: 'PATH',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.dfs.stream.estimate': {
        name: 'gds.dfs.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.dfs.stream.estimate(graphName :: ANY, configuration = {} :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: ANY',
            name: 'graphName',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.eigenvector.mutate': {
        name: 'gds.eigenvector.mutate',
        description:
          'Eigenvector Centrality is an algorithm that measures the transitive influence or connectivity of nodes.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.eigenvector.mutate(graphName :: STRING, configuration = {} :: MAP) :: (mutateMillis :: INTEGER, nodePropertiesWritten :: INTEGER, ranIterations :: INTEGER, didConverge :: BOOLEAN, centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.eigenvector.mutate.estimate': {
        name: 'gds.eigenvector.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.eigenvector.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.eigenvector.stats': {
        name: 'gds.eigenvector.stats',
        description:
          'Eigenvector Centrality is an algorithm that measures the transitive influence or connectivity of nodes.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.eigenvector.stats(graphName :: STRING, configuration = {} :: MAP) :: (ranIterations :: INTEGER, didConverge :: BOOLEAN, centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.eigenvector.stats.estimate': {
        name: 'gds.eigenvector.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.eigenvector.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.eigenvector.stream': {
        name: 'gds.eigenvector.stream',
        description:
          'Eigenvector Centrality is an algorithm that measures the transitive influence or connectivity of nodes.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.eigenvector.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, score :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'score :: FLOAT',
            name: 'score',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.eigenvector.stream.estimate': {
        name: 'gds.eigenvector.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.eigenvector.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.eigenvector.write': {
        name: 'gds.eigenvector.write',
        description:
          'Eigenvector Centrality is an algorithm that measures the transitive influence or connectivity of nodes.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.eigenvector.write(graphName :: STRING, configuration = {} :: MAP) :: (writeMillis :: INTEGER, nodePropertiesWritten :: INTEGER, ranIterations :: INTEGER, didConverge :: BOOLEAN, centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.eigenvector.write.estimate': {
        name: 'gds.eigenvector.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.eigenvector.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.fastRP.mutate': {
        name: 'gds.fastRP.mutate',
        description:
          'Random Projection produces node embeddings via the fastrp algorithm',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.fastRP.mutate(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, mutateMillis :: INTEGER, nodeCount :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.fastRP.mutate.estimate': {
        name: 'gds.fastRP.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.fastRP.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.fastRP.stats': {
        name: 'gds.fastRP.stats',
        description:
          'Random Projection produces node embeddings via the fastrp algorithm',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.fastRP.stats(graphName :: STRING, configuration = {} :: MAP) :: (nodeCount :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.fastRP.stats.estimate': {
        name: 'gds.fastRP.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.fastRP.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.fastRP.stream': {
        name: 'gds.fastRP.stream',
        description:
          'Random Projection produces node embeddings via the fastrp algorithm',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.fastRP.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, embedding :: LIST<FLOAT>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'embedding :: LIST<FLOAT>',
            name: 'embedding',
            type: 'LIST<FLOAT>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.fastRP.stream.estimate': {
        name: 'gds.fastRP.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.fastRP.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.fastRP.write': {
        name: 'gds.fastRP.write',
        description:
          'Random Projection produces node embeddings via the fastrp algorithm',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.fastRP.write(graphName :: STRING, configuration = {} :: MAP) :: (nodeCount :: INTEGER, nodePropertiesWritten :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, writeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.fastRP.write.estimate': {
        name: 'gds.fastRP.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.fastRP.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.drop': {
        name: 'gds.graph.drop',
        description:
          'Drops a named graph from the catalog and frees up the resources it occupies.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.drop(graphName :: ANY, failIfMissing = true :: BOOLEAN, dbName =  :: STRING, username =  :: STRING) :: (graphName :: STRING, database :: STRING, databaseLocation :: STRING, memoryUsage :: STRING, sizeInBytes :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, configuration :: MAP, density :: FLOAT, creationTime :: ZONED DATETIME, modificationTime :: ZONED DATETIME, schema :: MAP, schemaWithOrientation :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: ANY',
            name: 'graphName',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=true, type=BOOLEAN}',
            description: 'failIfMissing = true :: BOOLEAN',
            name: 'failIfMissing',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'dbName =  :: STRING',
            name: 'dbName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'username =  :: STRING',
            name: 'username',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'database :: STRING',
            name: 'database',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'databaseLocation :: STRING',
            name: 'databaseLocation',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'memoryUsage :: STRING',
            name: 'memoryUsage',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'sizeInBytes :: INTEGER',
            name: 'sizeInBytes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'density :: FLOAT',
            name: 'density',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'creationTime :: ZONED DATETIME',
            name: 'creationTime',
            type: 'ZONED DATETIME',
          },
          {
            isDeprecated: false,
            description: 'modificationTime :: ZONED DATETIME',
            name: 'modificationTime',
            type: 'ZONED DATETIME',
          },
          {
            isDeprecated: true,
            description: 'schema :: MAP',
            name: 'schema',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'schemaWithOrientation :: MAP',
            name: 'schemaWithOrientation',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.exists': {
        name: 'gds.graph.exists',
        description: 'Checks if a graph exists in the catalog.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.exists(graphName :: STRING) :: (graphName :: STRING, exists :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'exists :: BOOLEAN',
            name: 'exists',
            type: 'BOOLEAN',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.export': {
        name: 'gds.graph.export',
        description: 'Exports a named graph into a new offline Neo4j database.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.export(graphName :: STRING, configuration = {} :: MAP) :: (dbName :: STRING, graphName :: STRING, nodeCount :: INTEGER, relationshipCount :: INTEGER, relationshipTypeCount :: INTEGER, nodePropertyCount :: INTEGER, relationshipPropertyCount :: INTEGER, writeMillis :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'dbName :: STRING',
            name: 'dbName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipTypeCount :: INTEGER',
            name: 'relationshipTypeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertyCount :: INTEGER',
            name: 'nodePropertyCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipPropertyCount :: INTEGER',
            name: 'relationshipPropertyCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.export.csv': {
        name: 'gds.graph.export.csv',
        description: 'Exports a named graph to CSV files.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.export.csv(graphName :: STRING, configuration = {} :: MAP) :: (exportName :: STRING, graphName :: STRING, nodeCount :: INTEGER, relationshipCount :: INTEGER, relationshipTypeCount :: INTEGER, nodePropertyCount :: INTEGER, relationshipPropertyCount :: INTEGER, writeMillis :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'exportName :: STRING',
            name: 'exportName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipTypeCount :: INTEGER',
            name: 'relationshipTypeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertyCount :: INTEGER',
            name: 'nodePropertyCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipPropertyCount :: INTEGER',
            name: 'relationshipPropertyCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.export.csv.estimate': {
        name: 'gds.graph.export.csv.estimate',
        description:
          'Estimate the required disk space for exporting a named graph to CSV files.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.export.csv.estimate(graphName :: STRING, configuration = {} :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.filter': {
        name: 'gds.graph.filter',
        description:
          'Applies node and relationship predicates on a graph and stores the result as a new graph in the catalog.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.filter(graphName :: STRING, fromGraphName :: STRING, nodeFilter :: STRING, relationshipFilter :: STRING, configuration = {} :: MAP) :: (fromGraphName :: STRING, nodeFilter :: STRING, relationshipFilter :: STRING, graphName :: STRING, nodeCount :: INTEGER, relationshipCount :: INTEGER, projectMillis :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'fromGraphName :: STRING',
            name: 'fromGraphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeFilter :: STRING',
            name: 'nodeFilter',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'relationshipFilter :: STRING',
            name: 'relationshipFilter',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'fromGraphName :: STRING',
            name: 'fromGraphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeFilter :: STRING',
            name: 'nodeFilter',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'relationshipFilter :: STRING',
            name: 'relationshipFilter',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'projectMillis :: INTEGER',
            name: 'projectMillis',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.generate': {
        name: 'gds.graph.generate',
        description:
          'Computes a random graph, which will be stored in the graph catalog.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.generate(graphName :: STRING, nodeCount :: INTEGER, averageDegree :: INTEGER, configuration = {} :: MAP) :: (name :: STRING, nodes :: INTEGER, relationships :: INTEGER, generateMillis :: INTEGER, relationshipSeed :: INTEGER, averageDegree :: FLOAT, relationshipDistribution :: ANY, relationshipProperty :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'averageDegree :: INTEGER',
            name: 'averageDegree',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodes :: INTEGER',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationships :: INTEGER',
            name: 'relationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'generateMillis :: INTEGER',
            name: 'generateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipSeed :: INTEGER',
            name: 'relationshipSeed',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'averageDegree :: FLOAT',
            name: 'averageDegree',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'relationshipDistribution :: ANY',
            name: 'relationshipDistribution',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'relationshipProperty :: ANY',
            name: 'relationshipProperty',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.graphProperty.drop': {
        name: 'gds.graph.graphProperty.drop',
        description: 'Removes a graph property from a projected graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.graphProperty.drop(graphName :: STRING, graphProperty :: STRING, configuration = {} :: MAP) :: (graphName :: STRING, graphProperty :: STRING, propertiesRemoved :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'graphProperty :: STRING',
            name: 'graphProperty',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'graphProperty :: STRING',
            name: 'graphProperty',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'propertiesRemoved :: INTEGER',
            name: 'propertiesRemoved',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.graphProperty.stream': {
        name: 'gds.graph.graphProperty.stream',
        description: 'Streams the given graph property.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.graphProperty.stream(graphName :: STRING, graphProperty :: STRING, configuration = {} :: MAP) :: (propertyValue :: ANY)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'graphProperty :: STRING',
            name: 'graphProperty',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'propertyValue :: ANY',
            name: 'propertyValue',
            type: 'ANY',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.list': {
        name: 'gds.graph.list',
        description:
          'Lists information about named graphs stored in the catalog.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.list(graphName = d9b6394a-9482-4929-adab-f97df578a6c6 :: STRING) :: (degreeDistribution :: MAP, graphName :: STRING, database :: STRING, databaseLocation :: STRING, memoryUsage :: STRING, sizeInBytes :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, configuration :: MAP, density :: FLOAT, creationTime :: ZONED DATETIME, modificationTime :: ZONED DATETIME, schema :: MAP, schemaWithOrientation :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            default:
              'DefaultParameterValue{value=d9b6394a-9482-4929-adab-f97df578a6c6, type=STRING}',
            description:
              'graphName = d9b6394a-9482-4929-adab-f97df578a6c6 :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'degreeDistribution :: MAP',
            name: 'degreeDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'database :: STRING',
            name: 'database',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'databaseLocation :: STRING',
            name: 'databaseLocation',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'memoryUsage :: STRING',
            name: 'memoryUsage',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'sizeInBytes :: INTEGER',
            name: 'sizeInBytes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'density :: FLOAT',
            name: 'density',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'creationTime :: ZONED DATETIME',
            name: 'creationTime',
            type: 'ZONED DATETIME',
          },
          {
            isDeprecated: false,
            description: 'modificationTime :: ZONED DATETIME',
            name: 'modificationTime',
            type: 'ZONED DATETIME',
          },
          {
            isDeprecated: true,
            description: 'schema :: MAP',
            name: 'schema',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'schemaWithOrientation :: MAP',
            name: 'schemaWithOrientation',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.nodeLabel.mutate': {
        name: 'gds.graph.nodeLabel.mutate',
        description: 'Mutates the in-memory graph with the given node Label.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.nodeLabel.mutate(graphName :: STRING, nodeLabel :: STRING, configuration :: MAP) :: (mutateMillis :: INTEGER, graphName :: STRING, nodeLabel :: STRING, nodeLabelsWritten :: INTEGER, nodeCount :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeLabel :: STRING',
            name: 'nodeLabel',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeLabel :: STRING',
            name: 'nodeLabel',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeLabelsWritten :: INTEGER',
            name: 'nodeLabelsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.nodeLabel.write': {
        name: 'gds.graph.nodeLabel.write',
        description: 'Writes the given node Label to an online Neo4j database.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.graph.nodeLabel.write(graphName :: STRING, nodeLabel :: STRING, configuration :: MAP) :: (writeMillis :: INTEGER, graphName :: STRING, nodeLabel :: STRING, nodeCount :: INTEGER, nodeLabelsWritten :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeLabel :: STRING',
            name: 'nodeLabel',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeLabel :: STRING',
            name: 'nodeLabel',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeLabelsWritten :: INTEGER',
            name: 'nodeLabelsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.nodeProperties.drop': {
        name: 'gds.graph.nodeProperties.drop',
        description: 'Removes node properties from a projected graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.nodeProperties.drop(graphName :: STRING, nodeProperties :: ANY, configuration = {} :: MAP) :: (graphName :: STRING, nodeProperties :: LIST<STRING>, propertiesRemoved :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeProperties :: ANY',
            name: 'nodeProperties',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeProperties :: LIST<STRING>',
            name: 'nodeProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'propertiesRemoved :: INTEGER',
            name: 'propertiesRemoved',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.nodeProperties.stream': {
        name: 'gds.graph.nodeProperties.stream',
        description: 'Streams the given node properties.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.nodeProperties.stream(graphName :: STRING, nodeProperties :: ANY, nodeLabels = [*] :: ANY, configuration = {} :: MAP) :: (nodeId :: INTEGER, nodeProperty :: STRING, propertyValue :: ANY, nodeLabels :: LIST<STRING>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeProperties :: ANY',
            name: 'nodeProperties',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[*], type=ANY}',
            description: 'nodeLabels = [*] :: ANY',
            name: 'nodeLabels',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeProperty :: STRING',
            name: 'nodeProperty',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'propertyValue :: ANY',
            name: 'propertyValue',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'nodeLabels :: LIST<STRING>',
            name: 'nodeLabels',
            type: 'LIST<STRING>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.nodeProperties.write': {
        name: 'gds.graph.nodeProperties.write',
        description:
          'Writes the given node properties to an online Neo4j database.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.graph.nodeProperties.write(graphName :: STRING, nodeProperties :: ANY, nodeLabels = [*] :: ANY, configuration = {} :: MAP) :: (writeMillis :: INTEGER, graphName :: STRING, nodeProperties :: LIST<STRING>, propertiesWritten :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeProperties :: ANY',
            name: 'nodeProperties',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[*], type=ANY}',
            description: 'nodeLabels = [*] :: ANY',
            name: 'nodeLabels',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeProperties :: LIST<STRING>',
            name: 'nodeProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'propertiesWritten :: INTEGER',
            name: 'propertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.nodeProperty.stream': {
        name: 'gds.graph.nodeProperty.stream',
        description: 'Streams the given node property.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.nodeProperty.stream(graphName :: STRING, nodeProperties :: STRING, nodeLabels = [*] :: ANY, configuration = {} :: MAP) :: (nodeId :: INTEGER, propertyValue :: ANY, nodeLabels :: LIST<STRING>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeProperties :: STRING',
            name: 'nodeProperties',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[*], type=ANY}',
            description: 'nodeLabels = [*] :: ANY',
            name: 'nodeLabels',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'propertyValue :: ANY',
            name: 'propertyValue',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'nodeLabels :: LIST<STRING>',
            name: 'nodeLabels',
            type: 'LIST<STRING>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.project': {
        name: 'gds.graph.project',
        description:
          'Creates a named graph in the catalog for use by algorithms.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.project(graphName :: STRING, nodeProjection :: ANY, relationshipProjection :: ANY, configuration = {} :: MAP) :: (nodeProjection :: MAP, relationshipProjection :: MAP, graphName :: STRING, nodeCount :: INTEGER, relationshipCount :: INTEGER, projectMillis :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeProjection :: ANY',
            name: 'nodeProjection',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'relationshipProjection :: ANY',
            name: 'relationshipProjection',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeProjection :: MAP',
            name: 'nodeProjection',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'relationshipProjection :: MAP',
            name: 'relationshipProjection',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'projectMillis :: INTEGER',
            name: 'projectMillis',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.project.cypher': {
        name: 'gds.graph.project.cypher',
        description:
          'Creates a named graph in the catalog for use by algorithms.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.project.cypher(graphName :: STRING, nodeQuery :: STRING, relationshipQuery :: STRING, configuration = {} :: MAP) :: (nodeQuery :: STRING, relationshipQuery :: STRING, graphName :: STRING, nodeCount :: INTEGER, relationshipCount :: INTEGER, projectMillis :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeQuery :: STRING',
            name: 'nodeQuery',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'relationshipQuery :: STRING',
            name: 'relationshipQuery',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeQuery :: STRING',
            name: 'nodeQuery',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'relationshipQuery :: STRING',
            name: 'relationshipQuery',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'projectMillis :: INTEGER',
            name: 'projectMillis',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy:
          'gds.graph.project Cypher projection as an aggregation function',
        option: {
          deprecated: true,
        },
      },
      'gds.graph.project.cypher.estimate': {
        name: 'gds.graph.project.cypher.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.project.cypher.estimate(nodeQuery :: STRING, relationshipQuery :: STRING, configuration = {} :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'nodeQuery :: STRING',
            name: 'nodeQuery',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'relationshipQuery :: STRING',
            name: 'relationshipQuery',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: true,
        deprecatedBy:
          'gds.graph.project Cypher projection as an aggregation function',
        option: {
          deprecated: true,
        },
      },
      'gds.graph.project.estimate': {
        name: 'gds.graph.project.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.project.estimate(nodeProjection :: ANY, relationshipProjection :: ANY, configuration = {} :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'nodeProjection :: ANY',
            name: 'nodeProjection',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'relationshipProjection :: ANY',
            name: 'relationshipProjection',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.relationship.write': {
        name: 'gds.graph.relationship.write',
        description:
          'Writes the given relationship and an optional relationship property to an online Neo4j database.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.graph.relationship.write(graphName :: STRING, relationshipType :: STRING, relationshipProperty =  :: STRING, configuration = {} :: MAP) :: (writeMillis :: INTEGER, graphName :: STRING, relationshipType :: STRING, relationshipProperty :: STRING, relationshipsWritten :: INTEGER, propertiesWritten :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'relationshipType :: STRING',
            name: 'relationshipType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'relationshipProperty =  :: STRING',
            name: 'relationshipProperty',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'relationshipType :: STRING',
            name: 'relationshipType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'relationshipProperty :: STRING',
            name: 'relationshipProperty',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'propertiesWritten :: INTEGER',
            name: 'propertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.relationshipProperties.stream': {
        name: 'gds.graph.relationshipProperties.stream',
        description: 'Streams the given relationship properties.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.relationshipProperties.stream(graphName :: STRING, relationshipProperties :: LIST<STRING>, relationshipTypes = [*] :: ANY, configuration = {} :: MAP) :: (sourceNodeId :: INTEGER, targetNodeId :: INTEGER, relationshipType :: STRING, relationshipProperty :: STRING, propertyValue :: INTEGER | FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'relationshipProperties :: LIST<STRING>',
            name: 'relationshipProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[*], type=ANY}',
            description: 'relationshipTypes = [*] :: ANY',
            name: 'relationshipTypes',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'sourceNodeId :: INTEGER',
            name: 'sourceNodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'targetNodeId :: INTEGER',
            name: 'targetNodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipType :: STRING',
            name: 'relationshipType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'relationshipProperty :: STRING',
            name: 'relationshipProperty',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'propertyValue :: INTEGER | FLOAT',
            name: 'propertyValue',
            type: 'INTEGER | FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.relationshipProperties.write': {
        name: 'gds.graph.relationshipProperties.write',
        description:
          'Writes the given relationship and a list of relationship properties to an online Neo4j database.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.graph.relationshipProperties.write(graphName :: STRING, relationshipType :: STRING, relationshipProperties :: LIST<STRING>, configuration :: MAP) :: (writeMillis :: INTEGER, graphName :: STRING, relationshipType :: STRING, relationshipProperties :: LIST<STRING>, relationshipsWritten :: INTEGER, propertiesWritten :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'relationshipType :: STRING',
            name: 'relationshipType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'relationshipProperties :: LIST<STRING>',
            name: 'relationshipProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'relationshipType :: STRING',
            name: 'relationshipType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'relationshipProperties :: LIST<STRING>',
            name: 'relationshipProperties',
            type: 'LIST<STRING>',
          },
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'propertiesWritten :: INTEGER',
            name: 'propertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.relationshipProperty.stream': {
        name: 'gds.graph.relationshipProperty.stream',
        description: 'Streams the given relationship property.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.relationshipProperty.stream(graphName :: STRING, relationshipProperty :: STRING, relationshipTypes = [*] :: ANY, configuration = {} :: MAP) :: (sourceNodeId :: INTEGER, targetNodeId :: INTEGER, relationshipType :: STRING, propertyValue :: INTEGER | FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'relationshipProperty :: STRING',
            name: 'relationshipProperty',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[*], type=ANY}',
            description: 'relationshipTypes = [*] :: ANY',
            name: 'relationshipTypes',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'sourceNodeId :: INTEGER',
            name: 'sourceNodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'targetNodeId :: INTEGER',
            name: 'targetNodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipType :: STRING',
            name: 'relationshipType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'propertyValue :: INTEGER | FLOAT',
            name: 'propertyValue',
            type: 'INTEGER | FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.relationships.drop': {
        name: 'gds.graph.relationships.drop',
        description:
          'Delete the relationship type for a given graph stored in the graph-catalog.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.relationships.drop(graphName :: STRING, relationshipType :: STRING) :: (graphName :: STRING, relationshipType :: STRING, deletedRelationships :: INTEGER, deletedProperties :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'relationshipType :: STRING',
            name: 'relationshipType',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'relationshipType :: STRING',
            name: 'relationshipType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'deletedRelationships :: INTEGER',
            name: 'deletedRelationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'deletedProperties :: MAP',
            name: 'deletedProperties',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.relationships.stream': {
        name: 'gds.graph.relationships.stream',
        description: 'Streams the given relationship source/target pairs',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.relationships.stream(graphName :: STRING, relationshipTypes = [*] :: ANY, configuration = {} :: MAP) :: (sourceNodeId :: INTEGER, targetNodeId :: INTEGER, relationshipType :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=[*], type=ANY}',
            description: 'relationshipTypes = [*] :: ANY',
            name: 'relationshipTypes',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'sourceNodeId :: INTEGER',
            name: 'sourceNodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'targetNodeId :: INTEGER',
            name: 'targetNodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipType :: STRING',
            name: 'relationshipType',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.relationships.toUndirected': {
        name: 'gds.graph.relationships.toUndirected',
        description:
          'The ToUndirected procedure converts directed relationships to undirected relationships',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.relationships.toUndirected(graphName :: STRING, configuration = {} :: MAP) :: (inputRelationships :: INTEGER, relationshipsWritten :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'inputRelationships :: INTEGER',
            name: 'inputRelationships',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.relationships.toUndirected.estimate': {
        name: 'gds.graph.relationships.toUndirected.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.relationships.toUndirected.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.sample.cnarw': {
        name: 'gds.graph.sample.cnarw',
        description:
          'Constructs a random subgraph based on common neighbour aware random walks',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.sample.cnarw(graphName :: STRING, fromGraphName :: STRING, configuration = {} :: MAP) :: (fromGraphName :: STRING, startNodeCount :: INTEGER, graphName :: STRING, nodeCount :: INTEGER, relationshipCount :: INTEGER, projectMillis :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'fromGraphName :: STRING',
            name: 'fromGraphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'fromGraphName :: STRING',
            name: 'fromGraphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'startNodeCount :: INTEGER',
            name: 'startNodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'projectMillis :: INTEGER',
            name: 'projectMillis',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.sample.cnarw.estimate': {
        name: 'gds.graph.sample.cnarw.estimate',
        description:
          'Estimate memory requirements for sampling graph using CNARW algorithm',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.sample.cnarw.estimate(fromGraphName :: STRING, configuration = {} :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'fromGraphName :: STRING',
            name: 'fromGraphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.graph.sample.rwr': {
        name: 'gds.graph.sample.rwr',
        description:
          'Constructs a random subgraph based on random walks with restarts',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.graph.sample.rwr(graphName :: STRING, fromGraphName :: STRING, configuration = {} :: MAP) :: (fromGraphName :: STRING, startNodeCount :: INTEGER, graphName :: STRING, nodeCount :: INTEGER, relationshipCount :: INTEGER, projectMillis :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'fromGraphName :: STRING',
            name: 'fromGraphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'fromGraphName :: STRING',
            name: 'fromGraphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'startNodeCount :: INTEGER',
            name: 'startNodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'projectMillis :: INTEGER',
            name: 'projectMillis',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.hashgnn.mutate': {
        name: 'gds.hashgnn.mutate',
        description:
          'HashGNN creates node embeddings by hashing and message passing.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.hashgnn.mutate(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, mutateMillis :: INTEGER, nodeCount :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.hashgnn.mutate.estimate': {
        name: 'gds.hashgnn.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.hashgnn.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.hashgnn.stream': {
        name: 'gds.hashgnn.stream',
        description:
          'HashGNN creates node embeddings by hashing and message passing.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.hashgnn.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, embedding :: LIST<FLOAT>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'embedding :: LIST<FLOAT>',
            name: 'embedding',
            type: 'LIST<FLOAT>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.hashgnn.stream.estimate': {
        name: 'gds.hashgnn.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.hashgnn.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.hits.mutate': {
        name: 'gds.hits.mutate',
        description:
          'Hyperlink-Induced Topic Search (HITS) is a link analysis algorithm that rates nodes',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.hits.mutate(graphName :: STRING, configuration = {} :: MAP) :: (ranIterations :: INTEGER, didConverge :: BOOLEAN, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, mutateMillis :: INTEGER, nodePropertiesWritten :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.hits.mutate.estimate': {
        name: 'gds.hits.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.hits.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.hits.stats': {
        name: 'gds.hits.stats',
        description:
          'Hyperlink-Induced Topic Search (HITS) is a link analysis algorithm that rates nodes',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.hits.stats(graphName :: STRING, configuration = {} :: MAP) :: (ranIterations :: INTEGER, didConverge :: BOOLEAN, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.hits.stats.estimate': {
        name: 'gds.hits.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.hits.stats.estimate(graphName :: ANY, configuration = {} :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: ANY',
            name: 'graphName',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.hits.stream': {
        name: 'gds.hits.stream',
        description:
          'Hyperlink-Induced Topic Search (HITS) is a link analysis algorithm that rates nodes',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.hits.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, values :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'values :: MAP',
            name: 'values',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.hits.stream.estimate': {
        name: 'gds.hits.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.hits.stream.estimate(graphName :: ANY, configuration = {} :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: ANY',
            name: 'graphName',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.hits.write': {
        name: 'gds.hits.write',
        description:
          'Hyperlink-Induced Topic Search (HITS) is a link analysis algorithm that rates nodes',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.hits.write(graphName :: STRING, configuration = {} :: MAP) :: (ranIterations :: INTEGER, didConverge :: BOOLEAN, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, writeMillis :: INTEGER, nodePropertiesWritten :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.hits.write.estimate': {
        name: 'gds.hits.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.hits.write.estimate(graphName :: ANY, configuration = {} :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: ANY',
            name: 'graphName',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.influenceMaximization.celf.mutate': {
        name: 'gds.influenceMaximization.celf.mutate',
        description:
          'The Cost Effective Lazy Forward (CELF) algorithm aims to find k nodes that maximize the expected spread of influence in the network.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.influenceMaximization.celf.mutate(graphName :: STRING, configuration = {} :: MAP) :: (mutateMillis :: INTEGER, nodePropertiesWritten :: INTEGER, computeMillis :: INTEGER, totalSpread :: FLOAT, nodeCount :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'totalSpread :: FLOAT',
            name: 'totalSpread',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.influenceMaximization.celf.mutate.estimate': {
        name: 'gds.influenceMaximization.celf.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.influenceMaximization.celf.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.influenceMaximization.celf.stats': {
        name: 'gds.influenceMaximization.celf.stats',
        description:
          'The Cost Effective Lazy Forward (CELF) algorithm aims to find k nodes that maximize the expected spread of influence in the network.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.influenceMaximization.celf.stats(graphName :: STRING, configuration = {} :: MAP) :: (computeMillis :: INTEGER, totalSpread :: FLOAT, nodeCount :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'totalSpread :: FLOAT',
            name: 'totalSpread',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.influenceMaximization.celf.stats.estimate': {
        name: 'gds.influenceMaximization.celf.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.influenceMaximization.celf.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.influenceMaximization.celf.stream': {
        name: 'gds.influenceMaximization.celf.stream',
        description:
          'The Cost Effective Lazy Forward (CELF) algorithm aims to find k nodes that maximize the expected spread of influence in the network.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.influenceMaximization.celf.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, spread :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'spread :: FLOAT',
            name: 'spread',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.influenceMaximization.celf.stream.estimate': {
        name: 'gds.influenceMaximization.celf.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.influenceMaximization.celf.stream.estimate(graphName :: ANY, configuration = {} :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: ANY',
            name: 'graphName',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.influenceMaximization.celf.write': {
        name: 'gds.influenceMaximization.celf.write',
        description:
          'The Cost Effective Lazy Forward (CELF) algorithm aims to find k nodes that maximize the expected spread of influence in the network.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.influenceMaximization.celf.write(graphName :: STRING, configuration = {} :: MAP) :: (writeMillis :: INTEGER, nodePropertiesWritten :: INTEGER, computeMillis :: INTEGER, totalSpread :: FLOAT, nodeCount :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'totalSpread :: FLOAT',
            name: 'totalSpread',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.influenceMaximization.celf.write.estimate': {
        name: 'gds.influenceMaximization.celf.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.influenceMaximization.celf.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.k1coloring.mutate': {
        name: 'gds.k1coloring.mutate',
        description:
          'The K-1 Coloring algorithm assigns a color to every node in the graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.k1coloring.mutate(graphName :: STRING, configuration = {} :: MAP) :: (preProcessingMillis :: INTEGER, computeMillis :: INTEGER, mutateMillis :: INTEGER, nodeCount :: INTEGER, colorCount :: INTEGER, ranIterations :: INTEGER, didConverge :: BOOLEAN, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'colorCount :: INTEGER',
            name: 'colorCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.k1coloring.mutate.estimate': {
        name: 'gds.k1coloring.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.k1coloring.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.k1coloring.stats': {
        name: 'gds.k1coloring.stats',
        description:
          'The K-1 Coloring algorithm assigns a color to every node in the graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.k1coloring.stats(graphName :: STRING, configuration = {} :: MAP) :: (preProcessingMillis :: INTEGER, computeMillis :: INTEGER, nodeCount :: INTEGER, colorCount :: INTEGER, ranIterations :: INTEGER, didConverge :: BOOLEAN, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'colorCount :: INTEGER',
            name: 'colorCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.k1coloring.stats.estimate': {
        name: 'gds.k1coloring.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.k1coloring.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.k1coloring.stream': {
        name: 'gds.k1coloring.stream',
        description:
          'The K-1 Coloring algorithm assigns a color to every node in the graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.k1coloring.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, color :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'color :: INTEGER',
            name: 'color',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.k1coloring.stream.estimate': {
        name: 'gds.k1coloring.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.k1coloring.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.k1coloring.write': {
        name: 'gds.k1coloring.write',
        description:
          'The K-1 Coloring algorithm assigns a color to every node in the graph.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.k1coloring.write(graphName :: STRING, configuration = {} :: MAP) :: (preProcessingMillis :: INTEGER, computeMillis :: INTEGER, writeMillis :: INTEGER, nodeCount :: INTEGER, colorCount :: INTEGER, ranIterations :: INTEGER, didConverge :: BOOLEAN, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'colorCount :: INTEGER',
            name: 'colorCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.k1coloring.write.estimate': {
        name: 'gds.k1coloring.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.k1coloring.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.kSpanningTree.write': {
        name: 'gds.kSpanningTree.write',
        description:
          'The K-spanning tree algorithm starts from a root node and returns a spanning tree with exactly k nodes',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.kSpanningTree.write(graphName :: STRING, configuration = {} :: MAP) :: (effectiveNodeCount :: INTEGER, writeMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'effectiveNodeCount :: INTEGER',
            name: 'effectiveNodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.kcore.mutate': {
        name: 'gds.kcore.mutate',
        description: 'It computes the k-core values in a network',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.kcore.mutate(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, degeneracy :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'degeneracy :: INTEGER',
            name: 'degeneracy',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.kcore.mutate.estimate': {
        name: 'gds.kcore.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.kcore.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.kcore.stats': {
        name: 'gds.kcore.stats',
        description: 'It computes the k-core values in a network',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.kcore.stats(graphName :: STRING, configuration = {} :: MAP) :: (degeneracy :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'degeneracy :: INTEGER',
            name: 'degeneracy',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.kcore.stats.estimate': {
        name: 'gds.kcore.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.kcore.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.kcore.stream': {
        name: 'gds.kcore.stream',
        description: 'It computes the k-core values in a network',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.kcore.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, coreValue :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'coreValue :: INTEGER',
            name: 'coreValue',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.kcore.stream.estimate': {
        name: 'gds.kcore.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.kcore.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.kcore.write': {
        name: 'gds.kcore.write',
        description: 'It computes the k-core values in a network',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.kcore.write(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, degeneracy :: INTEGER, writeMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'degeneracy :: INTEGER',
            name: 'degeneracy',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.kcore.write.estimate': {
        name: 'gds.kcore.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.kcore.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.kmeans.mutate': {
        name: 'gds.kmeans.mutate',
        description:
          'The Kmeans  algorithm clusters nodes into different communities based on Euclidean distance',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.kmeans.mutate(graphName :: STRING, configuration = {} :: MAP) :: (mutateMillis :: INTEGER, nodePropertiesWritten :: INTEGER, communityDistribution :: MAP, centroids :: LIST<LIST<FLOAT>>, averageDistanceToCentroid :: FLOAT, averageSilhouette :: FLOAT, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityDistribution :: MAP',
            name: 'communityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'centroids :: LIST<LIST<FLOAT>>',
            name: 'centroids',
            type: 'LIST<LIST<FLOAT>>',
          },
          {
            isDeprecated: false,
            description: 'averageDistanceToCentroid :: FLOAT',
            name: 'averageDistanceToCentroid',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'averageSilhouette :: FLOAT',
            name: 'averageSilhouette',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.kmeans.mutate.estimate': {
        name: 'gds.kmeans.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.kmeans.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.kmeans.stats': {
        name: 'gds.kmeans.stats',
        description:
          'The Kmeans  algorithm clusters nodes into different communities based on Euclidean distance',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.kmeans.stats(graphName :: STRING, configuration = {} :: MAP) :: (communityDistribution :: MAP, centroids :: LIST<LIST<FLOAT>>, averageDistanceToCentroid :: FLOAT, averageSilhouette :: FLOAT, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'communityDistribution :: MAP',
            name: 'communityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'centroids :: LIST<LIST<FLOAT>>',
            name: 'centroids',
            type: 'LIST<LIST<FLOAT>>',
          },
          {
            isDeprecated: false,
            description: 'averageDistanceToCentroid :: FLOAT',
            name: 'averageDistanceToCentroid',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'averageSilhouette :: FLOAT',
            name: 'averageSilhouette',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.kmeans.stats.estimate': {
        name: 'gds.kmeans.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.kmeans.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.kmeans.stream': {
        name: 'gds.kmeans.stream',
        description:
          'The Kmeans  algorithm clusters nodes into different communities based on Euclidean distance',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.kmeans.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, communityId :: INTEGER, distanceFromCentroid :: FLOAT, silhouette :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityId :: INTEGER',
            name: 'communityId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'distanceFromCentroid :: FLOAT',
            name: 'distanceFromCentroid',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'silhouette :: FLOAT',
            name: 'silhouette',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.kmeans.stream.estimate': {
        name: 'gds.kmeans.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.kmeans.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.kmeans.write': {
        name: 'gds.kmeans.write',
        description:
          'The Kmeans  algorithm clusters nodes into different communities based on Euclidean distance',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.kmeans.write(graphName :: STRING, configuration = {} :: MAP) :: (writeMillis :: INTEGER, nodePropertiesWritten :: INTEGER, communityDistribution :: MAP, centroids :: LIST<LIST<FLOAT>>, averageDistanceToCentroid :: FLOAT, averageSilhouette :: FLOAT, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityDistribution :: MAP',
            name: 'communityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'centroids :: LIST<LIST<FLOAT>>',
            name: 'centroids',
            type: 'LIST<LIST<FLOAT>>',
          },
          {
            isDeprecated: false,
            description: 'averageDistanceToCentroid :: FLOAT',
            name: 'averageDistanceToCentroid',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'averageSilhouette :: FLOAT',
            name: 'averageSilhouette',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.kmeans.write.estimate': {
        name: 'gds.kmeans.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.kmeans.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.knn.filtered.mutate': {
        name: 'gds.knn.filtered.mutate',
        description:
          'The k-nearest neighbor graph algorithm constructs relationships between nodes if the distance between two nodes is among the k nearest distances compared to other nodes. KNN computes distances based on the similarity of node properties. Filtered KNN extends this functionality, allowing filtering on source nodes and target nodes, respectively.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.knn.filtered.mutate(graphName :: STRING, configuration = {} :: MAP) :: (ranIterations :: INTEGER, nodePairsConsidered :: INTEGER, didConverge :: BOOLEAN, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, nodesCompared :: INTEGER, relationshipsWritten :: INTEGER, similarityDistribution :: MAP, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePairsConsidered :: INTEGER',
            name: 'nodePairsConsidered',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodesCompared :: INTEGER',
            name: 'nodesCompared',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarityDistribution :: MAP',
            name: 'similarityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.knn.filtered.mutate.estimate': {
        name: 'gds.knn.filtered.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.knn.filtered.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.knn.filtered.stats': {
        name: 'gds.knn.filtered.stats',
        description:
          'The k-nearest neighbor graph algorithm constructs relationships between nodes if the distance between two nodes is among the k nearest distances compared to other nodes. KNN computes distances based on the similarity of node properties. Filtered KNN extends this functionality, allowing filtering on source nodes and target nodes, respectively.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.knn.filtered.stats(graphName :: STRING, configuration = {} :: MAP) :: (ranIterations :: INTEGER, didConverge :: BOOLEAN, nodePairsConsidered :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, postProcessingMillis :: INTEGER, nodesCompared :: INTEGER, similarityPairs :: INTEGER, similarityDistribution :: MAP, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'nodePairsConsidered :: INTEGER',
            name: 'nodePairsConsidered',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodesCompared :: INTEGER',
            name: 'nodesCompared',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarityPairs :: INTEGER',
            name: 'similarityPairs',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarityDistribution :: MAP',
            name: 'similarityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.knn.filtered.stats.estimate': {
        name: 'gds.knn.filtered.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.knn.filtered.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.knn.filtered.stream': {
        name: 'gds.knn.filtered.stream',
        description:
          'The k-nearest neighbor graph algorithm constructs relationships between nodes if the distance between two nodes is among the k nearest distances compared to other nodes. KNN computes distances based on the similarity of node properties. Filtered KNN extends this functionality, allowing filtering on source nodes and target nodes, respectively.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.knn.filtered.stream(graphName :: STRING, configuration = {} :: MAP) :: (node1 :: INTEGER, node2 :: INTEGER, similarity :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'node1 :: INTEGER',
            name: 'node1',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'node2 :: INTEGER',
            name: 'node2',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarity :: FLOAT',
            name: 'similarity',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.knn.filtered.stream.estimate': {
        name: 'gds.knn.filtered.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.knn.filtered.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.knn.filtered.write': {
        name: 'gds.knn.filtered.write',
        description:
          'The k-nearest neighbor graph algorithm constructs relationships between nodes if the distance between two nodes is among the k nearest distances compared to other nodes. KNN computes distances based on the similarity of node properties. Filtered KNN extends this functionality, allowing filtering on source nodes and target nodes, respectively.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.knn.filtered.write(graphName :: STRING, configuration = {} :: MAP) :: (ranIterations :: INTEGER, didConverge :: BOOLEAN, nodePairsConsidered :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, writeMillis :: INTEGER, postProcessingMillis :: INTEGER, nodesCompared :: INTEGER, relationshipsWritten :: INTEGER, similarityDistribution :: MAP, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'nodePairsConsidered :: INTEGER',
            name: 'nodePairsConsidered',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodesCompared :: INTEGER',
            name: 'nodesCompared',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarityDistribution :: MAP',
            name: 'similarityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.knn.filtered.write.estimate': {
        name: 'gds.knn.filtered.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.knn.filtered.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.knn.mutate': {
        name: 'gds.knn.mutate',
        description:
          'The k-nearest neighbor graph algorithm constructs relationships between nodes if the distance between two nodes is among the k nearest distances compared to other nodes.KNN computes distances based on the similarity of node properties',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.knn.mutate(graphName :: STRING, configuration = {} :: MAP) :: (ranIterations :: INTEGER, nodePairsConsidered :: INTEGER, didConverge :: BOOLEAN, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, nodesCompared :: INTEGER, relationshipsWritten :: INTEGER, similarityDistribution :: MAP, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePairsConsidered :: INTEGER',
            name: 'nodePairsConsidered',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodesCompared :: INTEGER',
            name: 'nodesCompared',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarityDistribution :: MAP',
            name: 'similarityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.knn.mutate.estimate': {
        name: 'gds.knn.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.knn.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.knn.stats': {
        name: 'gds.knn.stats',
        description:
          'The k-nearest neighbor graph algorithm constructs relationships between nodes if the distance between two nodes is among the k nearest distances compared to other nodes.KNN computes distances based on the similarity of node properties',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.knn.stats(graphName :: STRING, configuration = {} :: MAP) :: (ranIterations :: INTEGER, didConverge :: BOOLEAN, nodePairsConsidered :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, postProcessingMillis :: INTEGER, nodesCompared :: INTEGER, similarityPairs :: INTEGER, similarityDistribution :: MAP, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'nodePairsConsidered :: INTEGER',
            name: 'nodePairsConsidered',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodesCompared :: INTEGER',
            name: 'nodesCompared',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarityPairs :: INTEGER',
            name: 'similarityPairs',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarityDistribution :: MAP',
            name: 'similarityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.knn.stats.estimate': {
        name: 'gds.knn.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.knn.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.knn.stream': {
        name: 'gds.knn.stream',
        description:
          'The k-nearest neighbor graph algorithm constructs relationships between nodes if the distance between two nodes is among the k nearest distances compared to other nodes.KNN computes distances based on the similarity of node properties',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.knn.stream(graphName :: STRING, configuration = {} :: MAP) :: (node1 :: INTEGER, node2 :: INTEGER, similarity :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'node1 :: INTEGER',
            name: 'node1',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'node2 :: INTEGER',
            name: 'node2',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarity :: FLOAT',
            name: 'similarity',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.knn.stream.estimate': {
        name: 'gds.knn.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.knn.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.knn.write': {
        name: 'gds.knn.write',
        description:
          'The k-nearest neighbor graph algorithm constructs relationships between nodes if the distance between two nodes is among the k nearest distances compared to other nodes.KNN computes distances based on the similarity of node properties',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.knn.write(graphName :: STRING, configuration = {} :: MAP) :: (ranIterations :: INTEGER, didConverge :: BOOLEAN, nodePairsConsidered :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, writeMillis :: INTEGER, postProcessingMillis :: INTEGER, nodesCompared :: INTEGER, relationshipsWritten :: INTEGER, similarityDistribution :: MAP, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'nodePairsConsidered :: INTEGER',
            name: 'nodePairsConsidered',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodesCompared :: INTEGER',
            name: 'nodesCompared',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarityDistribution :: MAP',
            name: 'similarityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.knn.write.estimate': {
        name: 'gds.knn.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.knn.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.labelPropagation.mutate': {
        name: 'gds.labelPropagation.mutate',
        description:
          'The Label Propagation algorithm is a fast algorithm for finding communities in a graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.labelPropagation.mutate(graphName :: STRING, configuration = {} :: MAP) :: (mutateMillis :: INTEGER, nodePropertiesWritten :: INTEGER, ranIterations :: INTEGER, didConverge :: BOOLEAN, communityCount :: INTEGER, communityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'communityCount :: INTEGER',
            name: 'communityCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityDistribution :: MAP',
            name: 'communityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.labelPropagation.mutate.estimate': {
        name: 'gds.labelPropagation.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.labelPropagation.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.labelPropagation.stats': {
        name: 'gds.labelPropagation.stats',
        description:
          'The Label Propagation algorithm is a fast algorithm for finding communities in a graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.labelPropagation.stats(graphName :: STRING, configuration = {} :: MAP) :: (ranIterations :: INTEGER, didConverge :: BOOLEAN, communityCount :: INTEGER, communityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'communityCount :: INTEGER',
            name: 'communityCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityDistribution :: MAP',
            name: 'communityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.labelPropagation.stats.estimate': {
        name: 'gds.labelPropagation.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.labelPropagation.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.labelPropagation.stream': {
        name: 'gds.labelPropagation.stream',
        description:
          'The Label Propagation algorithm is a fast algorithm for finding communities in a graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.labelPropagation.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, communityId :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityId :: INTEGER',
            name: 'communityId',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.labelPropagation.stream.estimate': {
        name: 'gds.labelPropagation.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.labelPropagation.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.labelPropagation.write': {
        name: 'gds.labelPropagation.write',
        description:
          'The Label Propagation algorithm is a fast algorithm for finding communities in a graph.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.labelPropagation.write(graphName :: STRING, configuration = {} :: MAP) :: (writeMillis :: INTEGER, nodePropertiesWritten :: INTEGER, ranIterations :: INTEGER, didConverge :: BOOLEAN, communityCount :: INTEGER, communityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'communityCount :: INTEGER',
            name: 'communityCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityDistribution :: MAP',
            name: 'communityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.labelPropagation.write.estimate': {
        name: 'gds.labelPropagation.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.labelPropagation.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.leiden.mutate': {
        name: 'gds.leiden.mutate',
        description:
          'Leiden is a community detection algorithm, which guarantees that communities are well connected',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.leiden.mutate(graphName :: STRING, configuration = {} :: MAP) :: (mutateMillis :: INTEGER, nodePropertiesWritten :: INTEGER, ranLevels :: INTEGER, didConverge :: BOOLEAN, nodeCount :: INTEGER, communityCount :: INTEGER, communityDistribution :: MAP, modularity :: FLOAT, modularities :: LIST<FLOAT>, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'ranLevels :: INTEGER',
            name: 'ranLevels',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityCount :: INTEGER',
            name: 'communityCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityDistribution :: MAP',
            name: 'communityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'modularity :: FLOAT',
            name: 'modularity',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'modularities :: LIST<FLOAT>',
            name: 'modularities',
            type: 'LIST<FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.leiden.mutate.estimate': {
        name: 'gds.leiden.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.leiden.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.leiden.stats': {
        name: 'gds.leiden.stats',
        description:
          'Leiden is a community detection algorithm, which guarantees that communities are well connected',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.leiden.stats(graphName :: STRING, configuration = {} :: MAP) :: (ranLevels :: INTEGER, didConverge :: BOOLEAN, nodeCount :: INTEGER, communityCount :: INTEGER, communityDistribution :: MAP, modularity :: FLOAT, modularities :: LIST<FLOAT>, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'ranLevels :: INTEGER',
            name: 'ranLevels',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityCount :: INTEGER',
            name: 'communityCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityDistribution :: MAP',
            name: 'communityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'modularity :: FLOAT',
            name: 'modularity',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'modularities :: LIST<FLOAT>',
            name: 'modularities',
            type: 'LIST<FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.leiden.stats.estimate': {
        name: 'gds.leiden.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.leiden.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.leiden.stream': {
        name: 'gds.leiden.stream',
        description:
          'Leiden is a community detection algorithm, which guarantees that communities are well connected',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.leiden.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, communityId :: INTEGER, intermediateCommunityIds :: LIST<INTEGER>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityId :: INTEGER',
            name: 'communityId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'intermediateCommunityIds :: LIST<INTEGER>',
            name: 'intermediateCommunityIds',
            type: 'LIST<INTEGER>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.leiden.stream.estimate': {
        name: 'gds.leiden.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.leiden.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.leiden.write': {
        name: 'gds.leiden.write',
        description:
          'Leiden is a community detection algorithm, which guarantees that communities are well connected',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.leiden.write(graphName :: STRING, configuration = {} :: MAP) :: (writeMillis :: INTEGER, nodePropertiesWritten :: INTEGER, ranLevels :: INTEGER, didConverge :: BOOLEAN, nodeCount :: INTEGER, communityCount :: INTEGER, communityDistribution :: MAP, modularity :: FLOAT, modularities :: LIST<FLOAT>, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'ranLevels :: INTEGER',
            name: 'ranLevels',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityCount :: INTEGER',
            name: 'communityCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityDistribution :: MAP',
            name: 'communityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'modularity :: FLOAT',
            name: 'modularity',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'modularities :: LIST<FLOAT>',
            name: 'modularities',
            type: 'LIST<FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.leiden.write.estimate': {
        name: 'gds.leiden.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.leiden.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.license.state': {
        name: 'gds.license.state',
        description: 'Returns details about the license state',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'gds.license.state() :: (isLicensed :: BOOLEAN, details :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'isLicensed :: BOOLEAN',
            name: 'isLicensed',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'details :: STRING',
            name: 'details',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.list': {
        name: 'gds.list',
        description:
          'CALL gds.list - lists all algorithm procedures, their description and signature',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'gds.list(name =  :: STRING) :: (name :: STRING, description :: STRING, signature :: STRING, type :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'name =  :: STRING',
            name: 'name',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'description :: STRING',
            name: 'description',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'signature :: STRING',
            name: 'signature',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'type :: STRING',
            name: 'type',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.listProgress': {
        name: 'gds.listProgress',
        description: 'List progress events for currently running tasks.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'gds.listProgress(jobId =  :: STRING) :: (username :: STRING, jobId :: STRING, taskName :: STRING, progress :: STRING, progressBar :: STRING, status :: STRING, timeStarted :: LOCAL TIME, elapsedTime :: STRING)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'jobId =  :: STRING',
            name: 'jobId',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'username :: STRING',
            name: 'username',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'jobId :: STRING',
            name: 'jobId',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'taskName :: STRING',
            name: 'taskName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'progress :: STRING',
            name: 'progress',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'progressBar :: STRING',
            name: 'progressBar',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'status :: STRING',
            name: 'status',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'timeStarted :: LOCAL TIME',
            name: 'timeStarted',
            type: 'LOCAL TIME',
          },
          {
            isDeprecated: false,
            description: 'elapsedTime :: STRING',
            name: 'elapsedTime',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.localClusteringCoefficient.mutate': {
        name: 'gds.localClusteringCoefficient.mutate',
        description:
          'The local clustering coefficient is a metric quantifying how connected the neighborhood of a node is.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.localClusteringCoefficient.mutate(graphName :: STRING, configuration = {} :: MAP) :: (mutateMillis :: INTEGER, nodePropertiesWritten :: INTEGER, averageClusteringCoefficient :: FLOAT, nodeCount :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'averageClusteringCoefficient :: FLOAT',
            name: 'averageClusteringCoefficient',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.localClusteringCoefficient.mutate.estimate': {
        name: 'gds.localClusteringCoefficient.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.localClusteringCoefficient.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.localClusteringCoefficient.stats': {
        name: 'gds.localClusteringCoefficient.stats',
        description:
          'The local clustering coefficient is a metric quantifying how connected the neighborhood of a node is.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.localClusteringCoefficient.stats(graphName :: STRING, configuration = {} :: MAP) :: (averageClusteringCoefficient :: FLOAT, nodeCount :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'averageClusteringCoefficient :: FLOAT',
            name: 'averageClusteringCoefficient',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.localClusteringCoefficient.stats.estimate': {
        name: 'gds.localClusteringCoefficient.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.localClusteringCoefficient.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.localClusteringCoefficient.stream': {
        name: 'gds.localClusteringCoefficient.stream',
        description:
          'The local clustering coefficient is a metric quantifying how connected the neighborhood of a node is.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.localClusteringCoefficient.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, localClusteringCoefficient :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'localClusteringCoefficient :: FLOAT',
            name: 'localClusteringCoefficient',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.localClusteringCoefficient.stream.estimate': {
        name: 'gds.localClusteringCoefficient.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.localClusteringCoefficient.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.localClusteringCoefficient.write': {
        name: 'gds.localClusteringCoefficient.write',
        description:
          'The local clustering coefficient is a metric quantifying how connected the neighborhood of a node is.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.localClusteringCoefficient.write(graphName :: STRING, configuration = {} :: MAP) :: (writeMillis :: INTEGER, nodePropertiesWritten :: INTEGER, averageClusteringCoefficient :: FLOAT, nodeCount :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'averageClusteringCoefficient :: FLOAT',
            name: 'averageClusteringCoefficient',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.localClusteringCoefficient.write.estimate': {
        name: 'gds.localClusteringCoefficient.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.localClusteringCoefficient.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.louvain.mutate': {
        name: 'gds.louvain.mutate',
        description:
          'The Louvain method for community detection is an algorithm for detecting communities in networks.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.louvain.mutate(graphName :: STRING, configuration = {} :: MAP) :: (mutateMillis :: INTEGER, nodePropertiesWritten :: INTEGER, modularity :: FLOAT, modularities :: LIST<FLOAT>, ranLevels :: INTEGER, communityCount :: INTEGER, communityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'modularity :: FLOAT',
            name: 'modularity',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'modularities :: LIST<FLOAT>',
            name: 'modularities',
            type: 'LIST<FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'ranLevels :: INTEGER',
            name: 'ranLevels',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityCount :: INTEGER',
            name: 'communityCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityDistribution :: MAP',
            name: 'communityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.louvain.mutate.estimate': {
        name: 'gds.louvain.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.louvain.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.louvain.stats': {
        name: 'gds.louvain.stats',
        description:
          'The Louvain method for community detection is an algorithm for detecting communities in networks.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.louvain.stats(graphName :: STRING, configuration = {} :: MAP) :: (modularity :: FLOAT, modularities :: LIST<FLOAT>, ranLevels :: INTEGER, communityCount :: INTEGER, communityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'modularity :: FLOAT',
            name: 'modularity',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'modularities :: LIST<FLOAT>',
            name: 'modularities',
            type: 'LIST<FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'ranLevels :: INTEGER',
            name: 'ranLevels',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityCount :: INTEGER',
            name: 'communityCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityDistribution :: MAP',
            name: 'communityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.louvain.stats.estimate': {
        name: 'gds.louvain.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.louvain.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.louvain.stream': {
        name: 'gds.louvain.stream',
        description:
          'The Louvain method for community detection is an algorithm for detecting communities in networks.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.louvain.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, communityId :: INTEGER, intermediateCommunityIds :: LIST<INTEGER>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityId :: INTEGER',
            name: 'communityId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'intermediateCommunityIds :: LIST<INTEGER>',
            name: 'intermediateCommunityIds',
            type: 'LIST<INTEGER>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.louvain.stream.estimate': {
        name: 'gds.louvain.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.louvain.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.louvain.write': {
        name: 'gds.louvain.write',
        description:
          'The Louvain method for community detection is an algorithm for detecting communities in networks.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.louvain.write(graphName :: STRING, configuration = {} :: MAP) :: (writeMillis :: INTEGER, nodePropertiesWritten :: INTEGER, modularity :: FLOAT, modularities :: LIST<FLOAT>, ranLevels :: INTEGER, communityCount :: INTEGER, communityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'modularity :: FLOAT',
            name: 'modularity',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'modularities :: LIST<FLOAT>',
            name: 'modularities',
            type: 'LIST<FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'ranLevels :: INTEGER',
            name: 'ranLevels',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityCount :: INTEGER',
            name: 'communityCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityDistribution :: MAP',
            name: 'communityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.louvain.write.estimate': {
        name: 'gds.louvain.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.louvain.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.maxkcut.mutate': {
        name: 'gds.maxkcut.mutate',
        description:
          'Approximate Maximum k-cut maps each node into one of k disjoint communities trying to maximize the sum of weights of relationships between these communities.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.maxkcut.mutate(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, cutCost :: FLOAT, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'cutCost :: FLOAT',
            name: 'cutCost',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.maxkcut.mutate.estimate': {
        name: 'gds.maxkcut.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.maxkcut.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.maxkcut.stream': {
        name: 'gds.maxkcut.stream',
        description:
          'Approximate Maximum k-cut maps each node into one of k disjoint communities trying to maximize the sum of weights of relationships between these communities.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.maxkcut.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, communityId :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityId :: INTEGER',
            name: 'communityId',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.maxkcut.stream.estimate': {
        name: 'gds.maxkcut.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.maxkcut.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.memory.list': {
        name: 'gds.memory.list',
        description:
          'List memory for currently running tasks or stored graphs.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'gds.memory.list() :: (user :: STRING, name :: STRING, entity :: STRING, memoryInBytes :: INTEGER)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'user :: STRING',
            name: 'user',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'name :: STRING',
            name: 'name',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'entity :: STRING',
            name: 'entity',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'memoryInBytes :: INTEGER',
            name: 'memoryInBytes',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.memory.summary': {
        name: 'gds.memory.summary',
        description:
          'List memory for currently running tasks or stored graphs.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'gds.memory.summary() :: (user :: STRING, totalGraphsMemory :: INTEGER, totalTasksMemory :: INTEGER)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'user :: STRING',
            name: 'user',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'totalGraphsMemory :: INTEGER',
            name: 'totalGraphsMemory',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'totalTasksMemory :: INTEGER',
            name: 'totalTasksMemory',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.model.delete': {
        name: 'gds.model.delete',
        description: 'Deletes a stored model from disk.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.model.delete(modelName :: STRING) :: (modelName :: STRING, deleteMillis :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'modelName :: STRING',
            name: 'modelName',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'modelName :: STRING',
            name: 'modelName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'deleteMillis :: INTEGER',
            name: 'deleteMillis',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.model.drop': {
        name: 'gds.model.drop',
        description:
          'Drops a loaded model and frees up the resources it occupies.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.model.drop(modelName :: STRING, failIfMissing = true :: BOOLEAN) :: (modelName :: STRING, modelType :: STRING, modelInfo :: MAP, creationTime :: ZONED DATETIME, trainConfig :: MAP, graphSchema :: MAP, loaded :: BOOLEAN, stored :: BOOLEAN, published :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'modelName :: STRING',
            name: 'modelName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=true, type=BOOLEAN}',
            description: 'failIfMissing = true :: BOOLEAN',
            name: 'failIfMissing',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'modelName :: STRING',
            name: 'modelName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'modelType :: STRING',
            name: 'modelType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'modelInfo :: MAP',
            name: 'modelInfo',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'creationTime :: ZONED DATETIME',
            name: 'creationTime',
            type: 'ZONED DATETIME',
          },
          {
            isDeprecated: false,
            description: 'trainConfig :: MAP',
            name: 'trainConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'graphSchema :: MAP',
            name: 'graphSchema',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'loaded :: BOOLEAN',
            name: 'loaded',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'stored :: BOOLEAN',
            name: 'stored',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'published :: BOOLEAN',
            name: 'published',
            type: 'BOOLEAN',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.model.exists': {
        name: 'gds.model.exists',
        description: 'Checks if a given model exists in the model catalog.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.model.exists(modelName :: STRING) :: (modelName :: STRING, modelType :: STRING, exists :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'modelName :: STRING',
            name: 'modelName',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'modelName :: STRING',
            name: 'modelName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'modelType :: STRING',
            name: 'modelType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'exists :: BOOLEAN',
            name: 'exists',
            type: 'BOOLEAN',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.model.list': {
        name: 'gds.model.list',
        description: 'Lists all models contained in the model catalog.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.model.list(modelName = __NO_VALUE :: STRING) :: (modelName :: STRING, modelType :: STRING, modelInfo :: MAP, creationTime :: ZONED DATETIME, trainConfig :: MAP, graphSchema :: MAP, loaded :: BOOLEAN, stored :: BOOLEAN, published :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=__NO_VALUE, type=STRING}',
            description: 'modelName = __NO_VALUE :: STRING',
            name: 'modelName',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'modelName :: STRING',
            name: 'modelName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'modelType :: STRING',
            name: 'modelType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'modelInfo :: MAP',
            name: 'modelInfo',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'creationTime :: ZONED DATETIME',
            name: 'creationTime',
            type: 'ZONED DATETIME',
          },
          {
            isDeprecated: false,
            description: 'trainConfig :: MAP',
            name: 'trainConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'graphSchema :: MAP',
            name: 'graphSchema',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'loaded :: BOOLEAN',
            name: 'loaded',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'stored :: BOOLEAN',
            name: 'stored',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'published :: BOOLEAN',
            name: 'published',
            type: 'BOOLEAN',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.model.load': {
        name: 'gds.model.load',
        description: 'Load a stored model into main memory.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.model.load(modelName :: STRING) :: (modelName :: STRING, loadMillis :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'modelName :: STRING',
            name: 'modelName',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'modelName :: STRING',
            name: 'modelName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'loadMillis :: INTEGER',
            name: 'loadMillis',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.model.publish': {
        name: 'gds.model.publish',
        description: 'Make a trained model accessible by all users',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.model.publish(modelName :: STRING) :: (modelName :: STRING, modelType :: STRING, modelInfo :: MAP, creationTime :: ZONED DATETIME, trainConfig :: MAP, graphSchema :: MAP, loaded :: BOOLEAN, stored :: BOOLEAN, published :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'modelName :: STRING',
            name: 'modelName',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'modelName :: STRING',
            name: 'modelName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'modelType :: STRING',
            name: 'modelType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'modelInfo :: MAP',
            name: 'modelInfo',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'creationTime :: ZONED DATETIME',
            name: 'creationTime',
            type: 'ZONED DATETIME',
          },
          {
            isDeprecated: false,
            description: 'trainConfig :: MAP',
            name: 'trainConfig',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'graphSchema :: MAP',
            name: 'graphSchema',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'loaded :: BOOLEAN',
            name: 'loaded',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'stored :: BOOLEAN',
            name: 'stored',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'published :: BOOLEAN',
            name: 'published',
            type: 'BOOLEAN',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.model.store': {
        name: 'gds.model.store',
        description: 'Store the selected model to disk.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.model.store(modelName :: STRING, failIfUnsupported = true :: BOOLEAN) :: (modelName :: STRING, storeMillis :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'modelName :: STRING',
            name: 'modelName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=true, type=BOOLEAN}',
            description: 'failIfUnsupported = true :: BOOLEAN',
            name: 'failIfUnsupported',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'modelName :: STRING',
            name: 'modelName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'storeMillis :: INTEGER',
            name: 'storeMillis',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.modularity.stats': {
        name: 'gds.modularity.stats',
        description:
          'The Modularity procedure computes the modularity scores for a given set of communities',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.modularity.stats(graphName :: STRING, configuration = {} :: MAP) :: (nodeCount :: INTEGER, relationshipCount :: INTEGER, communityCount :: INTEGER, modularity :: FLOAT, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityCount :: INTEGER',
            name: 'communityCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'modularity :: FLOAT',
            name: 'modularity',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.modularity.stats.estimate': {
        name: 'gds.modularity.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.modularity.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.modularity.stream': {
        name: 'gds.modularity.stream',
        description:
          'The Modularity procedure computes the modularity scores for a given set of communities',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.modularity.stream(graphName :: STRING, configuration = {} :: MAP) :: (communityId :: INTEGER, modularity :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'communityId :: INTEGER',
            name: 'communityId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'modularity :: FLOAT',
            name: 'modularity',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.modularity.stream.estimate': {
        name: 'gds.modularity.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.modularity.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.modularityOptimization.mutate': {
        name: 'gds.modularityOptimization.mutate',
        description:
          'The Modularity Optimization algorithm groups the nodes in the graph by optimizing the graphs modularity.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.modularityOptimization.mutate(graphName :: STRING, configuration = {} :: MAP) :: (preProcessingMillis :: INTEGER, computeMillis :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, nodes :: INTEGER, didConverge :: BOOLEAN, ranIterations :: INTEGER, modularity :: FLOAT, communityCount :: INTEGER, communityDistribution :: MAP, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodes :: INTEGER',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'modularity :: FLOAT',
            name: 'modularity',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'communityCount :: INTEGER',
            name: 'communityCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityDistribution :: MAP',
            name: 'communityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.modularityOptimization.mutate.estimate': {
        name: 'gds.modularityOptimization.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.modularityOptimization.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.modularityOptimization.stats': {
        name: 'gds.modularityOptimization.stats',
        description:
          'The Modularity Optimization algorithm groups the nodes in the graph by optimizing the graphs modularity.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.modularityOptimization.stats(graphName :: STRING, configuration = {} :: MAP) :: (preProcessingMillis :: INTEGER, computeMillis :: INTEGER, postProcessingMillis :: INTEGER, nodes :: INTEGER, didConverge :: BOOLEAN, ranIterations :: INTEGER, modularity :: FLOAT, communityCount :: INTEGER, communityDistribution :: MAP, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodes :: INTEGER',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'modularity :: FLOAT',
            name: 'modularity',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'communityCount :: INTEGER',
            name: 'communityCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityDistribution :: MAP',
            name: 'communityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.modularityOptimization.stats.estimate': {
        name: 'gds.modularityOptimization.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.modularityOptimization.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.modularityOptimization.stream': {
        name: 'gds.modularityOptimization.stream',
        description:
          'The Modularity Optimization algorithm groups the nodes in the graph by optimizing the graphs modularity.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.modularityOptimization.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, communityId :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityId :: INTEGER',
            name: 'communityId',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.modularityOptimization.stream.estimate': {
        name: 'gds.modularityOptimization.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.modularityOptimization.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.modularityOptimization.write': {
        name: 'gds.modularityOptimization.write',
        description:
          'The Modularity Optimization algorithm groups the nodes in the graph by optimizing the graphs modularity.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.modularityOptimization.write(graphName :: STRING, configuration = {} :: MAP) :: (preProcessingMillis :: INTEGER, computeMillis :: INTEGER, writeMillis :: INTEGER, postProcessingMillis :: INTEGER, nodes :: INTEGER, didConverge :: BOOLEAN, ranIterations :: INTEGER, modularity :: FLOAT, communityCount :: INTEGER, communityDistribution :: MAP, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodes :: INTEGER',
            name: 'nodes',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'modularity :: FLOAT',
            name: 'modularity',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'communityCount :: INTEGER',
            name: 'communityCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'communityDistribution :: MAP',
            name: 'communityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.modularityOptimization.write.estimate': {
        name: 'gds.modularityOptimization.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.modularityOptimization.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.node2vec.mutate': {
        name: 'gds.node2vec.mutate',
        description:
          'The Node2Vec algorithm computes embeddings for nodes based on random walks.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.node2vec.mutate(graphName :: STRING, configuration = {} :: MAP) :: (nodeCount :: INTEGER, nodePropertiesWritten :: INTEGER, lossPerIteration :: LIST<FLOAT>, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'lossPerIteration :: LIST<FLOAT>',
            name: 'lossPerIteration',
            type: 'LIST<FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.node2vec.mutate.estimate': {
        name: 'gds.node2vec.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.node2vec.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.node2vec.stream': {
        name: 'gds.node2vec.stream',
        description:
          'The Node2Vec algorithm computes embeddings for nodes based on random walks.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.node2vec.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, embedding :: LIST<FLOAT>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'embedding :: LIST<FLOAT>',
            name: 'embedding',
            type: 'LIST<FLOAT>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.node2vec.stream.estimate': {
        name: 'gds.node2vec.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.node2vec.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.node2vec.write': {
        name: 'gds.node2vec.write',
        description:
          'The Node2Vec algorithm computes embeddings for nodes based on random walks.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.node2vec.write(graphName :: STRING, configuration = {} :: MAP) :: (nodeCount :: INTEGER, nodePropertiesWritten :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, writeMillis :: INTEGER, configuration :: MAP, lossPerIteration :: LIST<FLOAT>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'lossPerIteration :: LIST<FLOAT>',
            name: 'lossPerIteration',
            type: 'LIST<FLOAT>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.node2vec.write.estimate': {
        name: 'gds.node2vec.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.node2vec.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.nodeSimilarity.filtered.mutate': {
        name: 'gds.nodeSimilarity.filtered.mutate',
        description:
          'The Filtered Node Similarity algorithm compares a set of nodes based on the nodes they are connected to. Two nodes are considered similar if they share many of the same neighbors. The algorithm computes pair-wise similarities based on Jaccard or Overlap metrics. The filtered variant supports limiting which nodes to compare via source and target node filters.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.nodeSimilarity.filtered.mutate(graphName :: STRING, configuration = {} :: MAP) :: (preProcessingMillis :: INTEGER, computeMillis :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, nodesCompared :: INTEGER, relationshipsWritten :: INTEGER, similarityDistribution :: MAP, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodesCompared :: INTEGER',
            name: 'nodesCompared',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarityDistribution :: MAP',
            name: 'similarityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.nodeSimilarity.filtered.mutate.estimate': {
        name: 'gds.nodeSimilarity.filtered.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.nodeSimilarity.filtered.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.nodeSimilarity.filtered.stats': {
        name: 'gds.nodeSimilarity.filtered.stats',
        description:
          'The Filtered Node Similarity algorithm compares a set of nodes based on the nodes they are connected to. Two nodes are considered similar if they share many of the same neighbors. The algorithm computes pair-wise similarities based on Jaccard or Overlap metrics. The filtered variant supports limiting which nodes to compare via source and target node filters.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.nodeSimilarity.filtered.stats(graphName :: STRING, configuration = {} :: MAP) :: (preProcessingMillis :: INTEGER, computeMillis :: INTEGER, postProcessingMillis :: INTEGER, nodesCompared :: INTEGER, similarityPairs :: INTEGER, similarityDistribution :: MAP, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodesCompared :: INTEGER',
            name: 'nodesCompared',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarityPairs :: INTEGER',
            name: 'similarityPairs',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarityDistribution :: MAP',
            name: 'similarityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.nodeSimilarity.filtered.stats.estimate': {
        name: 'gds.nodeSimilarity.filtered.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.nodeSimilarity.filtered.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.nodeSimilarity.filtered.stream': {
        name: 'gds.nodeSimilarity.filtered.stream',
        description:
          'The Filtered Node Similarity algorithm compares a set of nodes based on the nodes they are connected to. Two nodes are considered similar if they share many of the same neighbors. The algorithm computes pair-wise similarities based on Jaccard or Overlap metrics. The filtered variant supports limiting which nodes to compare via source and target node filters.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.nodeSimilarity.filtered.stream(graphName :: STRING, configuration = {} :: MAP) :: (node1 :: INTEGER, node2 :: INTEGER, similarity :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'node1 :: INTEGER',
            name: 'node1',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'node2 :: INTEGER',
            name: 'node2',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarity :: FLOAT',
            name: 'similarity',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.nodeSimilarity.filtered.stream.estimate': {
        name: 'gds.nodeSimilarity.filtered.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.nodeSimilarity.filtered.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.nodeSimilarity.filtered.write': {
        name: 'gds.nodeSimilarity.filtered.write',
        description:
          'The Filtered Node Similarity algorithm compares a set of nodes based on the nodes they are connected to. Two nodes are considered similar if they share many of the same neighbors. The algorithm computes pair-wise similarities based on Jaccard or Overlap metrics. The filtered variant supports limiting which nodes to compare via source and target node filters.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.nodeSimilarity.filtered.write(graphName :: STRING, configuration = {} :: MAP) :: (preProcessingMillis :: INTEGER, computeMillis :: INTEGER, writeMillis :: INTEGER, postProcessingMillis :: INTEGER, nodesCompared :: INTEGER, relationshipsWritten :: INTEGER, similarityDistribution :: MAP, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodesCompared :: INTEGER',
            name: 'nodesCompared',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarityDistribution :: MAP',
            name: 'similarityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.nodeSimilarity.filtered.write.estimate': {
        name: 'gds.nodeSimilarity.filtered.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.nodeSimilarity.filtered.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.nodeSimilarity.mutate': {
        name: 'gds.nodeSimilarity.mutate',
        description:
          'The Node Similarity algorithm compares a set of nodes based on the nodes they are connected to. Two nodes are considered similar if they share many of the same neighbors. Node Similarity computes pair-wise similarities based on the Jaccard metric.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.nodeSimilarity.mutate(graphName :: STRING, configuration = {} :: MAP) :: (preProcessingMillis :: INTEGER, computeMillis :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, nodesCompared :: INTEGER, relationshipsWritten :: INTEGER, similarityDistribution :: MAP, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodesCompared :: INTEGER',
            name: 'nodesCompared',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarityDistribution :: MAP',
            name: 'similarityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.nodeSimilarity.mutate.estimate': {
        name: 'gds.nodeSimilarity.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.nodeSimilarity.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.nodeSimilarity.stats': {
        name: 'gds.nodeSimilarity.stats',
        description:
          'The Node Similarity algorithm compares a set of nodes based on the nodes they are connected to. Two nodes are considered similar if they share many of the same neighbors. Node Similarity computes pair-wise similarities based on the Jaccard metric.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.nodeSimilarity.stats(graphName :: STRING, configuration = {} :: MAP) :: (preProcessingMillis :: INTEGER, computeMillis :: INTEGER, postProcessingMillis :: INTEGER, nodesCompared :: INTEGER, similarityPairs :: INTEGER, similarityDistribution :: MAP, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodesCompared :: INTEGER',
            name: 'nodesCompared',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarityPairs :: INTEGER',
            name: 'similarityPairs',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarityDistribution :: MAP',
            name: 'similarityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.nodeSimilarity.stats.estimate': {
        name: 'gds.nodeSimilarity.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.nodeSimilarity.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.nodeSimilarity.stream': {
        name: 'gds.nodeSimilarity.stream',
        description:
          'The Node Similarity algorithm compares a set of nodes based on the nodes they are connected to. Two nodes are considered similar if they share many of the same neighbors. Node Similarity computes pair-wise similarities based on the Jaccard metric.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.nodeSimilarity.stream(graphName :: STRING, configuration = {} :: MAP) :: (node1 :: INTEGER, node2 :: INTEGER, similarity :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'node1 :: INTEGER',
            name: 'node1',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'node2 :: INTEGER',
            name: 'node2',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarity :: FLOAT',
            name: 'similarity',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.nodeSimilarity.stream.estimate': {
        name: 'gds.nodeSimilarity.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.nodeSimilarity.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.nodeSimilarity.write': {
        name: 'gds.nodeSimilarity.write',
        description:
          'The Node Similarity algorithm compares a set of nodes based on the nodes they are connected to. Two nodes are considered similar if they share many of the same neighbors. Node Similarity computes pair-wise similarities based on the Jaccard metric.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.nodeSimilarity.write(graphName :: STRING, configuration = {} :: MAP) :: (preProcessingMillis :: INTEGER, computeMillis :: INTEGER, writeMillis :: INTEGER, postProcessingMillis :: INTEGER, nodesCompared :: INTEGER, relationshipsWritten :: INTEGER, similarityDistribution :: MAP, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodesCompared :: INTEGER',
            name: 'nodesCompared',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'similarityDistribution :: MAP',
            name: 'similarityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.nodeSimilarity.write.estimate': {
        name: 'gds.nodeSimilarity.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.nodeSimilarity.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.pageRank.mutate': {
        name: 'gds.pageRank.mutate',
        description:
          'Page Rank is an algorithm that measures the transitive influence or connectivity of nodes.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.pageRank.mutate(graphName :: STRING, configuration = {} :: MAP) :: (mutateMillis :: INTEGER, nodePropertiesWritten :: INTEGER, ranIterations :: INTEGER, didConverge :: BOOLEAN, centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.pageRank.mutate.estimate': {
        name: 'gds.pageRank.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.pageRank.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.pageRank.stats': {
        name: 'gds.pageRank.stats',
        description:
          'Page Rank is an algorithm that measures the transitive influence or connectivity of nodes.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.pageRank.stats(graphName :: STRING, configuration = {} :: MAP) :: (ranIterations :: INTEGER, didConverge :: BOOLEAN, centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.pageRank.stats.estimate': {
        name: 'gds.pageRank.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.pageRank.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.pageRank.stream': {
        name: 'gds.pageRank.stream',
        description:
          'Page Rank is an algorithm that measures the transitive influence or connectivity of nodes.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.pageRank.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, score :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'score :: FLOAT',
            name: 'score',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.pageRank.stream.estimate': {
        name: 'gds.pageRank.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.pageRank.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.pageRank.write': {
        name: 'gds.pageRank.write',
        description:
          'Page Rank is an algorithm that measures the transitive influence or connectivity of nodes.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.pageRank.write(graphName :: STRING, configuration = {} :: MAP) :: (writeMillis :: INTEGER, nodePropertiesWritten :: INTEGER, ranIterations :: INTEGER, didConverge :: BOOLEAN, centralityDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'centralityDistribution :: MAP',
            name: 'centralityDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.pageRank.write.estimate': {
        name: 'gds.pageRank.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.pageRank.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.pipeline.drop': {
        name: 'gds.pipeline.drop',
        description: 'Drops a pipeline and frees up the resources it occupies.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.pipeline.drop(pipelineName :: STRING, failIfMissing = true :: BOOLEAN) :: (pipelineInfo :: MAP, pipelineName :: STRING, pipelineType :: STRING, creationTime :: ZONED DATETIME)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=true, type=BOOLEAN}',
            description: 'failIfMissing = true :: BOOLEAN',
            name: 'failIfMissing',
            type: 'BOOLEAN',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'pipelineInfo :: MAP',
            name: 'pipelineInfo',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'pipelineType :: STRING',
            name: 'pipelineType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'creationTime :: ZONED DATETIME',
            name: 'creationTime',
            type: 'ZONED DATETIME',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.pipeline.exists': {
        name: 'gds.pipeline.exists',
        description:
          'Checks if a given pipeline exists in the pipeline catalog.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.pipeline.exists(pipelineName :: STRING) :: (pipelineName :: STRING, pipelineType :: STRING, exists :: BOOLEAN)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'pipelineType :: STRING',
            name: 'pipelineType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'exists :: BOOLEAN',
            name: 'exists',
            type: 'BOOLEAN',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.pipeline.list': {
        name: 'gds.pipeline.list',
        description: 'Lists all pipelines contained in the pipeline catalog.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.pipeline.list(pipelineName = __NO_VALUE :: STRING) :: (pipelineInfo :: MAP, pipelineName :: STRING, pipelineType :: STRING, creationTime :: ZONED DATETIME)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=__NO_VALUE, type=STRING}',
            description: 'pipelineName = __NO_VALUE :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'pipelineInfo :: MAP',
            name: 'pipelineInfo',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'pipelineName :: STRING',
            name: 'pipelineName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'pipelineType :: STRING',
            name: 'pipelineType',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'creationTime :: ZONED DATETIME',
            name: 'creationTime',
            type: 'ZONED DATETIME',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.prizeSteinerTree.stream': {
        name: 'gds.prizeSteinerTree.stream',
        description:
          "The prize collecting steiner tree algorithm accepts a weighted undirected graph where each node has a prize property. It then attempts to find a spanning tree that maximizes the sum of prizes of the nodes in the treewhile minimizing the sum of weights for the tree's relationships as well as the sum of prizes for nodes outside the tree.",
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.prizeSteinerTree.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, parentId :: INTEGER, weight :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'parentId :: INTEGER',
            name: 'parentId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'weight :: FLOAT',
            name: 'weight',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.prizeSteinerTree.stream.estimate': {
        name: 'gds.prizeSteinerTree.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.prizeSteinerTree.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.randomWalk.mutate': {
        name: 'gds.randomWalk.mutate',
        description:
          'Random Walk is an algorithm that provides random paths in a graph. It’s similar to how a drunk person traverses a city.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.randomWalk.mutate(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.randomWalk.mutate.estimate': {
        name: 'gds.randomWalk.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.randomWalk.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.randomWalk.stats': {
        name: 'gds.randomWalk.stats',
        description:
          'Random Walk is an algorithm that provides random paths in a graph. It’s similar to how a drunk person traverses a city.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.randomWalk.stats(graphName :: STRING, configuration = {} :: MAP) :: (preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.randomWalk.stats.estimate': {
        name: 'gds.randomWalk.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.randomWalk.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.randomWalk.stream': {
        name: 'gds.randomWalk.stream',
        description:
          'Random Walk is an algorithm that provides random paths in a graph. It’s similar to how a drunk person traverses a city.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.randomWalk.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeIds :: LIST<INTEGER>, path :: PATH)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeIds :: LIST<INTEGER>',
            name: 'nodeIds',
            type: 'LIST<INTEGER>',
          },
          {
            isDeprecated: false,
            description: 'path :: PATH',
            name: 'path',
            type: 'PATH',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.randomWalk.stream.estimate': {
        name: 'gds.randomWalk.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.randomWalk.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.restore': {
        name: 'gds.restore',
        description: 'The restore procedure reads graphs and models from disk.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'gds.restore(configuration = {} :: MAP) :: (restoredGraph :: STRING, restoredModel :: STRING, status :: STRING, restoreMillis :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'restoredGraph :: STRING',
            name: 'restoredGraph',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'restoredModel :: STRING',
            name: 'restoredModel',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'status :: STRING',
            name: 'status',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'restoreMillis :: INTEGER',
            name: 'restoreMillis',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.scaleProperties.mutate': {
        name: 'gds.scaleProperties.mutate',
        description: 'Scale node properties',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'gds.scaleProperties.mutate(graphName :: STRING, configuration = {} :: MAP) :: (scalerStatistics :: MAP, nodePropertiesWritten :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'scalerStatistics :: MAP',
            name: 'scalerStatistics',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.scaleProperties.mutate.estimate': {
        name: 'gds.scaleProperties.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.scaleProperties.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.scaleProperties.stats': {
        name: 'gds.scaleProperties.stats',
        description: 'Scale node properties',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.scaleProperties.stats(graphName :: STRING, configuration = {} :: MAP) :: (scalerStatistics :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'scalerStatistics :: MAP',
            name: 'scalerStatistics',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.scaleProperties.stats.estimate': {
        name: 'gds.scaleProperties.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.scaleProperties.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.scaleProperties.stream': {
        name: 'gds.scaleProperties.stream',
        description: 'Scale node properties',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'gds.scaleProperties.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, scaledProperty :: LIST<FLOAT>)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'scaledProperty :: LIST<FLOAT>',
            name: 'scaledProperty',
            type: 'LIST<FLOAT>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.scaleProperties.stream.estimate': {
        name: 'gds.scaleProperties.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.scaleProperties.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.scaleProperties.write': {
        name: 'gds.scaleProperties.write',
        description: 'Scale node properties',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.scaleProperties.write(graphName :: STRING, configuration = {} :: MAP) :: (nodePropertiesWritten :: INTEGER, scalerStatistics :: MAP, writeMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'scalerStatistics :: MAP',
            name: 'scalerStatistics',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.scaleProperties.write.estimate': {
        name: 'gds.scaleProperties.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.scaleProperties.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.scc.mutate': {
        name: 'gds.scc.mutate',
        description:
          'The SCC algorithm finds sets of connected nodes in an directed graph, where all nodes in the same set form a connected component.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.scc.mutate(graphName :: STRING, configuration = {} :: MAP) :: (componentCount :: INTEGER, componentDistribution :: MAP, nodePropertiesWritten :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'componentCount :: INTEGER',
            name: 'componentCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'componentDistribution :: MAP',
            name: 'componentDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.scc.mutate.estimate': {
        name: 'gds.scc.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.scc.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.scc.stats': {
        name: 'gds.scc.stats',
        description:
          'The SCC algorithm finds sets of connected nodes in an directed graph, where all nodes in the same set form a connected component.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.scc.stats(graphName :: STRING, configuration = {} :: MAP) :: (componentCount :: INTEGER, componentDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'componentCount :: INTEGER',
            name: 'componentCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'componentDistribution :: MAP',
            name: 'componentDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.scc.stats.estimate': {
        name: 'gds.scc.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.scc.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.scc.stream': {
        name: 'gds.scc.stream',
        description:
          'The SCC algorithm finds sets of connected nodes in an directed graph, where all nodes in the same set form a connected component.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.scc.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, componentId :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'componentId :: INTEGER',
            name: 'componentId',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.scc.stream.estimate': {
        name: 'gds.scc.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.scc.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.scc.write': {
        name: 'gds.scc.write',
        description:
          'The SCC algorithm finds sets of connected nodes in an directed graph, where all nodes in the same set form a connected component.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.scc.write(graphName :: STRING, configuration = {} :: MAP) :: (componentCount :: INTEGER, componentDistribution :: MAP, nodePropertiesWritten :: INTEGER, writeMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'componentCount :: INTEGER',
            name: 'componentCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'componentDistribution :: MAP',
            name: 'componentDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.scc.write.estimate': {
        name: 'gds.scc.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.scc.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.shortestPath.astar.mutate': {
        name: 'gds.shortestPath.astar.mutate',
        description:
          'The A* shortest path algorithm computes the shortest path between a pair of nodes. It uses the relationship weight property to compare path lengths. In addition, this implementation uses the haversine distance as a heuristic to converge faster.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.shortestPath.astar.mutate(graphName :: STRING, configuration = {} :: MAP) :: (relationshipsWritten :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.shortestPath.astar.mutate.estimate': {
        name: 'gds.shortestPath.astar.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.shortestPath.astar.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.shortestPath.astar.stream': {
        name: 'gds.shortestPath.astar.stream',
        description:
          'The A* shortest path algorithm computes the shortest path between a pair of nodes. It uses the relationship weight property to compare path lengths. In addition, this implementation uses the haversine distance as a heuristic to converge faster.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.shortestPath.astar.stream(graphName :: STRING, configuration = {} :: MAP) :: (index :: INTEGER, sourceNode :: INTEGER, targetNode :: INTEGER, totalCost :: FLOAT, nodeIds :: LIST<INTEGER>, costs :: LIST<FLOAT>, path :: PATH)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'index :: INTEGER',
            name: 'index',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'sourceNode :: INTEGER',
            name: 'sourceNode',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'targetNode :: INTEGER',
            name: 'targetNode',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'totalCost :: FLOAT',
            name: 'totalCost',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'nodeIds :: LIST<INTEGER>',
            name: 'nodeIds',
            type: 'LIST<INTEGER>',
          },
          {
            isDeprecated: false,
            description: 'costs :: LIST<FLOAT>',
            name: 'costs',
            type: 'LIST<FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'path :: PATH',
            name: 'path',
            type: 'PATH',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.shortestPath.astar.stream.estimate': {
        name: 'gds.shortestPath.astar.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.shortestPath.astar.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.shortestPath.astar.write': {
        name: 'gds.shortestPath.astar.write',
        description:
          'The A* shortest path algorithm computes the shortest path between a pair of nodes. It uses the relationship weight property to compare path lengths. In addition, this implementation uses the haversine distance as a heuristic to converge faster.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.shortestPath.astar.write(graphName :: STRING, configuration = {} :: MAP) :: (relationshipsWritten :: INTEGER, writeMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.shortestPath.astar.write.estimate': {
        name: 'gds.shortestPath.astar.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.shortestPath.astar.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.shortestPath.dijkstra.mutate': {
        name: 'gds.shortestPath.dijkstra.mutate',
        description:
          'The Dijkstra shortest path algorithm computes the shortest (weighted) path between a pair of nodes.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.shortestPath.dijkstra.mutate(graphName :: STRING, configuration = {} :: MAP) :: (relationshipsWritten :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.shortestPath.dijkstra.mutate.estimate': {
        name: 'gds.shortestPath.dijkstra.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.shortestPath.dijkstra.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.shortestPath.dijkstra.stream': {
        name: 'gds.shortestPath.dijkstra.stream',
        description:
          'The Dijkstra shortest path algorithm computes the shortest (weighted) path between a pair of nodes.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.shortestPath.dijkstra.stream(graphName :: STRING, configuration = {} :: MAP) :: (index :: INTEGER, sourceNode :: INTEGER, targetNode :: INTEGER, totalCost :: FLOAT, nodeIds :: LIST<INTEGER>, costs :: LIST<FLOAT>, path :: PATH)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'index :: INTEGER',
            name: 'index',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'sourceNode :: INTEGER',
            name: 'sourceNode',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'targetNode :: INTEGER',
            name: 'targetNode',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'totalCost :: FLOAT',
            name: 'totalCost',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'nodeIds :: LIST<INTEGER>',
            name: 'nodeIds',
            type: 'LIST<INTEGER>',
          },
          {
            isDeprecated: false,
            description: 'costs :: LIST<FLOAT>',
            name: 'costs',
            type: 'LIST<FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'path :: PATH',
            name: 'path',
            type: 'PATH',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.shortestPath.dijkstra.stream.estimate': {
        name: 'gds.shortestPath.dijkstra.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.shortestPath.dijkstra.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.shortestPath.dijkstra.write': {
        name: 'gds.shortestPath.dijkstra.write',
        description:
          'The Dijkstra shortest path algorithm computes the shortest (weighted) path between a pair of nodes.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.shortestPath.dijkstra.write(graphName :: STRING, configuration = {} :: MAP) :: (relationshipsWritten :: INTEGER, writeMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.shortestPath.dijkstra.write.estimate': {
        name: 'gds.shortestPath.dijkstra.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.shortestPath.dijkstra.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.shortestPath.yens.mutate': {
        name: 'gds.shortestPath.yens.mutate',
        description:
          "The Yen's shortest path algorithm computes the k shortest (weighted) paths between a pair of nodes.",
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.shortestPath.yens.mutate(graphName :: STRING, configuration = {} :: MAP) :: (relationshipsWritten :: INTEGER, mutateMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.shortestPath.yens.mutate.estimate': {
        name: 'gds.shortestPath.yens.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.shortestPath.yens.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.shortestPath.yens.stream': {
        name: 'gds.shortestPath.yens.stream',
        description:
          "The Yen's shortest path algorithm computes the k shortest (weighted) paths between a pair of nodes.",
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.shortestPath.yens.stream(graphName :: STRING, configuration = {} :: MAP) :: (index :: INTEGER, sourceNode :: INTEGER, targetNode :: INTEGER, totalCost :: FLOAT, nodeIds :: LIST<INTEGER>, costs :: LIST<FLOAT>, path :: PATH)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'index :: INTEGER',
            name: 'index',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'sourceNode :: INTEGER',
            name: 'sourceNode',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'targetNode :: INTEGER',
            name: 'targetNode',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'totalCost :: FLOAT',
            name: 'totalCost',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'nodeIds :: LIST<INTEGER>',
            name: 'nodeIds',
            type: 'LIST<INTEGER>',
          },
          {
            isDeprecated: false,
            description: 'costs :: LIST<FLOAT>',
            name: 'costs',
            type: 'LIST<FLOAT>',
          },
          {
            isDeprecated: false,
            description: 'path :: PATH',
            name: 'path',
            type: 'PATH',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.shortestPath.yens.stream.estimate': {
        name: 'gds.shortestPath.yens.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.shortestPath.yens.stream.estimate(graphName :: ANY, configuration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: ANY',
            name: 'graphName',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.shortestPath.yens.write': {
        name: 'gds.shortestPath.yens.write',
        description:
          "The Yen's shortest path algorithm computes the k shortest (weighted) paths between a pair of nodes.",
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.shortestPath.yens.write(graphName :: STRING, configuration = {} :: MAP) :: (relationshipsWritten :: INTEGER, writeMillis :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.shortestPath.yens.write.estimate': {
        name: 'gds.shortestPath.yens.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.shortestPath.yens.write.estimate(graphName :: ANY, configuration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: ANY',
            name: 'graphName',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.sllpa.mutate': {
        name: 'gds.sllpa.mutate',
        description:
          'The Speaker Listener Label Propagation algorithm is a fast algorithm for finding overlapping communities in a graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.sllpa.mutate(graphName :: STRING, configuration = {} :: MAP) :: (ranIterations :: INTEGER, didConverge :: BOOLEAN, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, mutateMillis :: INTEGER, nodePropertiesWritten :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.sllpa.mutate.estimate': {
        name: 'gds.sllpa.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.sllpa.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.sllpa.stats': {
        name: 'gds.sllpa.stats',
        description:
          'The Speaker Listener Label Propagation algorithm is a fast algorithm for finding overlapping communities in a graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.sllpa.stats(graphName :: STRING, configuration = {} :: MAP) :: (ranIterations :: INTEGER, didConverge :: BOOLEAN, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.sllpa.stats.estimate': {
        name: 'gds.sllpa.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.sllpa.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.sllpa.stream': {
        name: 'gds.sllpa.stream',
        description:
          'The Speaker Listener Label Propagation algorithm is a fast algorithm for finding overlapping communities in a graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.sllpa.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, values :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'values :: MAP',
            name: 'values',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.sllpa.stream.estimate': {
        name: 'gds.sllpa.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.sllpa.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.sllpa.write': {
        name: 'gds.sllpa.write',
        description:
          'The Speaker Listener Label Propagation algorithm is a fast algorithm for finding overlapping communities in a graph.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.sllpa.write(graphName :: STRING, configuration = {} :: MAP) :: (ranIterations :: INTEGER, didConverge :: BOOLEAN, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, writeMillis :: INTEGER, nodePropertiesWritten :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'ranIterations :: INTEGER',
            name: 'ranIterations',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'didConverge :: BOOLEAN',
            name: 'didConverge',
            type: 'BOOLEAN',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.sllpa.write.estimate': {
        name: 'gds.sllpa.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.sllpa.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.spanningTree.mutate': {
        name: 'gds.spanningTree.mutate',
        description:
          'The spanning tree algorithm visits all nodes that are in the same connected component as the starting node, and returns a spanning tree of all nodes in the component where the total weight of the relationships is either minimized or maximized.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.spanningTree.mutate(graphName :: STRING, configuration = {} :: MAP) :: (mutateMillis :: INTEGER, relationshipsWritten :: INTEGER, effectiveNodeCount :: INTEGER, totalWeight :: FLOAT, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'effectiveNodeCount :: INTEGER',
            name: 'effectiveNodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'totalWeight :: FLOAT',
            name: 'totalWeight',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.spanningTree.mutate.estimate': {
        name: 'gds.spanningTree.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.spanningTree.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.spanningTree.stats': {
        name: 'gds.spanningTree.stats',
        description:
          'The spanning tree algorithm visits all nodes that are in the same connected component as the starting node, and returns a spanning tree of all nodes in the component where the total weight of the relationships is either minimized or maximized.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.spanningTree.stats(graphName :: STRING, configuration = {} :: MAP) :: (effectiveNodeCount :: INTEGER, totalWeight :: FLOAT, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'effectiveNodeCount :: INTEGER',
            name: 'effectiveNodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'totalWeight :: FLOAT',
            name: 'totalWeight',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.spanningTree.stats.estimate': {
        name: 'gds.spanningTree.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.spanningTree.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.spanningTree.stream': {
        name: 'gds.spanningTree.stream',
        description:
          'The spanning tree algorithm visits all nodes that are in the same connected component as the starting node, and returns a spanning tree of all nodes in the component where the total weight of the relationships is either minimized or maximized.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.spanningTree.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, parentId :: INTEGER, weight :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'parentId :: INTEGER',
            name: 'parentId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'weight :: FLOAT',
            name: 'weight',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.spanningTree.stream.estimate': {
        name: 'gds.spanningTree.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.spanningTree.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.spanningTree.write': {
        name: 'gds.spanningTree.write',
        description:
          'The spanning tree algorithm visits all nodes that are in the same connected component as the starting node, and returns a spanning tree of all nodes in the component where the total weight of the relationships is either minimized or maximized.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.spanningTree.write(graphName :: STRING, configuration = {} :: MAP) :: (writeMillis :: INTEGER, relationshipsWritten :: INTEGER, effectiveNodeCount :: INTEGER, totalWeight :: FLOAT, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'effectiveNodeCount :: INTEGER',
            name: 'effectiveNodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'totalWeight :: FLOAT',
            name: 'totalWeight',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.spanningTree.write.estimate': {
        name: 'gds.spanningTree.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.spanningTree.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.steinerTree.mutate': {
        name: 'gds.steinerTree.mutate',
        description:
          'The steiner tree algorithm accepts a source node, as well as a list of target nodes. It then attempts to find a spanning tree where there is a path from the source node to each target node, such that the total weight of the relationships is as low as possible.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.steinerTree.mutate(graphName :: STRING, configuration = {} :: MAP) :: (mutateMillis :: INTEGER, relationshipsWritten :: INTEGER, effectiveNodeCount :: INTEGER, effectiveTargetNodesCount :: INTEGER, totalWeight :: FLOAT, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'effectiveNodeCount :: INTEGER',
            name: 'effectiveNodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'effectiveTargetNodesCount :: INTEGER',
            name: 'effectiveTargetNodesCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'totalWeight :: FLOAT',
            name: 'totalWeight',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.steinerTree.mutate.estimate': {
        name: 'gds.steinerTree.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.steinerTree.mutate.estimate(graphName :: ANY, configuration = {} :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: ANY',
            name: 'graphName',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.steinerTree.stats': {
        name: 'gds.steinerTree.stats',
        description:
          'The steiner tree algorithm accepts a source node, as well as a list of target nodes. It then attempts to find a spanning tree where there is a path from the source node to each target node, such that the total weight of the relationships is as low as possible.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.steinerTree.stats(graphName :: STRING, configuration = {} :: MAP) :: (effectiveNodeCount :: INTEGER, effectiveTargetNodesCount :: INTEGER, totalWeight :: FLOAT, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'effectiveNodeCount :: INTEGER',
            name: 'effectiveNodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'effectiveTargetNodesCount :: INTEGER',
            name: 'effectiveTargetNodesCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'totalWeight :: FLOAT',
            name: 'totalWeight',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.steinerTree.stats.estimate': {
        name: 'gds.steinerTree.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.steinerTree.stats.estimate(graphName :: ANY, configuration = {} :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: ANY',
            name: 'graphName',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.steinerTree.stream': {
        name: 'gds.steinerTree.stream',
        description:
          'The steiner tree algorithm accepts a source node, as well as a list of target nodes. It then attempts to find a spanning tree where there is a path from the source node to each target node, such that the total weight of the relationships is as low as possible.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.steinerTree.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, parentId :: INTEGER, weight :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'parentId :: INTEGER',
            name: 'parentId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'weight :: FLOAT',
            name: 'weight',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.steinerTree.stream.estimate': {
        name: 'gds.steinerTree.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.steinerTree.stream.estimate(graphName :: ANY, configuration = {} :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: ANY',
            name: 'graphName',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.steinerTree.write': {
        name: 'gds.steinerTree.write',
        description:
          'The steiner tree algorithm accepts a source node, as well as a list of target nodes. It then attempts to find a spanning tree where there is a path from the source node to each target node, such that the total weight of the relationships is as low as possible.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.steinerTree.write(graphName :: STRING, configuration = {} :: MAP) :: (writeMillis :: INTEGER, relationshipsWritten :: INTEGER, effectiveNodeCount :: INTEGER, effectiveTargetNodesCount :: INTEGER, totalWeight :: FLOAT, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipsWritten :: INTEGER',
            name: 'relationshipsWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'effectiveNodeCount :: INTEGER',
            name: 'effectiveNodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'effectiveTargetNodesCount :: INTEGER',
            name: 'effectiveTargetNodesCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'totalWeight :: FLOAT',
            name: 'totalWeight',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.steinerTree.write.estimate': {
        name: 'gds.steinerTree.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.steinerTree.write.estimate(graphName :: ANY, configuration = {} :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: ANY',
            name: 'graphName',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.systemMonitor': {
        name: 'gds.systemMonitor',
        description:
          "Get an overview of the system's workload and available resources",
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.systemMonitor() :: (freeHeap :: INTEGER, totalHeap :: INTEGER, maxHeap :: INTEGER, jvmAvailableCpuCores :: INTEGER, availableCpuCoresNotRequested :: INTEGER, jvmHeapStatus :: MAP, ongoingGdsProcedures :: LIST<MAP>)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'freeHeap :: INTEGER',
            name: 'freeHeap',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'totalHeap :: INTEGER',
            name: 'totalHeap',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'maxHeap :: INTEGER',
            name: 'maxHeap',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'jvmAvailableCpuCores :: INTEGER',
            name: 'jvmAvailableCpuCores',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'availableCpuCoresNotRequested :: INTEGER',
            name: 'availableCpuCoresNotRequested',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'jvmHeapStatus :: MAP',
            name: 'jvmHeapStatus',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'ongoingGdsProcedures :: LIST<MAP>',
            name: 'ongoingGdsProcedures',
            type: 'LIST<MAP>',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.triangleCount.mutate': {
        name: 'gds.triangleCount.mutate',
        description:
          'Triangle counting is a community detection graph algorithm that is used to determine the number of triangles passing through each node in the graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.triangleCount.mutate(graphName :: STRING, configuration = {} :: MAP) :: (mutateMillis :: INTEGER, nodePropertiesWritten :: INTEGER, globalTriangleCount :: INTEGER, nodeCount :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'globalTriangleCount :: INTEGER',
            name: 'globalTriangleCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.triangleCount.mutate.estimate': {
        name: 'gds.triangleCount.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.triangleCount.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.triangleCount.stats': {
        name: 'gds.triangleCount.stats',
        description:
          'Triangle counting is a community detection graph algorithm that is used to determine the number of triangles passing through each node in the graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.triangleCount.stats(graphName :: STRING, configuration = {} :: MAP) :: (globalTriangleCount :: INTEGER, nodeCount :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'globalTriangleCount :: INTEGER',
            name: 'globalTriangleCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.triangleCount.stats.estimate': {
        name: 'gds.triangleCount.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.triangleCount.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.triangleCount.stream': {
        name: 'gds.triangleCount.stream',
        description:
          'Triangle counting is a community detection graph algorithm that is used to determine the number of triangles passing through each node in the graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.triangleCount.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, triangleCount :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'triangleCount :: INTEGER',
            name: 'triangleCount',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.triangleCount.stream.estimate': {
        name: 'gds.triangleCount.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.triangleCount.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.triangleCount.write': {
        name: 'gds.triangleCount.write',
        description:
          'Triangle counting is a community detection graph algorithm that is used to determine the number of triangles passing through each node in the graph.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.triangleCount.write(graphName :: STRING, configuration = {} :: MAP) :: (writeMillis :: INTEGER, nodePropertiesWritten :: INTEGER, globalTriangleCount :: INTEGER, nodeCount :: INTEGER, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'globalTriangleCount :: INTEGER',
            name: 'globalTriangleCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.triangleCount.write.estimate': {
        name: 'gds.triangleCount.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.triangleCount.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.triangles': {
        name: 'gds.triangles',
        description:
          'Triangles streams the nodeIds of each triangle in the graph.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.triangles(graphName :: STRING, configuration = {} :: MAP) :: (nodeA :: INTEGER, nodeB :: INTEGER, nodeC :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeA :: INTEGER',
            name: 'nodeA',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeB :: INTEGER',
            name: 'nodeB',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeC :: INTEGER',
            name: 'nodeC',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.userLog': {
        name: 'gds.userLog',
        description: 'Log warnings and hints for currently running tasks.',
        mode: 'DEFAULT',
        worksOnSystem: false,
        signature:
          'gds.userLog(jobId =  :: STRING) :: (taskName :: STRING, message :: STRING, timeStarted :: LOCAL TIME)',
        argumentDescription: [
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value=, type=STRING}',
            description: 'jobId =  :: STRING',
            name: 'jobId',
            type: 'STRING',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'taskName :: STRING',
            name: 'taskName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'message :: STRING',
            name: 'message',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'timeStarted :: LOCAL TIME',
            name: 'timeStarted',
            type: 'LOCAL TIME',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.version': {
        name: 'gds.version',
        description:
          'CALL gds.version() | Return the installed graph data science library version.',
        mode: 'READ',
        worksOnSystem: false,
        signature: 'gds.version() :: (gdsVersion :: STRING)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'gdsVersion :: STRING',
            name: 'gdsVersion',
            type: 'STRING',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.wcc.mutate': {
        name: 'gds.wcc.mutate',
        description:
          'The WCC algorithm finds sets of connected nodes in an undirected graph, where all nodes in the same set form a connected component.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.wcc.mutate(graphName :: STRING, configuration = {} :: MAP) :: (mutateMillis :: INTEGER, nodePropertiesWritten :: INTEGER, componentCount :: INTEGER, componentDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'mutateMillis :: INTEGER',
            name: 'mutateMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'componentCount :: INTEGER',
            name: 'componentCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'componentDistribution :: MAP',
            name: 'componentDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.wcc.mutate.estimate': {
        name: 'gds.wcc.mutate.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.wcc.mutate.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.wcc.stats': {
        name: 'gds.wcc.stats',
        description:
          'The WCC algorithm finds sets of connected nodes in an undirected graph, where all nodes in the same set form a connected component.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.wcc.stats(graphName :: STRING, configuration = {} :: MAP) :: (componentCount :: INTEGER, componentDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'componentCount :: INTEGER',
            name: 'componentCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'componentDistribution :: MAP',
            name: 'componentDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.wcc.stats.estimate': {
        name: 'gds.wcc.stats.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.wcc.stats.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.wcc.stream': {
        name: 'gds.wcc.stream',
        description:
          'The WCC algorithm finds sets of connected nodes in an undirected graph, where all nodes in the same set form a connected component.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.wcc.stream(graphName :: STRING, configuration = {} :: MAP) :: (nodeId :: INTEGER, componentId :: INTEGER)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'nodeId :: INTEGER',
            name: 'nodeId',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'componentId :: INTEGER',
            name: 'componentId',
            type: 'INTEGER',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.wcc.stream.estimate': {
        name: 'gds.wcc.stream.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.wcc.stream.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.wcc.write': {
        name: 'gds.wcc.write',
        description:
          'The WCC algorithm finds sets of connected nodes in an undirected graph, where all nodes in the same set form a connected component.',
        mode: 'WRITE',
        worksOnSystem: false,
        signature:
          'gds.wcc.write(graphName :: STRING, configuration = {} :: MAP) :: (writeMillis :: INTEGER, nodePropertiesWritten :: INTEGER, componentCount :: INTEGER, componentDistribution :: MAP, postProcessingMillis :: INTEGER, preProcessingMillis :: INTEGER, computeMillis :: INTEGER, configuration :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphName :: STRING',
            name: 'graphName',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            default: 'DefaultParameterValue{value={}, type=MAP}',
            description: 'configuration = {} :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'writeMillis :: INTEGER',
            name: 'writeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodePropertiesWritten :: INTEGER',
            name: 'nodePropertiesWritten',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'componentCount :: INTEGER',
            name: 'componentCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'componentDistribution :: MAP',
            name: 'componentDistribution',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'postProcessingMillis :: INTEGER',
            name: 'postProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'preProcessingMillis :: INTEGER',
            name: 'preProcessingMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'computeMillis :: INTEGER',
            name: 'computeMillis',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'configuration :: MAP',
            name: 'configuration',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'gds.wcc.write.estimate': {
        name: 'gds.wcc.write.estimate',
        description:
          'Returns an estimation of the memory consumption for that procedure.',
        mode: 'READ',
        worksOnSystem: false,
        signature:
          'gds.wcc.write.estimate(graphNameOrConfiguration :: ANY, algoConfiguration :: MAP) :: (requiredMemory :: STRING, treeView :: STRING, mapView :: MAP, bytesMin :: INTEGER, bytesMax :: INTEGER, nodeCount :: INTEGER, relationshipCount :: INTEGER, heapPercentageMin :: FLOAT, heapPercentageMax :: FLOAT)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'graphNameOrConfiguration :: ANY',
            name: 'graphNameOrConfiguration',
            type: 'ANY',
          },
          {
            isDeprecated: false,
            description: 'algoConfiguration :: MAP',
            name: 'algoConfiguration',
            type: 'MAP',
          },
        ],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'requiredMemory :: STRING',
            name: 'requiredMemory',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'treeView :: STRING',
            name: 'treeView',
            type: 'STRING',
          },
          {
            isDeprecated: false,
            description: 'mapView :: MAP',
            name: 'mapView',
            type: 'MAP',
          },
          {
            isDeprecated: false,
            description: 'bytesMin :: INTEGER',
            name: 'bytesMin',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'bytesMax :: INTEGER',
            name: 'bytesMax',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'nodeCount :: INTEGER',
            name: 'nodeCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'relationshipCount :: INTEGER',
            name: 'relationshipCount',
            type: 'INTEGER',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMin :: FLOAT',
            name: 'heapPercentageMin',
            type: 'FLOAT',
          },
          {
            isDeprecated: false,
            description: 'heapPercentageMax :: FLOAT',
            name: 'heapPercentageMax',
            type: 'FLOAT',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'tx.getMetaData': {
        name: 'tx.getMetaData',
        description: 'Provides attached transaction metadata.',
        mode: 'DBMS',
        worksOnSystem: true,
        signature: 'tx.getMetaData() :: (metadata :: MAP)',
        argumentDescription: [],
        returnDescription: [
          {
            isDeprecated: false,
            description: 'Metadata about the transaction.',
            name: 'metadata',
            type: 'MAP',
          },
        ],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
      'tx.setMetaData': {
        name: 'tx.setMetaData',
        description:
          'Attaches a map of data to the transaction. The data will be printed when listing queries, and inserted into the query log.',
        mode: 'DBMS',
        worksOnSystem: false,
        signature: 'tx.setMetaData(data :: MAP)',
        argumentDescription: [
          {
            isDeprecated: false,
            description: 'Metadata to attach to the transaction.',
            name: 'data',
            type: 'MAP',
          },
        ],
        returnDescription: [],
        admin: false,
        rolesExecution: ['PUBLIC', 'admin'],
        rolesBoostedExecution: ['admin'],
        isDeprecated: false,
        deprecatedBy: null,
        option: {
          deprecated: false,
        },
      },
    }),
  },
  labels: [
    'Actor',
    'Airport',
    'Apple',
    'Aquarium',
    'Arena',
    'Backpack',
    'Bag',
    'Ball',
    'Bar',
    'Beach',
    'Bed',
    'Bicycle',
    'Bird',
    'Book',
    'Book',
    'Bottle',
    'Bridge',
    'Cafe',
    'Canyon',
    'Car',
    'Cat',
    'Cave',
    'Chair',
    'Church',
    'Cinema',
    'City',
    'Clock',
    'Coat',
    'Computer',
    'Concert',
    'Country',
    'Cup',
    'Desert',
    'Dog',
    'Door',
    'Elephant',
    'Factory',
    'Farm',
    'Festival',
    'Field',
    'Fish',
    'Flower',
    'Forest',
    'Fork',
    'Garden',
    'Genre',
    'Glacier',
    'Glass',
    'Greeting',
    'Gym',
    'Hat',
    'Hill',
    'Hospital',
    'Hotel',
    'House',
    'Island',
    'Knife',
    'Lake',
    'Library',
    'Mall',
    'Map',
    'Meeting',
    'Moon',
    'Mosque',
    'Mountain',
    'Movie',
    'Museum',
    'Notebook',
    'Ocean',
    'Office',
    'Orchard',
    'Pants',
    'Paper',
    'Park',
    'Party',
    'Path',
    'Pen',
    'Pencil',
    'Person',
    'Phone',
    'Plate',
    'Playground',
    'Pool',
    'Restaurant',
    'River',
    'Riverbank',
    'Road',
    'School',
    'Shirt',
    'Shoe',
    'Shop',
    'Spoon',
    'Stadium',
    'Star',
    'Sun',
    'Supermarket',
    'Table',
    'Television',
    'Temple',
    'Theater',
    'Tree',
    'User',
    'Valley',
    'Visualisation',
    'Volcano',
    'Wedding',
    'Window',
    'Zoo',
    'longlabelonetwothreefourfivesixseveneightninetenonetwothreelonglabelonetwothreefourfivesixseveneightninetenonetwothreelonglabelonetwothreefourfivesixseveneightninetenonetwothreelonglabelonetwothreefourfivesixseveneightninetenonetwothree',
    'longlabelonetwothreefourfivesixseveneightninetenonetwothreelonglabelonetwothreefourfivesixseveneightninetenonetwothreelonglabelonetwothreefourfivesixseveneightninetenonetwothreelonglabelonetwothreefourfivesixseveneightninetenonetwothree',
    'longlabelonetwothreefourfivesixseveneightninetenonetwothreelonglabelonetwothreefourfivesixseveneightninetenonetwothreelonglabelonetwothreefourfivesixseveneightninetenonetwothreelonglabelonetwothreefourfivesixseveneightninetenonetwothree',
    'longlabelonetwothreefourfivesixseveneightninetenonetwothreelonglabelonetwothreefourfivesixseveneightninetenonetwothreelonglabelonetwothreefourfivesixseveneightninetenonetwothreelonglabelonetwothreefourfivesixseveneightninetenonetwothree',
    'longlabelonetwothreefourfivesixseveneightninetenonetwothreelonglabelonetwothreefourfivesixseveneightninetenonetwothreelonglabelonetwothreefourfivesixseveneightninetenonetwothreelonglabelonetwothreefourfivesixseveneightninetenonetwothree',
    'longlabelonetwothreefourfivesixseveneightninetenonetwothreelonglabelonetwothreefourfivesixseveneightninetenonetwothreelonglabelonetwothreefourfivesixseveneightninetenonetwothreelonglabelonetwothreefourfivesixseveneightninetenonetwothree',
  ],
  relationshipTypes: [
    'ACTED_IN',
    'DIRECTED',
    'FOLLOWS',
    'PRODUCED',
    'REVIEWED',
    'WROTE',
    'RUNS',
    'JUMPS',
    'SWIMS',
    'THINKS',
    'WRITES',
    'READS',
    'SINGS',
    'DANCES',
    'PLAYS',
    'WALKS',
    'TALKS',
    'LISTENS',
    'SCREAMS',
    'LAUGHS',
    'CRIES',
    'EATS',
    'DRINKS',
    'SLEEPS',
    'WORKS',
    'STUDIES',
    'WATCHES',
    'OBSERVES',
    'BUILDS',
    'CREATES',
    'DESTROYS',
    'REPAIRS',
    'OPENS',
    'CLOSES',
    'PUSHES',
    'PULLS',
    'LIFTS',
    'DROPS',
    'CATCHES',
    'THROWS',
    'CLIMBS',
    'FALLS',
    'FLIES',
    'SWINGS',
    'EXPLORES',
    'DISCOVERS',
    'INVENTS',
    'IMAGINES',
    'REMEMBERS',
    'FORGETS',
    'LOVES',
    'HATES',
    'GIVES',
    'TAKES',
    'SEES',
    'HEARS',
    'SMELLS',
    'TOUCHES',
    'FEELS',
    'LEARNS',
    'TEACHES',
    'GROWS',
    'SHRINKS',
    'FIGHTS',
    'MAKES',
    'PEACE',
    'WINS',
    'LOSES',
    'LEADS',
    'FOLLOWS',
    'CHANGES',
    'STAYS',
    'MOVES',
    'STOPS',
    'GOES',
    'BEGINS',
    'ENDS',
    'IMPROVES',
    'DEGRADES',
    'HELPS',
    'HARMS',
    'SAVES',
    'SPENDS',
    'INCREASES',
    'DECREASES',
    'OPTIMIZES',
    'COMPLICATES',
    'SIMPLIFIES',
    'AMPLIFIES',
    'REDUCES',
    'COMPARES',
    'CONTRASTS',
    'COPIES',
    'PASTES',
    'CUTS',
    'PAINTS',
    'DRAWS',
    'DESIGNS',
    'CALCULATES',
    'MEASURES',
    'WEIGHS',
    'PROGRAMS',
    'CODES',
    'ANALYZES',
    'SOLVES',
    'EXPLAINS',
    'DESCRIBES',
    'DISCUSSES',
    'ARGUES',
    'CONVINCES',
    'PERSUADES',
    'INSPIRES',
    'MOTIVATES',
    'longlabelonetwothreefourfivesixseveneightninetenonetwothreelonglabelonetwothreefourfivesixseveneightninetenonetwothreelonglabelonetwothreefourfivesixseveneightninetenonetwothreelonglabelonetwothreefourfivesixseveneightninetenonetwothree',
    'longlabelonetwothreefourfivesixseveneightninetenonetwothreelonglabelonetwothreefourfivesixseveneightninetenonetwothreelonglabelonetwothreefourfivesixseveneightninetenonetwothreelonglabelonetwothreefourfivesixseveneightninetenonetwothree',
    'longlabelonetwothreefourfivesixseveneightninetenonetwothreelonglabelonetwothreefourfivesixseveneightninetenonetwothreelonglabelonetwothreefourfivesixseveneightninetenonetwothreelonglabelonetwothreefourfivesixseveneightninetenonetwothree',
    'longlabelonetwothreefourfivesixseveneightninetenonetwothreelonglabelonetwothreefourfivesixseveneightninetenonetwothreelonglabelonetwothreefourfivesixseveneightninetenonetwothreelonglabelonetwothreefourfivesixseveneightninetenonetwothree',
    'longlabelonetwothreefourfivesixseveneightninetenonetwothreelonglabelonetwothreefourfivesixseveneightninetenonetwothreelonglabelonetwothreefourfivesixseveneightninetenonetwothreelonglabelonetwothreefourfivesixseveneightninetenonetwothree',
    'longlabelonetwothreefourfivesixseveneightninetenonetwothreelonglabelonetwothreefourfivesixseveneightninetenonetwothreelonglabelonetwothreefourfivesixseveneightninetenonetwothreelonglabelonetwothreefourfivesixseveneightninetenonetwothree',
  ],
  propertyKeys: [
    'born',
    'data',
    'id',
    'name',
    'nodes',
    'rating',
    'relationships',
    'released',
    'roles',
    'style',
    'summary',
    'tagline',
    'title',
    'visualisation',
  ],
  parameters: {
    param1: {
      property: 'value',
      speed: 123.4,
    },
    favColor: 'green',
    myParam: 1337,
  },
  databaseNames: [
    'neo4j',
    'oskar',
    'system',
    'Restaurant',
    'Cafe',
    'Bar',
    'Hotel',
    'Supermarket',
    'Mall',
    'Shop',
    'Office',
    'Factory',
    'Gym',
    'Stadium',
  ],
  aliasNames: [
    'alias2',
    'testalias',
    'Bar',
    'Hotel',
    'Supermarket',
    'Mall',
    'Shop',
    'Office',
    'Factory',
    'Gym',
    'Stadium',
  ],
  userNames: ['oskar', 'neo4j', 'admin'],
};

const largeQuery = `
CREATE (TheMatrix:Movie {title:'The Matrix', released:1999, tagline:'Welcome to the Real World'})
CREATE (Keanu:Person {name:'Keanu Reeves', born:1964})
CREATE (Carrie:Person {name:'Carrie-Anne Moss', born:1967})
CREATE (Laurence:Person {name:'Laurence Fishburne', born:1961})
CREATE (Hugo:Person {name:'Hugo Weaving', born:1960})
CREATE (LillyW:Person {name:'Lilly Wachowski', born:1967})
CREATE (LanaW:Person {name:'Lana Wachowski', born:1965})
CREATE (JoelS:Person {name:'Joel Silver', born:1952})
CREATE
(Keanu)-[:ACTED_IN {roles:['Neo']}]->(TheMatrix),
(Carrie)-[:ACTED_IN {roles:['Trinity']}]->(TheMatrix),
(Laurence)-[:ACTED_IN {roles:['Morpheus']}]->(TheMatrix),
(Hugo)-[:ACTED_IN {roles:['Agent Smith']}]->(TheMatrix),
(LillyW)-[:DIRECTED]->(TheMatrix),
(LanaW)-[:DIRECTED]->(TheMatrix),
(JoelS)-[:PRODUCED]->(TheMatrix)

CREATE (Emil:Person {name:"Emil Eifrem", born:1978})
CREATE (Emil)-[:ACTED_IN {roles:["Emil"]}]->(TheMatrix)

CREATE (TheMatrixReloaded:Movie {title:'The Matrix Reloaded', released:2003, tagline:'Free your mind'})
CREATE
(Keanu)-[:ACTED_IN {roles:['Neo']}]->(TheMatrixReloaded),
(Carrie)-[:ACTED_IN {roles:['Trinity']}]->(TheMatrixReloaded),
(Laurence)-[:ACTED_IN {roles:['Morpheus']}]->(TheMatrixReloaded),
(Hugo)-[:ACTED_IN {roles:['Agent Smith']}]->(TheMatrixReloaded),
(LillyW)-[:DIRECTED]->(TheMatrixReloaded),
(LanaW)-[:DIRECTED]->(TheMatrixReloaded),
(JoelS)-[:PRODUCED]->(TheMatrixReloaded)

CREATE (TheMatrixRevolutions:Movie {title:'The Matrix Revolutions', released:2003, tagline:'Everything that has a beginning has an end'})
CREATE
(Keanu)-[:ACTED_IN {roles:['Neo']}]->(TheMatrixRevolutions),
(Carrie)-[:ACTED_IN {roles:['Trinity']}]->(TheMatrixRevolutions),
(Laurence)-[:ACTED_IN {roles:['Morpheus']}]->(TheMatrixRevolutions),
(Hugo)-[:ACTED_IN {roles:['Agent Smith']}]->(TheMatrixRevolutions),
(LillyW)-[:DIRECTED]->(TheMatrixRevolutions),
(LanaW)-[:DIRECTED]->(TheMatrixRevolutions),
(JoelS)-[:PRODUCED]->(TheMatrixRevolutions)

CREATE (TheDevilsAdvocate:Movie {title:"The Devil's Advocate", released:1997, tagline:'Evil has its winning ways'})
CREATE (Charlize:Person {name:'Charlize Theron', born:1975})
CREATE (Al:Person {name:'Al Pacino', born:1940})
CREATE (Taylor:Person {name:'Taylor Hackford', born:1944})
CREATE
(Keanu)-[:ACTED_IN {roles:['Kevin Lomax']}]->(TheDevilsAdvocate),
(Charlize)-[:ACTED_IN {roles:['Mary Ann Lomax']}]->(TheDevilsAdvocate),
(Al)-[:ACTED_IN {roles:['John Milton']}]->(TheDevilsAdvocate),
(Taylor)-[:DIRECTED]->(TheDevilsAdvocate)

CREATE (AFewGoodMen:Movie {title:"A Few Good Men", released:1992, tagline:"In the heart of the nation's capital, in a courthouse of the U.S. government, one man will stop at nothing to keep his honor, and one will stop at nothing to find the truth."})
CREATE (TomC:Person {name:'Tom Cruise', born:1962})
CREATE (JackN:Person {name:'Jack Nicholson', born:1937})
CREATE (DemiM:Person {name:'Demi Moore', born:1962})
CREATE (KevinB:Person {name:'Kevin Bacon', born:1958})
CREATE (KieferS:Person {name:'Kiefer Sutherland', born:1966})
CREATE (NoahW:Person {name:'Noah Wyle', born:1971})
CREATE (CubaG:Person {name:'Cuba Gooding Jr.', born:1968})
CREATE (KevinP:Person {name:'Kevin Pollak', born:1957})
CREATE (JTW:Person {name:'J.T. Walsh', born:1943})
CREATE (JamesM:Person {name:'James Marshall', born:1967})
CREATE (ChristopherG:Person {name:'Christopher Guest', born:1948})
CREATE (RobR:Person {name:'Rob Reiner', born:1947})
CREATE (AaronS:Person {name:'Aaron Sorkin', born:1961})
CREATE
(TomC)-[:ACTED_IN {roles:['Lt. Daniel Kaffee']}]->(AFewGoodMen),
(JackN)-[:ACTED_IN {roles:['Col. Nathan R. Jessup']}]->(AFewGoodMen),
(DemiM)-[:ACTED_IN {roles:['Lt. Cdr. JoAnne Galloway']}]->(AFewGoodMen),
(KevinB)-[:ACTED_IN {roles:['Capt. Jack Ross']}]->(AFewGoodMen),
(KieferS)-[:ACTED_IN {roles:['Lt. Jonathan Kendrick']}]->(AFewGoodMen),
(NoahW)-[:ACTED_IN {roles:['Cpl. Jeffrey Barnes']}]->(AFewGoodMen),
(CubaG)-[:ACTED_IN {roles:['Cpl. Carl Hammaker']}]->(AFewGoodMen),
(KevinP)-[:ACTED_IN {roles:['Lt. Sam Weinberg']}]->(AFewGoodMen),
(JTW)-[:ACTED_IN {roles:['Lt. Col. Matthew Andrew Markinson']}]->(AFewGoodMen),
(JamesM)-[:ACTED_IN {roles:['Pfc. Louden Downey']}]->(AFewGoodMen),
(ChristopherG)-[:ACTED_IN {roles:['Dr. Stone']}]->(AFewGoodMen),
(AaronS)-[:ACTED_IN {roles:['Man in Bar']}]->(AFewGoodMen),
(RobR)-[:DIRECTED]->(AFewGoodMen),
(AaronS)-[:WROTE]->(AFewGoodMen)

CREATE (TopGun:Movie {title:"Top Gun", released:1986, tagline:'I feel the need, the need for speed.'})
CREATE (KellyM:Person {name:'Kelly McGillis', born:1957})
CREATE (ValK:Person {name:'Val Kilmer', born:1959})
CREATE (AnthonyE:Person {name:'Anthony Edwards', born:1962})
CREATE (TomS:Person {name:'Tom Skerritt', born:1933})
CREATE (MegR:Person {name:'Meg Ryan', born:1961})
CREATE (TonyS:Person {name:'Tony Scott', born:1944})
CREATE (JimC:Person {name:'Jim Cash', born:1941})
CREATE
(TomC)-[:ACTED_IN {roles:['Maverick']}]->(TopGun),
(KellyM)-[:ACTED_IN {roles:['Charlie']}]->(TopGun),
(ValK)-[:ACTED_IN {roles:['Iceman']}]->(TopGun),
(AnthonyE)-[:ACTED_IN {roles:['Goose']}]->(TopGun),
(TomS)-[:ACTED_IN {roles:['Viper']}]->(TopGun),
(MegR)-[:ACTED_IN {roles:['Carole']}]->(TopGun),
(TonyS)-[:DIRECTED]->(TopGun),
(JimC)-[:WROTE]->(TopGun)

CREATE (JerryMaguire:Movie {title:'Jerry Maguire', released:2000, tagline:'The rest of his life begins now.'})
CREATE (ReneeZ:Person {name:'Renee Zellweger', born:1969})
CREATE (KellyP:Person {name:'Kelly Preston', born:1962})
CREATE (JerryO:Person {name:"Jerry O'Connell", born:1974})
CREATE (JayM:Person {name:'Jay Mohr', born:1970})
CREATE (BonnieH:Person {name:'Bonnie Hunt', born:1961})
CREATE (ReginaK:Person {name:'Regina King', born:1971})
CREATE (JonathanL:Person {name:'Jonathan Lipnicki', born:1996})
CREATE (CameronC:Person {name:'Cameron Crowe', born:1957})
CREATE
(TomC)-[:ACTED_IN {roles:['Jerry Maguire']}]->(JerryMaguire),
(CubaG)-[:ACTED_IN {roles:['Rod Tidwell']}]->(JerryMaguire),
(ReneeZ)-[:ACTED_IN {roles:['Dorothy Boyd']}]->(JerryMaguire),
(KellyP)-[:ACTED_IN {roles:['Avery Bishop']}]->(JerryMaguire),
(JerryO)-[:ACTED_IN {roles:['Frank Cushman']}]->(JerryMaguire),
(JayM)-[:ACTED_IN {roles:['Bob Sugar']}]->(JerryMaguire),
(BonnieH)-[:ACTED_IN {roles:['Laurel Boyd']}]->(JerryMaguire),
(ReginaK)-[:ACTED_IN {roles:['Marcee Tidwell']}]->(JerryMaguire),
(JonathanL)-[:ACTED_IN {roles:['Ray Boyd']}]->(JerryMaguire),
(CameronC)-[:DIRECTED]->(JerryMaguire),
(CameronC)-[:PRODUCED]->(JerryMaguire),
(CameronC)-[:WROTE]->(JerryMaguire)

CREATE (StandByMe:Movie {title:"Stand By Me", released:1986, tagline:"For some, it's the last real taste of innocence, and the first real taste of life. But for everyone, it's the time that memories are made of."})
CREATE (RiverP:Person {name:'River Phoenix', born:1970})
CREATE (CoreyF:Person {name:'Corey Feldman', born:1971})
CREATE (WilW:Person {name:'Wil Wheaton', born:1972})
CREATE (JohnC:Person {name:'John Cusack', born:1966})
CREATE (MarshallB:Person {name:'Marshall Bell', born:1942})
CREATE
(WilW)-[:ACTED_IN {roles:['Gordie Lachance']}]->(StandByMe),
(RiverP)-[:ACTED_IN {roles:['Chris Chambers']}]->(StandByMe),
(JerryO)-[:ACTED_IN {roles:['Vern Tessio']}]->(StandByMe),
(CoreyF)-[:ACTED_IN {roles:['Teddy Duchamp']}]->(StandByMe),
(JohnC)-[:ACTED_IN {roles:['Denny Lachance']}]->(StandByMe),
(KieferS)-[:ACTED_IN {roles:['Ace Merrill']}]->(StandByMe),
(MarshallB)-[:ACTED_IN {roles:['Mr. Lachance']}]->(StandByMe),
(RobR)-[:DIRECTED]->(StandByMe)

CREATE (AsGoodAsItGets:Movie {title:'As Good as It Gets', released:1997, tagline:'A comedy from the heart that goes for the throat.'})
CREATE (HelenH:Person {name:'Helen Hunt', born:1963})
CREATE (GregK:Person {name:'Greg Kinnear', born:1963})
CREATE (JamesB:Person {name:'James L. Brooks', born:1940})
CREATE
(JackN)-[:ACTED_IN {roles:['Melvin Udall']}]->(AsGoodAsItGets),
(HelenH)-[:ACTED_IN {roles:['Carol Connelly']}]->(AsGoodAsItGets),
(GregK)-[:ACTED_IN {roles:['Simon Bishop']}]->(AsGoodAsItGets),
(CubaG)-[:ACTED_IN {roles:['Frank Sachs']}]->(AsGoodAsItGets),
(JamesB)-[:DIRECTED]->(AsGoodAsItGets)

CREATE (WhatDreamsMayCome:Movie {title:'What Dreams May Come', released:1998, tagline:'After life there is more. The end is just the beginning.'})
CREATE (AnnabellaS:Person {name:'Annabella Sciorra', born:1960})
CREATE (MaxS:Person {name:'Max von Sydow', born:1929})
CREATE (WernerH:Person {name:'Werner Herzog', born:1942})
CREATE (Robin:Person {name:'Robin Williams', born:1951})
CREATE (VincentW:Person {name:'Vincent Ward', born:1956})
CREATE
(Robin)-[:ACTED_IN {roles:['Chris Nielsen']}]->(WhatDreamsMayCome),
(CubaG)-[:ACTED_IN {roles:['Albert Lewis']}]->(WhatDreamsMayCome),
(AnnabellaS)-[:ACTED_IN {roles:['Annie Collins-Nielsen']}]->(WhatDreamsMayCome),
(MaxS)-[:ACTED_IN {roles:['The Tracker']}]->(WhatDreamsMayCome),
(WernerH)-[:ACTED_IN {roles:['The Face']}]->(WhatDreamsMayCome),
(VincentW)-[:DIRECTED]->(WhatDreamsMayCome)

CREATE (SnowFallingonCedars:Movie {title:'Snow Falling on Cedars', released:1999, tagline:'First loves last. Forever.'})
CREATE (EthanH:Person {name:'Ethan Hawke', born:1970})
CREATE (RickY:Person {name:'Rick Yune', born:1971})
CREATE (JamesC:Person {name:'James Cromwell', born:1940})
CREATE (ScottH:Person {name:'Scott Hicks', born:1953})
CREATE
(EthanH)-[:ACTED_IN {roles:['Ishmael Chambers']}]->(SnowFallingonCedars),
(RickY)-[:ACTED_IN {roles:['Kazuo Miyamoto']}]->(SnowFallingonCedars),
(MaxS)-[:ACTED_IN {roles:['Nels Gudmundsson']}]->(SnowFallingonCedars),
(JamesC)-[:ACTED_IN {roles:['Judge Fielding']}]->(SnowFallingonCedars),
(ScottH)-[:DIRECTED]->(SnowFallingonCedars)

CREATE (YouveGotMail:Movie {title:"You've Got Mail", released:1998, tagline:'At odds in life... in love on-line.'})
CREATE (ParkerP:Person {name:'Parker Posey', born:1968})
CREATE (DaveC:Person {name:'Dave Chappelle', born:1973})
CREATE (SteveZ:Person {name:'Steve Zahn', born:1967})
CREATE (TomH:Person {name:'Tom Hanks', born:1956})
CREATE (NoraE:Person {name:'Nora Ephron', born:1941})
CREATE
(TomH)-[:ACTED_IN {roles:['Joe Fox']}]->(YouveGotMail),
(MegR)-[:ACTED_IN {roles:['Kathleen Kelly']}]->(YouveGotMail),
(GregK)-[:ACTED_IN {roles:['Frank Navasky']}]->(YouveGotMail),
(ParkerP)-[:ACTED_IN {roles:['Patricia Eden']}]->(YouveGotMail),
(DaveC)-[:ACTED_IN {roles:['Kevin Jackson']}]->(YouveGotMail),
(SteveZ)-[:ACTED_IN {roles:['George Pappas']}]->(YouveGotMail),
(NoraE)-[:DIRECTED]->(YouveGotMail)

CREATE (SleeplessInSeattle:Movie {title:'Sleepless in Seattle', released:1993, tagline:'What if someone you never met, someone you never saw, someone you never knew was the only someone for you?'})
CREATE (RitaW:Person {name:'Rita Wilson', born:1956})
CREATE (BillPull:Person {name:'Bill Pullman', born:1953})
CREATE (VictorG:Person {name:'Victor Garber', born:1949})
CREATE (RosieO:Person {name:"Rosie O'Donnell", born:1962})
CREATE
(TomH)-[:ACTED_IN {roles:['Sam Baldwin']}]->(SleeplessInSeattle),
(MegR)-[:ACTED_IN {roles:['Annie Reed']}]->(SleeplessInSeattle),
(RitaW)-[:ACTED_IN {roles:['Suzy']}]->(SleeplessInSeattle),
(BillPull)-[:ACTED_IN {roles:['Walter']}]->(SleeplessInSeattle),
(VictorG)-[:ACTED_IN {roles:['Greg']}]->(SleeplessInSeattle),
(RosieO)-[:ACTED_IN {roles:['Becky']}]->(SleeplessInSeattle),
(NoraE)-[:DIRECTED]->(SleeplessInSeattle)

CREATE (JoeVersustheVolcano:Movie {title:'Joe Versus the Volcano', released:1990, tagline:'A story of love, lava and burning desire.'})
CREATE (JohnS:Person {name:'John Patrick Stanley', born:1950})
CREATE (Nathan:Person {name:'Nathan Lane', born:1956})
CREATE
(TomH)-[:ACTED_IN {roles:['Joe Banks']}]->(JoeVersustheVolcano),
(MegR)-[:ACTED_IN {roles:['DeDe', 'Angelica Graynamore', 'Patricia Graynamore']}]->(JoeVersustheVolcano),
(Nathan)-[:ACTED_IN {roles:['Baw']}]->(JoeVersustheVolcano),
(JohnS)-[:DIRECTED]->(JoeVersustheVolcano)

CREATE (WhenHarryMetSally:Movie {title:'When Harry Met Sally', released:1998, tagline:'Can two friends sleep together and still love each other in the morning?'})
CREATE (BillyC:Person {name:'Billy Crystal', born:1948})
CREATE (CarrieF:Person {name:'Carrie Fisher', born:1956})
CREATE (BrunoK:Person {name:'Bruno Kirby', born:1949})
CREATE
(BillyC)-[:ACTED_IN {roles:['Harry Burns']}]->(WhenHarryMetSally),
(MegR)-[:ACTED_IN {roles:['Sally Albright']}]->(WhenHarryMetSally),
(CarrieF)-[:ACTED_IN {roles:['Marie']}]->(WhenHarryMetSally),
(BrunoK)-[:ACTED_IN {roles:['Jess']}]->(WhenHarryMetSally),
(RobR)-[:DIRECTED]->(WhenHarryMetSally),
(RobR)-[:PRODUCED]->(WhenHarryMetSally),
(NoraE)-[:PRODUCED]->(WhenHarryMetSally),
(NoraE)-[:WROTE]->(WhenHarryMetSally)

CREATE (ThatThingYouDo:Movie {title:'That Thing You Do', released:1996, tagline:'In every life there comes a time when that thing you dream becomes that thing you do'})
CREATE (LivT:Person {name:'Liv Tyler', born:1977})
CREATE
(TomH)-[:ACTED_IN {roles:['Mr. White']}]->(ThatThingYouDo),
(LivT)-[:ACTED_IN {roles:['Faye Dolan']}]->(ThatThingYouDo),
(Charlize)-[:ACTED_IN {roles:['Tina']}]->(ThatThingYouDo),
(TomH)-[:DIRECTED]->(ThatThingYouDo)

CREATE (TheReplacements:Movie {title:'The Replacements', released:2000, tagline:'Pain heals, Chicks dig scars... Glory lasts forever'})
CREATE (Brooke:Person {name:'Brooke Langton', born:1970})
CREATE (Gene:Person {name:'Gene Hackman', born:1930})
CREATE (Orlando:Person {name:'Orlando Jones', born:1968})
CREATE (Howard:Person {name:'Howard Deutch', born:1950})
CREATE
(Keanu)-[:ACTED_IN {roles:['Shane Falco']}]->(TheReplacements),
(Brooke)-[:ACTED_IN {roles:['Annabelle Farrell']}]->(TheReplacements),
(Gene)-[:ACTED_IN {roles:['Jimmy McGinty']}]->(TheReplacements),
(Orlando)-[:ACTED_IN {roles:['Clifford Franklin']}]->(TheReplacements),
(Howard)-[:DIRECTED]->(TheReplacements)

CREATE (RescueDawn:Movie {title:'RescueDawn', released:2006, tagline:"Based on the extraordinary true story of one man's fight for freedom"})
CREATE (ChristianB:Person {name:'Christian Bale', born:1974})
CREATE (ZachG:Person {name:'Zach Grenier', born:1954})
CREATE
(MarshallB)-[:ACTED_IN {roles:['Admiral']}]->(RescueDawn),
(ChristianB)-[:ACTED_IN {roles:['Dieter Dengler']}]->(RescueDawn),
(ZachG)-[:ACTED_IN {roles:['Squad Leader']}]->(RescueDawn),
(SteveZ)-[:ACTED_IN {roles:['Duane']}]->(RescueDawn),
(WernerH)-[:DIRECTED]->(RescueDawn)

CREATE (TheBirdcage:Movie {title:'The Birdcage', released:1996, tagline:'Come as you are'})
CREATE (MikeN:Person {name:'Mike Nichols', born:1931})
CREATE
(Robin)-[:ACTED_IN {roles:['Armand Goldman']}]->(TheBirdcage),
(Nathan)-[:ACTED_IN {roles:['Albert Goldman']}]->(TheBirdcage),
(Gene)-[:ACTED_IN {roles:['Sen. Kevin Keeley']}]->(TheBirdcage),
(MikeN)-[:DIRECTED]->(TheBirdcage)

CREATE (Unforgiven:Movie {title:'Unforgiven', released:1992, tagline:"It's a hell of a thing, killing a man"})
CREATE (RichardH:Person {name:'Richard Harris', born:1930})
CREATE (ClintE:Person {name:'Clint Eastwood', born:1930})
CREATE
(RichardH)-[:ACTED_IN {roles:['English Bob']}]->(Unforgiven),
(ClintE)-[:ACTED_IN {roles:['Bill Munny']}]->(Unforgiven),
(Gene)-[:ACTED_IN {roles:['Little Bill Daggett']}]->(Unforgiven),
(ClintE)-[:DIRECTED]->(Unforgiven)

CREATE (JohnnyMnemonic:Movie {title:'Johnny Mnemonic', released:1995, tagline:'The hottest data on earth. In the coolest head in town'})
CREATE (Takeshi:Person {name:'Takeshi Kitano', born:1947})
CREATE (Dina:Person {name:'Dina Meyer', born:1968})
CREATE (IceT:Person {name:'Ice-T', born:1958})
CREATE (RobertL:Person {name:'Robert Longo', born:1953})
CREATE
(Keanu)-[:ACTED_IN {roles:['Johnny Mnemonic']}]->(JohnnyMnemonic),
(Takeshi)-[:ACTED_IN {roles:['Takahashi']}]->(JohnnyMnemonic),
(Dina)-[:ACTED_IN {roles:['Jane']}]->(JohnnyMnemonic),
(IceT)-[:ACTED_IN {roles:['J-Bone']}]->(JohnnyMnemonic),
(RobertL)-[:DIRECTED]->(JohnnyMnemonic)

CREATE (CloudAtlas:Movie {title:'Cloud Atlas', released:2012, tagline:'Everything is connected'})
CREATE (HalleB:Person {name:'Halle Berry', born:1966})
CREATE (JimB:Person {name:'Jim Broadbent', born:1949})
CREATE (TomT:Person {name:'Tom Tykwer', born:1965})
CREATE (DavidMitchell:Person {name:'David Mitchell', born:1969})
CREATE (StefanArndt:Person {name:'Stefan Arndt', born:1961})
CREATE
(TomH)-[:ACTED_IN {roles:['Zachry', 'Dr. Henry Goose', 'Isaac Sachs', 'Dermot Hoggins']}]->(CloudAtlas),
(Hugo)-[:ACTED_IN {roles:['Bill Smoke', 'Haskell Moore', 'Tadeusz Kesselring', 'Nurse Noakes', 'Boardman Mephi', 'Old Georgie']}]->(CloudAtlas),
(HalleB)-[:ACTED_IN {roles:['Luisa Rey', 'Jocasta Ayrs', 'Ovid', 'Meronym']}]->(CloudAtlas),
(JimB)-[:ACTED_IN {roles:['Vyvyan Ayrs', 'Captain Molyneux', 'Timothy Cavendish']}]->(CloudAtlas),
(TomT)-[:DIRECTED]->(CloudAtlas),
(LillyW)-[:DIRECTED]->(CloudAtlas),
(LanaW)-[:DIRECTED]->(CloudAtlas),
(DavidMitchell)-[:WROTE]->(CloudAtlas),
(StefanArndt)-[:PRODUCED]->(CloudAtlas)

CREATE (TheDaVinciCode:Movie {title:'The Da Vinci Code', released:2006, tagline:'Break The Codes'})
CREATE (IanM:Person {name:'Ian McKellen', born:1939})
CREATE (AudreyT:Person {name:'Audrey Tautou', born:1976})
CREATE (PaulB:Person {name:'Paul Bettany', born:1971})
CREATE (RonH:Person {name:'Ron Howard', born:1954})
CREATE
(TomH)-[:ACTED_IN {roles:['Dr. Robert Langdon']}]->(TheDaVinciCode),
(IanM)-[:ACTED_IN {roles:['Sir Leight Teabing']}]->(TheDaVinciCode),
(AudreyT)-[:ACTED_IN {roles:['Sophie Neveu']}]->(TheDaVinciCode),
(PaulB)-[:ACTED_IN {roles:['Silas']}]->(TheDaVinciCode),
(RonH)-[:DIRECTED]->(TheDaVinciCode)

CREATE (VforVendetta:Movie {title:'V for Vendetta', released:2006, tagline:'Freedom! Forever!'})
CREATE (NatalieP:Person {name:'Natalie Portman', born:1981})
CREATE (StephenR:Person {name:'Stephen Rea', born:1946})
CREATE (JohnH:Person {name:'John Hurt', born:1940})
CREATE (BenM:Person {name: 'Ben Miles', born:1967})
CREATE
(Hugo)-[:ACTED_IN {roles:['V']}]->(VforVendetta),
(NatalieP)-[:ACTED_IN {roles:['Evey Hammond']}]->(VforVendetta),
(StephenR)-[:ACTED_IN {roles:['Eric Finch']}]->(VforVendetta),
(JohnH)-[:ACTED_IN {roles:['High Chancellor Adam Sutler']}]->(VforVendetta),
(BenM)-[:ACTED_IN {roles:['Dascomb']}]->(VforVendetta),
(JamesM)-[:DIRECTED]->(VforVendetta),
(LillyW)-[:PRODUCED]->(VforVendetta),
(LanaW)-[:PRODUCED]->(VforVendetta),
(JoelS)-[:PRODUCED]->(VforVendetta),
(LillyW)-[:WROTE]->(VforVendetta),
(LanaW)-[:WROTE]->(VforVendetta)

CREATE (SpeedRacer:Movie {title:'Speed Racer', released:2008, tagline:'Speed has no limits'})
CREATE (EmileH:Person {name:'Emile Hirsch', born:1985})
CREATE (JohnG:Person {name:'John Goodman', born:1960})
CREATE (SusanS:Person {name:'Susan Sarandon', born:1946})
CREATE (MatthewF:Person {name:'Matthew Fox', born:1966})
CREATE (ChristinaR:Person {name:'Christina Ricci', born:1980})
CREATE (Rain:Person {name:'Rain', born:1982})
CREATE
(EmileH)-[:ACTED_IN {roles:['Speed Racer']}]->(SpeedRacer),
(JohnG)-[:ACTED_IN {roles:['Pops']}]->(SpeedRacer),
(SusanS)-[:ACTED_IN {roles:['Mom']}]->(SpeedRacer),
(MatthewF)-[:ACTED_IN {roles:['Racer X']}]->(SpeedRacer),
(ChristinaR)-[:ACTED_IN {roles:['Trixie']}]->(SpeedRacer),
(Rain)-[:ACTED_IN {roles:['Taejo Togokahn']}]->(SpeedRacer),
(BenM)-[:ACTED_IN {roles:['Cass Jones']}]->(SpeedRacer),
(LillyW)-[:DIRECTED]->(SpeedRacer),
(LanaW)-[:DIRECTED]->(SpeedRacer),
(LillyW)-[:WROTE]->(SpeedRacer),
(LanaW)-[:WROTE]->(SpeedRacer),
(JoelS)-[:PRODUCED]->(SpeedRacer)

CREATE (NinjaAssassin:Movie {title:'Ninja Assassin', released:2009, tagline:'Prepare to enter a secret world of assassins'})
CREATE (NaomieH:Person {name:'Naomie Harris'})
CREATE
(Rain)-[:ACTED_IN {roles:['Raizo']}]->(NinjaAssassin),
(NaomieH)-[:ACTED_IN {roles:['Mika Coretti']}]->(NinjaAssassin),
(RickY)-[:ACTED_IN {roles:['Takeshi']}]->(NinjaAssassin),
(BenM)-[:ACTED_IN {roles:['Ryan Maslow']}]->(NinjaAssassin),
(JamesM)-[:DIRECTED]->(NinjaAssassin),
(LillyW)-[:PRODUCED]->(NinjaAssassin),
(LanaW)-[:PRODUCED]->(NinjaAssassin),
(JoelS)-[:PRODUCED]->(NinjaAssassin)

CREATE (TheGreenMile:Movie {title:'The Green Mile', released:1999, tagline:"Walk a mile you'll never forget."})
CREATE (MichaelD:Person {name:'Michael Clarke Duncan', born:1957})
CREATE (DavidM:Person {name:'David Morse', born:1953})
CREATE (SamR:Person {name:'Sam Rockwell', born:1968})
CREATE (GaryS:Person {name:'Gary Sinise', born:1955})
CREATE (PatriciaC:Person {name:'Patricia Clarkson', born:1959})
CREATE (FrankD:Person {name:'Frank Darabont', born:1959})
CREATE
(TomH)-[:ACTED_IN {roles:['Paul Edgecomb']}]->(TheGreenMile),
(MichaelD)-[:ACTED_IN {roles:['John Coffey']}]->(TheGreenMile),
(DavidM)-[:ACTED_IN {roles:['Brutus "Brutal" Howell']}]->(TheGreenMile),
(BonnieH)-[:ACTED_IN {roles:['Jan Edgecomb']}]->(TheGreenMile),
(JamesC)-[:ACTED_IN {roles:['Warden Hal Moores']}]->(TheGreenMile),
(SamR)-[:ACTED_IN {roles:['"Wild Bill" Wharton']}]->(TheGreenMile),
(GaryS)-[:ACTED_IN {roles:['Burt Hammersmith']}]->(TheGreenMile),
(PatriciaC)-[:ACTED_IN {roles:['Melinda Moores']}]->(TheGreenMile),
(FrankD)-[:DIRECTED]->(TheGreenMile)

CREATE (FrostNixon:Movie {title:'Frost/Nixon', released:2008, tagline:'400 million people were waiting for the truth.'})
CREATE (FrankL:Person {name:'Frank Langella', born:1938})
CREATE (MichaelS:Person {name:'Michael Sheen', born:1969})
CREATE (OliverP:Person {name:'Oliver Platt', born:1960})
CREATE
(FrankL)-[:ACTED_IN {roles:['Richard Nixon']}]->(FrostNixon),
(MichaelS)-[:ACTED_IN {roles:['David Frost']}]->(FrostNixon),
(KevinB)-[:ACTED_IN {roles:['Jack Brennan']}]->(FrostNixon),
(OliverP)-[:ACTED_IN {roles:['Bob Zelnick']}]->(FrostNixon),
(SamR)-[:ACTED_IN {roles:['James Reston, Jr.']}]->(FrostNixon),
(RonH)-[:DIRECTED]->(FrostNixon)

CREATE (Hoffa:Movie {title:'Hoffa', released:1992, tagline:"He didn't want law. He wanted justice."})
CREATE (DannyD:Person {name:'Danny DeVito', born:1944})
CREATE (JohnR:Person {name:'John C. Reilly', born:1965})
CREATE
(JackN)-[:ACTED_IN {roles:['Hoffa']}]->(Hoffa),
(DannyD)-[:ACTED_IN {roles:['Robert "Bobby" Ciaro']}]->(Hoffa),
(JTW)-[:ACTED_IN {roles:['Frank Fitzsimmons']}]->(Hoffa),
(JohnR)-[:ACTED_IN {roles:['Peter "Pete" Connelly']}]->(Hoffa),
(DannyD)-[:DIRECTED]->(Hoffa)

CREATE (Apollo13:Movie {title:'Apollo 13', released:1995, tagline:'Houston, we have a problem.'})
CREATE (EdH:Person {name:'Ed Harris', born:1950})
CREATE (BillPax:Person {name:'Bill Paxton', born:1955})
CREATE
(TomH)-[:ACTED_IN {roles:['Jim Lovell']}]->(Apollo13),
(KevinB)-[:ACTED_IN {roles:['Jack Swigert']}]->(Apollo13),
(EdH)-[:ACTED_IN {roles:['Gene Kranz']}]->(Apollo13),
(BillPax)-[:ACTED_IN {roles:['Fred Haise']}]->(Apollo13),
(GaryS)-[:ACTED_IN {roles:['Ken Mattingly']}]->(Apollo13),
(RonH)-[:DIRECTED]->(Apollo13)

CREATE (Twister:Movie {title:'Twister', released:1996, tagline:"Don't Breathe. Don't Look Back."})
CREATE (PhilipH:Person {name:'Philip Seymour Hoffman', born:1967})
CREATE (JanB:Person {name:'Jan de Bont', born:1943})
CREATE
(BillPax)-[:ACTED_IN {roles:['Bill Harding']}]->(Twister),
(HelenH)-[:ACTED_IN {roles:['Dr. Jo Harding']}]->(Twister),
(ZachG)-[:ACTED_IN {roles:['Eddie']}]->(Twister),
(PhilipH)-[:ACTED_IN {roles:['Dustin "Dusty" Davis']}]->(Twister),
(JanB)-[:DIRECTED]->(Twister)

CREATE (CastAway:Movie {title:'Cast Away', released:2000, tagline:'At the edge of the world, his journey begins.'})
CREATE (RobertZ:Person {name:'Robert Zemeckis', born:1951})
CREATE
(TomH)-[:ACTED_IN {roles:['Chuck Noland']}]->(CastAway),
(HelenH)-[:ACTED_IN {roles:['Kelly Frears']}]->(CastAway),
(RobertZ)-[:DIRECTED]->(CastAway)

CREATE (OneFlewOvertheCuckoosNest:Movie {title:"One Flew Over the Cuckoo's Nest", released:1975, tagline:"If he's crazy, what does that make you?"})
CREATE (MilosF:Person {name:'Milos Forman', born:1932})
CREATE
(JackN)-[:ACTED_IN {roles:['Randle McMurphy']}]->(OneFlewOvertheCuckoosNest),
(DannyD)-[:ACTED_IN {roles:['Martini']}]->(OneFlewOvertheCuckoosNest),
(MilosF)-[:DIRECTED]->(OneFlewOvertheCuckoosNest)

CREATE (SomethingsGottaGive:Movie {title:"Something's Gotta Give", released:2003})
CREATE (DianeK:Person {name:'Diane Keaton', born:1946})
CREATE (NancyM:Person {name:'Nancy Meyers', born:1949})
CREATE
(JackN)-[:ACTED_IN {roles:['Harry Sanborn']}]->(SomethingsGottaGive),
(DianeK)-[:ACTED_IN {roles:['Erica Barry']}]->(SomethingsGottaGive),
(Keanu)-[:ACTED_IN {roles:['Julian Mercer']}]->(SomethingsGottaGive),
(NancyM)-[:DIRECTED]->(SomethingsGottaGive),
(NancyM)-[:PRODUCED]->(SomethingsGottaGive),
(NancyM)-[:WROTE]->(SomethingsGottaGive)

CREATE (BicentennialMan:Movie {title:'Bicentennial Man', released:1999, tagline:"One robot's 200 year journey to become an ordinary man."})
CREATE (ChrisC:Person {name:'Chris Columbus', born:1958})
CREATE
(Robin)-[:ACTED_IN {roles:['Andrew Marin']}]->(BicentennialMan),
(OliverP)-[:ACTED_IN {roles:['Rupert Burns']}]->(BicentennialMan),
(ChrisC)-[:DIRECTED]->(BicentennialMan)

CREATE (CharlieWilsonsWar:Movie {title:"Charlie Wilson's War", released:2007, tagline:"A stiff drink. A little mascara. A lot of nerve. Who said they couldn't bring down the Soviet empire."})
CREATE (JuliaR:Person {name:'Julia Roberts', born:1967})
CREATE
(TomH)-[:ACTED_IN {roles:['Rep. Charlie Wilson']}]->(CharlieWilsonsWar),
(JuliaR)-[:ACTED_IN {roles:['Joanne Herring']}]->(CharlieWilsonsWar),
(PhilipH)-[:ACTED_IN {roles:['Gust Avrakotos']}]->(CharlieWilsonsWar),
(MikeN)-[:DIRECTED]->(CharlieWilsonsWar)

CREATE (ThePolarExpress:Movie {title:'The Polar Express', released:2004, tagline:'This Holiday Season... Believe'})
CREATE
(TomH)-[:ACTED_IN {roles:['Hero Boy', 'Father', 'Conductor', 'Hobo', 'Scrooge', 'Santa Claus']}]->(ThePolarExpress),
(RobertZ)-[:DIRECTED]->(ThePolarExpress)

CREATE (ALeagueofTheirOwn:Movie {title:'A League of Their Own', released:1992, tagline:'Once in a lifetime you get a chance to do something different.'})
CREATE (Madonna:Person {name:'Madonna', born:1954})
CREATE (GeenaD:Person {name:'Geena Davis', born:1956})
CREATE (LoriP:Person {name:'Lori Petty', born:1963})
CREATE (PennyM:Person {name:'Penny Marshall', born:1943})
CREATE
(TomH)-[:ACTED_IN {roles:['Jimmy Dugan']}]->(ALeagueofTheirOwn),
(GeenaD)-[:ACTED_IN {roles:['Dottie Hinson']}]->(ALeagueofTheirOwn),
(LoriP)-[:ACTED_IN {roles:['Kit Keller']}]->(ALeagueofTheirOwn),
(RosieO)-[:ACTED_IN {roles:['Doris Murphy']}]->(ALeagueofTheirOwn),
(Madonna)-[:ACTED_IN {roles:['"All the Way" Mae Mordabito']}]->(ALeagueofTheirOwn),
(BillPax)-[:ACTED_IN {roles:['Bob Hinson']}]->(ALeagueofTheirOwn),
(PennyM)-[:DIRECTED]->(ALeagueofTheirOwn)

CREATE (PaulBlythe:Person {name:'Paul Blythe'})
CREATE (AngelaScope:Person {name:'Angela Scope'})
CREATE (JessicaThompson:Person {name:'Jessica Thompson'})
CREATE (JamesThompson:Person {name:'James Thompson'})

CREATE
(JamesThompson)-[:FOLLOWS]->(JessicaThompson),
(AngelaScope)-[:FOLLOWS]->(JessicaThompson),
(PaulBlythe)-[:FOLLOWS]->(AngelaScope)

CREATE
(JessicaThompson)-[:REVIEWED {summary:'An amazing journey', rating:95}]->(CloudAtlas),
(JessicaThompson)-[:REVIEWED {summary:'Silly, but fun', rating:65}]->(TheReplacements),
(JamesThompson)-[:REVIEWED {summary:'The coolest football movie ever', rating:100}]->(TheReplacements),
(AngelaScope)-[:REVIEWED {summary:'Pretty funny at times', rating:62}]->(TheReplacements),
(JessicaThompson)-[:REVIEWED {summary:'Dark, but compelling', rating:85}]->(Unforgiven),
(JessicaThompson)-[:REVIEWED {summary:"Slapstick redeemed only by the Robin Williams and Gene Hackman's stellar performances", rating:45}]->(TheBirdcage),
(JessicaThompson)-[:REVIEWED {summary:'A solid romp', rating:68}]->(TheDaVinciCode),
(JamesThompson)-[:REVIEWED {summary:'Fun, but a little far fetched', rating:65}]->(TheDaVinciCode),
(JessicaThompson)-[:REVIEWED {summary:'You had me at Jerry', rating:92}]->(JerryMaguire)

WITH TomH as a
MATCH (a)-[:ACTED_IN]->(m)<-[:DIRECTED]-(d) RETURN a,m,d LIMIT 10;`;

export const testData: {
  mockSchema: DbSchema;
  largeQuery: string;
  emptyFunction: Neo4jFunction;
  emptyProcedure: Neo4jProcedure;
} = {
  mockSchema,
  largeQuery,
  emptyFunction: {
    name: '',
    category: '',
    description: '',
    isBuiltIn: false,
    argumentDescription: [],
    returnDescription: '',
    signature: '',
    aggregating: false,
    isDeprecated: false,
  },
  emptyProcedure: {
    name: '',
    description: '',
    mode: 'READ',
    worksOnSystem: false,
    argumentDescription: [],
    returnDescription: [],
    signature: '',
    admin: false,
    option: {
      deprecated: false,
    },
  },
};
