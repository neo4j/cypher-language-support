{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Cypher",
  "patterns": [
    {
      "include": "#strings"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#parameters"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#properties"
    },
    {
      "include": "#labels"
    },
    {
      "include": "#callables"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#variables"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "match": "&|\\||:|::|\\/|\\$|\\.|\\.\\.|\\|\\||=|!|>=|>|<=|<|-|<>|!=|%|\\+|\\+=|\\^|\\?|=~|\\*",
          "name": "keyword.operator"
        },
        {
          "match": "(?i)\\b(ACCESS|ACTIVE|ADMIN|ADMINISTRATOR|ALIAS|ALIASES|ALL|allShortestPaths|ALTER|AND|ANY|ARRAY|AS|ASC|ASCENDING|ASSERT|ASSIGN|AT|AUTH|BINDINGS|BOOL|BOOLEAN|BOOSTED|BOTH|BREAK|BRIEF|BTREE|BUILT|BY|CALL|CASE|CIDR|CHANGE|COLLECT|COMMAND|COMMANDS|COMMIT|COMPOSITE|CONSTRAINT|CONSTRAINTS|CONTAINS|CONTINUE|COPY|COUNT|CREATE|CSV|CONCURRENT|CURRENT|DATA|DATABASE|DATABASES|DATE|DATETIME|DBMS|DEALLOCATE|DEFAULT|DEFINED|DELETE|DENY|DESC|DESCENDING|DESTROY|DETACH|DIFFERENT|DISTINCT|DRIVER|DROP|DRYRUN|DUMP|DURATION|EACH|EDGE|ELEMENT|ELEMENTS|ELSE|ENABLE|ENCRYPTED|END|ENDS|ERROR|EXECUTABLE|EXECUTE|EXIST|EXISTENCE|EXISTS|FAIL|FALSE|FIELDTERMINATOR|FINISH|FLOAT|FOR|FOREACH|FROM|FULLTEXT|FUNCTION|FUNCTIONS|GRANT|GRAPH|GRAPHS|GROUP|GROUPS|HEADERS|HOME|ID|IF|IMMUTABLE|IMPERSONATE|IN|INDEX|INDEXES|INF|INFINITY|INSERT|INT|INTEGER|IS|JOIN|KEY|LABEL|LABELS|LEADING|LIMIT|LIST|LOAD|LOCAL|LOOKUP|MANAGEMENT|MAP|MATCH|MERGE|NAME|NAMES|NAN|NEW|NFC|NFD|NFKC|NFKD|NODE|NODETACH|NODES|NONE|NORMALIZE|NORMALIZED|NOT|NOTHING|NOWAIT|NULL|OF|ON|ONLY|OPTION|OPTIONAL|OPTIONS|OR|ORDER|OUTPUT|PASSWORD|PASSWORDS|PATH|PATHS|PERIODIC|PLAINTEXT|POINT|POPULATED|PRIMARY|PRIMARIES|PRIVILEGE|PRIVILEGES|PROCEDURE|PROCEDURES|PROPERTIES|PROPERTY|PROVIDER|PROVIDERS|RANGE|READ|REALLOCATE|REDUCE|REL|RELATIONSHIP|RELATIONSHIPS|REMOVE|RENAME|REPEATABLE|REPLACE|REPORT|REQUIRE|REQUIRED|RETURN|REVOKE|ROLE|ROLES|ROW|ROWS|SCAN|SECONDARY|SECONDARIES|SEC|SECOND|SECONDS|SEEK|SERVER|SERVERS|SET|SETTING|SETTINGS|SHORTEST|shortestPath|SHOW|SIGNED|SINGLE|SKIP|START|STARTS|STATUS|STOP|VARCHAR|STRING|SUPPORTED|SUSPENDED|TARGET|TERMINATE|TEXT|THEN|TIME|TIMESTAMP|TIMEZONE|TO|TOPOLOGY|TRAILING|TRANSACTION|TRANSACTIONS|TRAVERSE|TRIM|TRUE|TYPE|TYPED|TYPES|UNION|UNIQUE|UNIQUENESS|UNWIND|URL|USE|USER|USERS|USING|VALUE|VECTOR|VERBOSE|VERTEX|WAIT|WHEN|WHERE|WITH|WITHOUT|WRITE|XOR|YIELD|ZONE|ZONED|EXPLAIN|PROFILE)\\b",
          "name": "keyword"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "begin": "'",
          "end": "'",
          "name": "string.quoted.single",
          "patterns": [
            {
              "match": "\\\\(?:.|$)",
              "name": "constant.character.escape"
            }
          ]
        },
        {
          "begin": "\"",
          "end": "\"",
          "name": "string.quoted.double",
          "patterns": [
            {
              "match": "\\\\(?:.|$)",
              "name": "constant.character.escape"
            }
          ]
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "begin": "//",
          "end": "$",
          "name": "comment.line"
        },
        {
          "begin": "/\\*",
          "end": "\\*/",
          "name": "comment.block"
        }
      ]
    },
    "labels": {
      "begin": "(?<!\\{.*)\\:",
      "end": "(\\s|\\`.+?\\`|\\w|&|\\||\\(.+?\\)|\\!)+",
      "beginCaptures": {
        "0": {
          "name": "keyword.operator"
        }
      },
      "endCaptures": {
        "0": {
          "patterns": [
            {
              "match": "[&|!]",
              "name": "keyword.operator"
            },
            {
              "match": "\\`.+?\\`|\\w+",
              "name": "entity.name.class"
            }
          ]
        }
      }
    },
    "properties": {
      "begin": "\\.",
      "end": "\\w+",
      "beginCaptures": {
        "0": {
          "name": "keyword.operator"
        }
      },
      "endCaptures": {
        "0": {
          "patterns": [
            {
              "match": "\\w*[a-zA-Z]\\w*",
              "name": "variable.property"
            },
            {
              "include": "#constants"
            }
          ]
        }
      }
    },
    "constants": {
      "patterns": [
        {
          "match": "\\b\\d*(\\.)?\\d+\\b",
          "name": "constant.numeric"
        },
        {
          "match": "(?i)\\b(TRUE|FALSE)\\b",
          "name": "constant.numeric"
        }
      ]
    },
    "callables": {
      "match": "(?i:(?!\\b(match|and|or|xor)\\b))(((\\`\\w+\\`|\\w+)(\\s*\\.\\s*(\\`\\w+\\`|\\w+))*)|(\\`\\w+(\\s*\\.\\s*\\w+)*\\`))\\s*\\(",
      "name": "entity.name.function"
    },
    "parameters": {
      "match": "(\\$)(\\w+)",
      "captures": {
        "1": {
          "name": "entity.name.namespace"
        },
        "2": {
          "name": "variable"
        }
      }
    },
    "variables": {
      "match": "\\w+",
      "name": "variable"
    }
  },
  "scopeName": "source.cypher"
}